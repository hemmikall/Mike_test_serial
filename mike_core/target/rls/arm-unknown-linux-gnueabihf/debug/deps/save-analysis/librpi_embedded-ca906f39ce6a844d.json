{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0","program":"/home/dpop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rpi_embedded","--edition=2018","/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=ca906f39ce6a844d","-C","extra-filename=-ca906f39ce6a844d","--out-dir","/home/dpop/Documents/GitHub/Mike-core/mike_core/target/rls/arm-unknown-linux-gnueabihf/debug/deps","--target","arm-unknown-linux-gnueabihf","-C","linker=arm-linux-gnueabihf-gcc","-L","dependency=/home/dpop/Documents/GitHub/Mike-core/mike_core/target/rls/arm-unknown-linux-gnueabihf/debug/deps","-L","dependency=/home/dpop/Documents/GitHub/Mike-core/mike_core/target/rls/debug/deps","--extern","lazy_static=/home/dpop/Documents/GitHub/Mike-core/mike_core/target/rls/arm-unknown-linux-gnueabihf/debug/deps/liblazy_static-5c62149a8c1bb994.rmeta","--extern","libc=/home/dpop/Documents/GitHub/Mike-core/mike_core/target/rls/arm-unknown-linux-gnueabihf/debug/deps/liblibc-e626dd5dafc0c113.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dpop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dpop/Documents/GitHub/Mike-core/mike_core/target/rls/arm-unknown-linux-gnueabihf/debug/deps/librpi_embedded-ca906f39ce6a844d.rmeta"},"prelude":{"crate_id":{"name":"rpi_embedded","disambiguator":[11455623910732064013,0]},"crate_root":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src","external_crates":[{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2558183281071091734,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17930309289214527112,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[14518270914441242570,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2056816703833760926,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[263592133389127902,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6313592986850129274,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7908042851433273054,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5268474705390357542,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8222606895523886667,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17159437771487188998,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5160849031503779362,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[1560058580958982372,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[5684491273208024030,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15935281598191349318,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[225184955421101349,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10703373693846501830,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[12954411982148612715,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[3970742854248919223,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[3211155878155126720,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","num":20,"id":{"name":"lazy_static","disambiguator":[8274507222854603115,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","num":21,"id":{"name":"libc","disambiguator":[9851869757410333131,0]}}],"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1121,"byte_end":2499,"line_start":21,"line_end":53,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1975},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12419,"byte_end":12427,"line_start":160,"line_end":160,"column_start":21,"column_end":29},"alias_span":null,"name":"InputPin","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":2029},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12429,"byte_end":12434,"line_start":160,"line_end":160,"column_start":31,"column_end":36},"alias_span":null,"name":"IoPin","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":2000},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12436,"byte_end":12445,"line_start":160,"line_end":160,"column_start":38,"column_end":47},"alias_span":null,"name":"OutputPin","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1961},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12447,"byte_end":12450,"line_start":160,"line_end":160,"column_start":49,"column_end":52},"alias_span":null,"name":"Pin","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":2227},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100851,"byte_end":100863,"line_start":153,"line_end":153,"column_start":22,"column_end":34},"alias_span":null,"name":"Capabilities","value":"","parent":{"krate":0,"index":693}},{"kind":"Use","ref_id":{"krate":0,"index":2381},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173126,"byte_end":173133,"line_start":170,"line_end":170,"column_start":24,"column_end":31},"alias_span":null,"name":"Segment","value":"","parent":{"krate":0,"index":1022}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1121,"byte_end":2499,"line_start":21,"line_end":53,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":693},{"krate":0,"index":905},{"krate":0,"index":1022},{"krate":0,"index":1212},{"krate":0,"index":1258},{"krate":0,"index":1734},{"krate":0,"index":1769}],"decl_id":null,"docs":" rpi_embedded is a fork of the RPPAL library. This fork is made to increase the usability\n of the RPPAL library. Spesificaly making it more user friendly and beginer friendly\n rpi_embedded provides access to the Raspberry Pi's GPIO, I2C, PWM, SPI, UART and Bluetooth\n peripherals. There is also a ADXL345 and pwm servo library included for ease of use.\n RPPAL also offers support for USB to serial adapters. The library\n can be used in conjunction with a variety of platform-agnostic drivers\n through its `embedded-hal` trait implementations by enabling the optional\n `hal` feature. However the new functions included in rpi_embedded might fail.","sig":null,"attributes":[{"value":"/ rpi_embedded is a fork of the RPPAL library. This fork is made to increase the usability","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1121,"byte_end":1213,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/ of the RPPAL library. Spesificaly making it more user friendly and beginer friendly","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1214,"byte_end":1301,"line_start":22,"line_end":22,"column_start":1,"column_end":88}},{"value":"/ rpi_embedded provides access to the Raspberry Pi's GPIO, I2C, PWM, SPI, UART and Bluetooth","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1302,"byte_end":1396,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ peripherals. There is also a ADXL345 and pwm servo library included for ease of use.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1397,"byte_end":1485,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ RPPAL also offers support for USB to serial adapters. The library","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1486,"byte_end":1555,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ can be used in conjunction with a variety of platform-agnostic drivers","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1556,"byte_end":1630,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ through its `embedded-hal` trait implementations by enabling the optional","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1631,"byte_end":1708,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ `hal` feature. However the new functions included in rpi_embedded might fail.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1709,"byte_end":1790,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1791,"byte_end":1794,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ rpi_embedded requires Raspbian or any similar, recent, Linux distribution.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1795,"byte_end":1873,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ rpie_embedded has only been tested on Rpi Zero W but RPPAL is compatible with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1874,"byte_end":1955,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"/ the Raspberry Pi A, A+, B, B+, 2B, 3A+, 3B, 3B+, 4B, CM, CM 3, CM 3+, Zero and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":1956,"byte_end":2038,"line_start":32,"line_end":32,"column_start":1,"column_end":83}},{"value":"/ Zero W. In theory it should all work except for bluetooth maybe.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2039,"byte_end":2107,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2108,"byte_end":2111,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Note that this fork is still in production, and might change massivly from version to version","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2112,"byte_end":2209,"line_start":35,"line_end":35,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gpio","qualname":"::gpio","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":121},{"krate":0,"index":205},{"krate":0,"index":375},{"krate":0,"index":487},{"krate":0,"index":567},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":2086},{"krate":0,"index":2100},{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":2102},{"krate":0,"index":2127},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":664},{"krate":0,"index":2138},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":2156},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":671},{"krate":0,"index":2177},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":681},{"krate":0,"index":2201},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2209},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":683}],"decl_id":null,"docs":" Interface for the GPIO peripheral.","sig":null,"attributes":[{"value":"/ Interface for the GPIO peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6148,"byte_end":6186,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6187,"byte_end":6190,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ To ensure fast performance, RPPAL controls the GPIO peripheral by directly","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6191,"byte_end":6269,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ accessing the registers through either `/dev/gpiomem` or `/dev/mem`. GPIO interrupts","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6270,"byte_end":6358,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ are configured using the `gpiochip` character device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6359,"byte_end":6416,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6417,"byte_end":6420,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Pins","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6421,"byte_end":6432,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6433,"byte_end":6436,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ GPIO pins are retrieved from a [`Gpio`] instance by their BCM GPIO pin number by calling","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6437,"byte_end":6529,"line_start":29,"line_end":29,"column_start":1,"column_end":93}},{"value":"/ [`Gpio::get`]. The returned unconfigured [`Pin`] can be used to read the pin's","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6530,"byte_end":6612,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/ mode and logic level. Converting the [`Pin`] to an [`InputPin`], [`OutputPin`] or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6613,"byte_end":6698,"line_start":31,"line_end":31,"column_start":1,"column_end":86}},{"value":"/ [`IoPin`] through the various `into_` methods available on [`Pin`] configures the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6699,"byte_end":6784,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"/ appropriate mode, and provides access to additional methods relevant to the selected pin mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6785,"byte_end":6883,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6884,"byte_end":6887,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Retrieving a GPIO pin with [`Gpio::get`] grants access to the pin through an owned [`Pin`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6888,"byte_end":6982,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ instance. If the pin is already in use, or the GPIO peripheral doesn't expose a pin with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":6983,"byte_end":7075,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/ the specified number, [`Gpio::get`] returns `Err(`[`Error::PinNotAvailable`]`)`. After a [`Pin`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7076,"byte_end":7176,"line_start":37,"line_end":37,"column_start":1,"column_end":101}},{"value":"/ (or a derived [`InputPin`], [`OutputPin`] or [`IoPin`]) goes out of scope, it can be","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7177,"byte_end":7265,"line_start":38,"line_end":38,"column_start":1,"column_end":89}},{"value":"/ retrieved again through another [`Gpio::get`] call.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7266,"byte_end":7321,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7322,"byte_end":7325,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ By default, pins are reset to their original state when they go out of scope.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7326,"byte_end":7407,"line_start":41,"line_end":41,"column_start":1,"column_end":82}},{"value":"/ Use [`InputPin::set_reset_on_drop(false)`], [`OutputPin::set_reset_on_drop(false)`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7408,"byte_end":7495,"line_start":42,"line_end":42,"column_start":1,"column_end":88}},{"value":"/ or [`IoPin::set_reset_on_drop(false)`], respectively, to disable this behavior.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7496,"byte_end":7579,"line_start":43,"line_end":43,"column_start":1,"column_end":84}},{"value":"/ Note that `drop` methods aren't called when a process is abnormally terminated (for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7580,"byte_end":7667,"line_start":44,"line_end":44,"column_start":1,"column_end":88}},{"value":"/ instance when a `SIGINT` signal isn't caught).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7668,"byte_end":7718,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7719,"byte_end":7722,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ## Interrupts","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7723,"byte_end":7740,"line_start":47,"line_end":47,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7741,"byte_end":7744,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ [`InputPin`] supports both synchronous and asynchronous interrupt handlers.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7745,"byte_end":7824,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7825,"byte_end":7828,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Synchronous (blocking) interrupt triggers are configured using [`InputPin::set_interrupt`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7829,"byte_end":7924,"line_start":51,"line_end":51,"column_start":1,"column_end":96}},{"value":"/ An interrupt trigger for a single pin can be polled with [`InputPin::poll_interrupt`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":7925,"byte_end":8015,"line_start":52,"line_end":52,"column_start":1,"column_end":91}},{"value":"/ which blocks the current thread until a trigger event occurs, or until the timeout period","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8016,"byte_end":8109,"line_start":53,"line_end":53,"column_start":1,"column_end":94}},{"value":"/ elapses. [`Gpio::poll_interrupts`] should be used when multiple pins have been configured","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8110,"byte_end":8203,"line_start":54,"line_end":54,"column_start":1,"column_end":94}},{"value":"/ for synchronous interrupt triggers, and need to be polled simultaneously.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8204,"byte_end":8281,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8282,"byte_end":8285,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Asynchronous interrupt triggers are configured using [`InputPin::set_async_interrupt`]. The","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8286,"byte_end":8381,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ specified callback function will be executed on a separate thread when a trigger event occurs.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8382,"byte_end":8480,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8481,"byte_end":8484,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ## Software-based PWM","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8485,"byte_end":8510,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8511,"byte_end":8514,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`OutputPin`] and [`IoPin`] feature a software-based PWM implementation. The PWM signal is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8515,"byte_end":8609,"line_start":62,"line_end":62,"column_start":1,"column_end":95}},{"value":"/ emulated by toggling the pin's output state on a separate thread, combined with sleep and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8610,"byte_end":8703,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"/ busy-waiting.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8704,"byte_end":8721,"line_start":64,"line_end":64,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8722,"byte_end":8725,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Software-based PWM is inherently inaccurate on a multi-threaded OS due to scheduling/preemption.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8726,"byte_end":8826,"line_start":66,"line_end":66,"column_start":1,"column_end":101}},{"value":"/ If an accurate or faster PWM signal is required, use the hardware [`Pwm`] peripheral instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8827,"byte_end":8924,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8925,"byte_end":8928,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ PWM threads may occasionally sleep longer than needed. If the active or inactive part of the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":8929,"byte_end":9025,"line_start":69,"line_end":69,"column_start":1,"column_end":97}},{"value":"/ signal is shorter than 250 µs, only busy-waiting is used, which will increase CPU usage. Due to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9026,"byte_end":9126,"line_start":70,"line_end":70,"column_start":1,"column_end":100}},{"value":"/ function call overhead, typical jitter is expected to be up to 10 µs on debug builds, and up to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9127,"byte_end":9227,"line_start":71,"line_end":71,"column_start":1,"column_end":100}},{"value":"/ 2 µs on release builds.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9228,"byte_end":9256,"line_start":72,"line_end":72,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9257,"byte_end":9260,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9261,"byte_end":9276,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9277,"byte_end":9280,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Basic example:","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9281,"byte_end":9299,"line_start":76,"line_end":76,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9300,"byte_end":9303,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9304,"byte_end":9311,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ use std::thread;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9312,"byte_end":9332,"line_start":79,"line_end":79,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9333,"byte_end":9361,"line_start":80,"line_end":80,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9362,"byte_end":9365,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ use rppal::gpio::Gpio;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9366,"byte_end":9392,"line_start":82,"line_end":82,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9393,"byte_end":9396,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> rppal::gpio::Result<()> {","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9397,"byte_end":9441,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/ let gpio = Gpio::new()?;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9442,"byte_end":9470,"line_start":85,"line_end":85,"column_start":1,"column_end":29}},{"value":"/ let mut pin = gpio.get(23)?.into_output();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9471,"byte_end":9517,"line_start":86,"line_end":86,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9518,"byte_end":9521,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ pin.set_high();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9522,"byte_end":9541,"line_start":88,"line_end":88,"column_start":1,"column_end":20}},{"value":"/ thread::sleep(Duration::from_secs(1));","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9542,"byte_end":9584,"line_start":89,"line_end":89,"column_start":1,"column_end":43}},{"value":"/ pin.set_low();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9585,"byte_end":9603,"line_start":90,"line_end":90,"column_start":1,"column_end":19}},{"value":"/ # Ok(())","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9604,"byte_end":9616,"line_start":91,"line_end":91,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9617,"byte_end":9624,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9625,"byte_end":9632,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9633,"byte_end":9636,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Additional examples can be found in the `examples` directory.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9637,"byte_end":9702,"line_start":95,"line_end":95,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9703,"byte_end":9706,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ## Troubleshooting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9707,"byte_end":9729,"line_start":97,"line_end":97,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9730,"byte_end":9733,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ### Permission denied","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9734,"byte_end":9759,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9760,"byte_end":9763,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ In recent releases of Raspbian (December 2017 or later), users that are part of the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9764,"byte_end":9851,"line_start":101,"line_end":101,"column_start":1,"column_end":88}},{"value":"/ `gpio` group (like the default `pi` user) can access `/dev/gpiomem` and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9852,"byte_end":9927,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/ `/dev/gpiochipN` (N = 0-2) without needing additional permissions. If you encounter any","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":9928,"byte_end":10019,"line_start":103,"line_end":103,"column_start":1,"column_end":92}},{"value":"/ [`PermissionDenied`] errors when constructing a new [`Gpio`] instance, either the current","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10020,"byte_end":10113,"line_start":104,"line_end":104,"column_start":1,"column_end":94}},{"value":"/ user isn't a member of the `gpio` group, or your Raspbian distribution isn't","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10114,"byte_end":10194,"line_start":105,"line_end":105,"column_start":1,"column_end":81}},{"value":"/ up-to-date and doesn't automatically configure permissions for the above-mentioned","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10195,"byte_end":10281,"line_start":106,"line_end":106,"column_start":1,"column_end":87}},{"value":"/ files. Updating Raspbian to the latest release should fix any permission issues.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10282,"byte_end":10366,"line_start":107,"line_end":107,"column_start":1,"column_end":85}},{"value":"/ Alternatively, although not recommended, you can run your application with superuser","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10367,"byte_end":10455,"line_start":108,"line_end":108,"column_start":1,"column_end":89}},{"value":"/ privileges by using `sudo`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10456,"byte_end":10487,"line_start":109,"line_end":109,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10488,"byte_end":10491,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ If you're unable to update Raspbian and its packages (namely `raspberrypi-sys-mods`) to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10492,"byte_end":10583,"line_start":111,"line_end":111,"column_start":1,"column_end":92}},{"value":"/ the latest available release, or updating hasn't fixed the issue, you might be able to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10584,"byte_end":10674,"line_start":112,"line_end":112,"column_start":1,"column_end":91}},{"value":"/ manually update your `udev` rules to set the appropriate permissions. More information","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10675,"byte_end":10765,"line_start":113,"line_end":113,"column_start":1,"column_end":91}},{"value":"/ can be found at [raspberrypi/linux#1225] and [raspberrypi/linux#2289].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10766,"byte_end":10840,"line_start":114,"line_end":114,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10841,"byte_end":10844,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ [`Error::PinNotAvailable`]: enum.Error.html#variant.PinNotAvailable","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10845,"byte_end":10916,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/ [`PermissionDenied`]: enum.Error.html#variant.PermissionDenied","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10917,"byte_end":10983,"line_start":117,"line_end":117,"column_start":1,"column_end":67}},{"value":"/ [raspberrypi/linux#1225]: https://github.com/raspberrypi/linux/issues/1225","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":10984,"byte_end":11062,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/ [raspberrypi/linux#2289]: https://github.com/raspberrypi/linux/issues/2289","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11063,"byte_end":11141,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ [`Gpio`]: struct.Gpio.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11142,"byte_end":11172,"line_start":120,"line_end":120,"column_start":1,"column_end":31}},{"value":"/ [`Gpio::get`]: struct.Gpio.html#method.get","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11173,"byte_end":11219,"line_start":121,"line_end":121,"column_start":1,"column_end":47}},{"value":"/ [`Gpio::poll_interrupts`]: struct.Gpio.html#method.poll_interrupts","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11220,"byte_end":11290,"line_start":122,"line_end":122,"column_start":1,"column_end":71}},{"value":"/ [`Pin`]: struct.Pin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11291,"byte_end":11319,"line_start":123,"line_end":123,"column_start":1,"column_end":29}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11320,"byte_end":11358,"line_start":124,"line_end":124,"column_start":1,"column_end":39}},{"value":"/ [`InputPin::set_reset_on_drop(false)`]: struct.InputPin.html#method.set_reset_on_drop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11359,"byte_end":11448,"line_start":125,"line_end":125,"column_start":1,"column_end":90}},{"value":"/ [`InputPin::set_interrupt`]: struct.InputPin.html#method.set_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11449,"byte_end":11523,"line_start":126,"line_end":126,"column_start":1,"column_end":75}},{"value":"/ [`InputPin::poll_interrupt`]: struct.InputPin.html#method.poll_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11524,"byte_end":11600,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ [`InputPin::set_async_interrupt`]: struct.InputPin.html#method.set_async_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11601,"byte_end":11687,"line_start":128,"line_end":128,"column_start":1,"column_end":87}},{"value":"/ [`OutputPin`]: struct.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11688,"byte_end":11728,"line_start":129,"line_end":129,"column_start":1,"column_end":41}},{"value":"/ [`OutputPin::set_reset_on_drop(false)`]: struct.OutputPin.html#method.set_reset_on_drop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11729,"byte_end":11820,"line_start":130,"line_end":130,"column_start":1,"column_end":92}},{"value":"/ [`IoPin`]: struct.IoPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11821,"byte_end":11853,"line_start":131,"line_end":131,"column_start":1,"column_end":33}},{"value":"/ [`IoPin::set_reset_on_drop(false)`]: struct.IoPin.html#method.set_reset_on_drop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11854,"byte_end":11937,"line_start":132,"line_end":132,"column_start":1,"column_end":84}},{"value":"/ [`Pwm`]: ../pwm/struct.Pwm.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":11938,"byte_end":11973,"line_start":133,"line_end":133,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1961},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71278,"byte_end":71281,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"Pin","qualname":"::gpio::pin::Pin","value":"Pin {  }","parent":null,"children":[{"krate":0,"index":1962},{"krate":0,"index":1963}],"decl_id":null,"docs":" Unconfigured GPIO pin.","sig":null,"attributes":[{"value":"/ Unconfigured GPIO pin.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70370,"byte_end":70396,"line_start":266,"line_end":266,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70397,"byte_end":70400,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ `Pin`s are constructed by retrieving them using [`Gpio::get`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70401,"byte_end":70467,"line_start":268,"line_end":268,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70468,"byte_end":70471,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ An unconfigured `Pin` can be used to read the pin's mode and logic level.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70472,"byte_end":70549,"line_start":270,"line_end":270,"column_start":1,"column_end":78}},{"value":"/ Converting the `Pin` to an [`InputPin`], [`OutputPin`] or [`IoPin`] through the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70550,"byte_end":70633,"line_start":271,"line_end":271,"column_start":1,"column_end":84}},{"value":"/ various `into_` methods available on `Pin` configures the appropriate mode, and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70634,"byte_end":70717,"line_start":272,"line_end":272,"column_start":1,"column_end":84}},{"value":"/ provides access to additional methods relevant to the selected pin mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70718,"byte_end":70794,"line_start":273,"line_end":273,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70795,"byte_end":70798,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The `unproven` `embedded-hal` [`digital::InputPin`] trait implementation for `Pin` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70799,"byte_end":70900,"line_start":275,"line_end":275,"column_start":1,"column_end":102}},{"value":"/ by specifying the optional `hal-unproven` feature in the dependency declaration for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70901,"byte_end":70988,"line_start":276,"line_end":276,"column_start":1,"column_end":88}},{"value":"/ the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":70989,"byte_end":71011,"line_start":277,"line_end":277,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71012,"byte_end":71015,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ [`digital::InputPin`]: ../../embedded_hal/digital/trait.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71016,"byte_end":71089,"line_start":279,"line_end":279,"column_start":1,"column_end":74}},{"value":"/ [`Gpio::get`]: struct.Gpio.html#method.get","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71090,"byte_end":71136,"line_start":280,"line_end":280,"column_start":1,"column_end":47}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71137,"byte_end":71175,"line_start":281,"line_end":281,"column_start":1,"column_end":39}},{"value":"/ [`OutputPin`]: struct.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71176,"byte_end":71216,"line_start":282,"line_end":282,"column_start":1,"column_end":41}},{"value":"/ [`IoPin`]: struct.IoPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71217,"byte_end":71249,"line_start":283,"line_end":283,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71631,"byte_end":71634,"line_start":300,"line_end":300,"column_start":12,"column_end":15},"name":"pin","qualname":"<Pin>::pin","value":"pub fn pin(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the GPIO pin number.","sig":null,"attributes":[{"value":"/ Returns the GPIO pin number.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71479,"byte_end":71511,"line_start":296,"line_end":296,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71516,"byte_end":71519,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Pins are addressed by their BCM numbers, rather than their physical location.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71524,"byte_end":71605,"line_start":298,"line_end":298,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71610,"byte_end":71619,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71731,"byte_end":71735,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"mode","qualname":"<Pin>::mode","value":"pub fn mode(&Self) -> Mode","parent":null,"children":[],"decl_id":null,"docs":" Returns the pin's mode.\n","sig":null,"attributes":[{"value":"/ Returns the pin's mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71678,"byte_end":71705,"line_start":304,"line_end":304,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71710,"byte_end":71719,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71870,"byte_end":71874,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"read","qualname":"<Pin>::read","value":"pub fn read(&Self) -> Level","parent":null,"children":[],"decl_id":null,"docs":" Reads the pin's logic level.\n","sig":null,"attributes":[{"value":"/ Reads the pin's logic level.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71812,"byte_end":71844,"line_start":310,"line_end":310,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71849,"byte_end":71858,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72223,"byte_end":72233,"line_start":322,"line_end":322,"column_start":12,"column_end":22},"name":"into_input","qualname":"<Pin>::into_input","value":"pub fn into_input(Self) -> InputPin","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Pin`, returns an [`InputPin`], sets its mode to [`Input`],\n and disables the pin's built-in pull-up/pull-down resistors.","sig":null,"attributes":[{"value":"/ Consumes the `Pin`, returns an [`InputPin`], sets its mode to [`Input`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71953,"byte_end":72029,"line_start":316,"line_end":316,"column_start":5,"column_end":81}},{"value":"/ and disables the pin's built-in pull-up/pull-down resistors.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72034,"byte_end":72098,"line_start":317,"line_end":317,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72103,"byte_end":72106,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72111,"byte_end":72149,"line_start":319,"line_end":319,"column_start":5,"column_end":43}},{"value":"/ [`Input`]: enum.Mode.html#variant.Input","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72154,"byte_end":72197,"line_start":320,"line_end":320,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72202,"byte_end":72211,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72785,"byte_end":72804,"line_start":336,"line_end":336,"column_start":12,"column_end":31},"name":"into_input_pulldown","qualname":"<Pin>::into_input_pulldown","value":"pub fn into_input_pulldown(Self) -> InputPin","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Pin`, returns an [`InputPin`], sets its mode to [`Input`],\n and enables the pin's built-in pull-down resistor.","sig":null,"attributes":[{"value":"/ Consumes the `Pin`, returns an [`InputPin`], sets its mode to [`Input`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72310,"byte_end":72386,"line_start":326,"line_end":326,"column_start":5,"column_end":81}},{"value":"/ and enables the pin's built-in pull-down resistor.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72391,"byte_end":72445,"line_start":327,"line_end":327,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72450,"byte_end":72453,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ The pull-down resistor is disabled when `InputPin` goes out of scope if [`reset_on_drop`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72458,"byte_end":72551,"line_start":329,"line_end":329,"column_start":5,"column_end":98}},{"value":"/ is set to `true` (default).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72556,"byte_end":72587,"line_start":330,"line_end":330,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72592,"byte_end":72595,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72600,"byte_end":72638,"line_start":332,"line_end":332,"column_start":5,"column_end":43}},{"value":"/ [`Input`]: enum.Mode.html#variant.Input","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72643,"byte_end":72686,"line_start":333,"line_end":333,"column_start":5,"column_end":48}},{"value":"/ [`reset_on_drop`]: struct.InputPin.html#method.set_reset_on_drop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72691,"byte_end":72759,"line_start":334,"line_end":334,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72764,"byte_end":72773,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73357,"byte_end":73374,"line_start":350,"line_end":350,"column_start":12,"column_end":29},"name":"into_input_pullup","qualname":"<Pin>::into_input_pullup","value":"pub fn into_input_pullup(Self) -> InputPin","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Pin`, returns an [`InputPin`], sets its mode to [`Input`],\n and enables the pin's built-in pull-up resistor.","sig":null,"attributes":[{"value":"/ Consumes the `Pin`, returns an [`InputPin`], sets its mode to [`Input`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72886,"byte_end":72962,"line_start":340,"line_end":340,"column_start":5,"column_end":81}},{"value":"/ and enables the pin's built-in pull-up resistor.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":72967,"byte_end":73019,"line_start":341,"line_end":341,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73024,"byte_end":73027,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ The pull-up resistor is disabled when `InputPin` goes out of scope if [`reset_on_drop`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73032,"byte_end":73123,"line_start":343,"line_end":343,"column_start":5,"column_end":96}},{"value":"/ is set to `true` (default).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73128,"byte_end":73159,"line_start":344,"line_end":344,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73164,"byte_end":73167,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73172,"byte_end":73210,"line_start":346,"line_end":346,"column_start":5,"column_end":43}},{"value":"/ [`Input`]: enum.Mode.html#variant.Input","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73215,"byte_end":73258,"line_start":347,"line_end":347,"column_start":5,"column_end":48}},{"value":"/ [`reset_on_drop`]: struct.InputPin.html#method.set_reset_on_drop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73263,"byte_end":73331,"line_start":348,"line_end":348,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73336,"byte_end":73345,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73664,"byte_end":73675,"line_start":359,"line_end":359,"column_start":12,"column_end":23},"name":"into_output","qualname":"<Pin>::into_output","value":"pub fn into_output(Self) -> OutputPin","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Pin`, returns an [`OutputPin`] and sets its mode to [`Output`].","sig":null,"attributes":[{"value":"/ Consumes the `Pin`, returns an [`OutputPin`] and sets its mode to [`Output`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73454,"byte_end":73535,"line_start":354,"line_end":354,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73540,"byte_end":73543,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ [`OutputPin`]: struct.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73548,"byte_end":73588,"line_start":356,"line_end":356,"column_start":5,"column_end":45}},{"value":"/ [`Output`]: enum.Mode.html#variant.Output","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73593,"byte_end":73638,"line_start":357,"line_end":357,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73643,"byte_end":73652,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73926,"byte_end":73933,"line_start":368,"line_end":368,"column_start":12,"column_end":19},"name":"into_io","qualname":"<Pin>::into_io","value":"pub fn into_io(Self, Mode) -> IoPin","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Pin`, returns an [`IoPin`] and sets its mode to the specified mode.","sig":null,"attributes":[{"value":"/ Consumes the `Pin`, returns an [`IoPin`] and sets its mode to the specified mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73737,"byte_end":73822,"line_start":363,"line_end":363,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73827,"byte_end":73830,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ [`IoPin`]: struct.IoPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73835,"byte_end":73867,"line_start":365,"line_end":365,"column_start":5,"column_end":37}},{"value":"/ [`Mode`]: enum.Mode.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73872,"byte_end":73900,"line_start":366,"line_end":366,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":73905,"byte_end":73914,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1975},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75856,"byte_end":75864,"line_start":430,"line_end":430,"column_start":12,"column_end":20},"name":"InputPin","qualname":"::gpio::pin::InputPin","value":"InputPin {  }","parent":null,"children":[{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980}],"decl_id":null,"docs":" GPIO pin configured as input.","sig":null,"attributes":[{"value":"/ GPIO pin configured as input.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":74885,"byte_end":74918,"line_start":410,"line_end":410,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":74919,"byte_end":74922,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ `InputPin`s are constructed by converting a [`Pin`] using [`Pin::into_input`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":74923,"byte_end":75005,"line_start":412,"line_end":412,"column_start":1,"column_end":83}},{"value":"/ [`Pin::into_input_pullup`] or [`Pin::into_input_pulldown`]. The pin's mode is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75006,"byte_end":75087,"line_start":413,"line_end":413,"column_start":1,"column_end":82}},{"value":"/ automatically set to [`Input`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75088,"byte_end":75123,"line_start":414,"line_end":414,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75124,"byte_end":75127,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ An `InputPin` can be used to read a pin's logic level, or (a)synchronously poll for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75128,"byte_end":75215,"line_start":416,"line_end":416,"column_start":1,"column_end":88}},{"value":"/ interrupt trigger events.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75216,"byte_end":75245,"line_start":417,"line_end":417,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75246,"byte_end":75249,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ The `unproven` `embedded-hal` [`digital::InputPin`] trait implementation for `InputPin` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75250,"byte_end":75356,"line_start":419,"line_end":419,"column_start":1,"column_end":107}},{"value":"/ by specifying the optional `hal-unproven` feature in the dependency declaration for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75357,"byte_end":75444,"line_start":420,"line_end":420,"column_start":1,"column_end":88}},{"value":"/ the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75445,"byte_end":75467,"line_start":421,"line_end":421,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75468,"byte_end":75471,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ [`digital::InputPin`]: ../../embedded_hal/digital/trait.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75472,"byte_end":75545,"line_start":423,"line_end":423,"column_start":1,"column_end":74}},{"value":"/ [`Pin`]: struct.Pin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75546,"byte_end":75574,"line_start":424,"line_end":424,"column_start":1,"column_end":29}},{"value":"/ [`Input`]: enum.Mode.html#variant.Input","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75575,"byte_end":75618,"line_start":425,"line_end":425,"column_start":1,"column_end":44}},{"value":"/ [`Pin::into_input`]: struct.Pin.html#method.into_input","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75619,"byte_end":75677,"line_start":426,"line_end":426,"column_start":1,"column_end":59}},{"value":"/ [`Pin::into_input_pullup`]: struct.Pin.html#method.into_input_pullup","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75678,"byte_end":75750,"line_start":427,"line_end":427,"column_start":1,"column_end":73}},{"value":"/ [`Pin::into_input_pulldown`]: struct.Pin.html#method.into_input_pulldown","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":75751,"byte_end":75827,"line_start":428,"line_end":428,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77016,"byte_end":77029,"line_start":472,"line_end":472,"column_start":12,"column_end":25},"name":"set_interrupt","qualname":"<InputPin>::set_interrupt","value":"pub fn set_interrupt(&mut Self, Trigger) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Configures a synchronous interrupt trigger.","sig":null,"attributes":[{"value":"/ Configures a synchronous interrupt trigger.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76558,"byte_end":76605,"line_start":463,"line_end":463,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76610,"byte_end":76613,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ After configuring a synchronous interrupt trigger, call [`poll_interrupt`] or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76618,"byte_end":76699,"line_start":465,"line_end":465,"column_start":5,"column_end":86}},{"value":"/ [`Gpio::poll_interrupts`] to block while waiting for a trigger event.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76704,"byte_end":76777,"line_start":466,"line_end":466,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76782,"byte_end":76785,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Any previously configured (a)synchronous interrupt triggers will be cleared.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76790,"byte_end":76870,"line_start":468,"line_end":468,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76875,"byte_end":76878,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ [`poll_interrupt`]: #method.poll_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76883,"byte_end":76929,"line_start":470,"line_end":470,"column_start":5,"column_end":51}},{"value":"/ [`Gpio::poll_interrupts`]: struct.Gpio.html#method.poll_interrupts","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76934,"byte_end":77004,"line_start":471,"line_end":471,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77371,"byte_end":77386,"line_start":480,"line_end":480,"column_start":12,"column_end":27},"name":"clear_interrupt","qualname":"<InputPin>::clear_interrupt","value":"pub fn clear_interrupt(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Removes a previously configured synchronous interrupt trigger.\n","sig":null,"attributes":[{"value":"/ Removes a previously configured synchronous interrupt trigger.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77293,"byte_end":77359,"line_start":479,"line_end":479,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78825,"byte_end":78839,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"poll_interrupt","qualname":"<InputPin>::poll_interrupt","value":"pub fn poll_interrupt(&mut Self, bool, Option<Duration>)\n-> Result<Option<Level>>","parent":null,"children":[],"decl_id":null,"docs":" Blocks until an interrupt is triggered on the pin, or a timeout occurs.","sig":null,"attributes":[{"value":"/ Blocks until an interrupt is triggered on the pin, or a timeout occurs.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77516,"byte_end":77591,"line_start":484,"line_end":484,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77596,"byte_end":77599,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ This only works after the pin has been configured for synchronous interrupts using","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77604,"byte_end":77690,"line_start":486,"line_end":486,"column_start":5,"column_end":91}},{"value":"/ [`set_interrupt`]. Asynchronous interrupt triggers are automatically polled on a separate thread.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77695,"byte_end":77796,"line_start":487,"line_end":487,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77801,"byte_end":77804,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Calling `poll_interrupt` blocks any other calls to `poll_interrupt` (including on other `InputPin`s) or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77809,"byte_end":77916,"line_start":489,"line_end":489,"column_start":5,"column_end":112}},{"value":"/ [`Gpio::poll_interrupts`] until it returns. If you need to poll multiple pins simultaneously, use","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":77921,"byte_end":78022,"line_start":490,"line_end":490,"column_start":5,"column_end":106}},{"value":"/ [`Gpio::poll_interrupts`] to block while waiting for any of the interrupts to trigger, or switch to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78027,"byte_end":78130,"line_start":491,"line_end":491,"column_start":5,"column_end":108}},{"value":"/ using asynchronous interrupts with [`set_async_interrupt`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78135,"byte_end":78198,"line_start":492,"line_end":492,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78203,"byte_end":78206,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ Setting `reset` to `false` returns any cached interrupt trigger events if available. Setting `reset` to `true`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78211,"byte_end":78325,"line_start":494,"line_end":494,"column_start":5,"column_end":119}},{"value":"/ clears all cached events before polling for new events.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78330,"byte_end":78389,"line_start":495,"line_end":495,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78394,"byte_end":78397,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ The `timeout` duration indicates how long the call will block while waiting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78402,"byte_end":78481,"line_start":497,"line_end":497,"column_start":5,"column_end":84}},{"value":"/ for interrupt trigger events, after which an `Ok(None))` is returned.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78486,"byte_end":78559,"line_start":498,"line_end":498,"column_start":5,"column_end":78}},{"value":"/ `timeout` can be set to `None` to wait indefinitely.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78564,"byte_end":78620,"line_start":499,"line_end":499,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78625,"byte_end":78628,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ [`set_interrupt`]: #method.set_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78633,"byte_end":78677,"line_start":501,"line_end":501,"column_start":5,"column_end":49}},{"value":"/ [`Gpio::poll_interrupts`]: struct.Gpio.html#method.poll_interrupts","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78682,"byte_end":78752,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/ [`set_async_interrupt`]: #method.set_async_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":78757,"byte_end":78813,"line_start":503,"line_end":503,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79740,"byte_end":79759,"line_start":529,"line_end":529,"column_start":12,"column_end":31},"name":"set_async_interrupt","qualname":"<InputPin>::set_async_interrupt","value":"pub fn set_async_interrupt<C>(&mut Self, Trigger, C) -> Result<()> where\nC: FnMut(Level) -> () + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Configures an asynchronous interrupt trigger, which executes the callback on a\n separate thread when the interrupt is triggered.","sig":null,"attributes":[{"value":"/ Configures an asynchronous interrupt trigger, which executes the callback on a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79195,"byte_end":79277,"line_start":519,"line_end":519,"column_start":5,"column_end":87}},{"value":"/ separate thread when the interrupt is triggered.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79282,"byte_end":79334,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79339,"byte_end":79342,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ The callback closure or function pointer is called with a single [`Level`] argument.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79347,"byte_end":79435,"line_start":522,"line_end":522,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79440,"byte_end":79443,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ Any previously configured (a)synchronous interrupt triggers for this pin are cleared","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79448,"byte_end":79536,"line_start":524,"line_end":524,"column_start":5,"column_end":93}},{"value":"/ when `set_async_interrupt` is called, or when `InputPin` goes out of scope.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79541,"byte_end":79620,"line_start":525,"line_end":525,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79625,"byte_end":79628,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ [`clear_async_interrupt`]: #method.clear_async_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79633,"byte_end":79693,"line_start":527,"line_end":527,"column_start":5,"column_end":65}},{"value":"/ [`Level`]: enum.Level.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":79698,"byte_end":79728,"line_start":528,"line_end":528,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80243,"byte_end":80264,"line_start":547,"line_end":547,"column_start":12,"column_end":33},"name":"clear_async_interrupt","qualname":"<InputPin>::clear_async_interrupt","value":"pub fn clear_async_interrupt(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Removes a previously configured asynchronous interrupt trigger.\n","sig":null,"attributes":[{"value":"/ Removes a previously configured asynchronous interrupt trigger.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80164,"byte_end":80231,"line_start":546,"line_end":546,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":2000},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81874,"byte_end":81883,"line_start":587,"line_end":587,"column_start":12,"column_end":21},"name":"OutputPin","qualname":"::gpio::pin::OutputPin","value":"OutputPin {  }","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005}],"decl_id":null,"docs":" GPIO pin configured as output.","sig":null,"attributes":[{"value":"/ GPIO pin configured as output.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80496,"byte_end":80530,"line_start":561,"line_end":561,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80531,"byte_end":80534,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ `OutputPin`s are constructed by converting a [`Pin`] using [`Pin::into_output`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80535,"byte_end":80619,"line_start":563,"line_end":563,"column_start":1,"column_end":85}},{"value":"/ The pin's mode is automatically set to [`Output`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80620,"byte_end":80674,"line_start":564,"line_end":564,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80675,"byte_end":80678,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ An `OutputPin` can be used to change a pin's output state.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80679,"byte_end":80741,"line_start":566,"line_end":566,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80742,"byte_end":80745,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ The `embedded-hal` [`digital::OutputPin`] and [`PwmPin`] trait implementations for `OutputPin`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80746,"byte_end":80844,"line_start":568,"line_end":568,"column_start":1,"column_end":99}},{"value":"/ can be enabled by specifying the optional `hal` feature in the dependency","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80845,"byte_end":80922,"line_start":569,"line_end":569,"column_start":1,"column_end":78}},{"value":"/ declaration for the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80923,"byte_end":80961,"line_start":570,"line_end":570,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80962,"byte_end":80965,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ The `unproven` `embedded-hal` [`digital::InputPin`], [`digital::StatefulOutputPin`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":80966,"byte_end":81054,"line_start":572,"line_end":572,"column_start":1,"column_end":89}},{"value":"/ [`digital::ToggleableOutputPin`] and [`Pwm`] trait implementations for `OutputPin` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81055,"byte_end":81156,"line_start":573,"line_end":573,"column_start":1,"column_end":102}},{"value":"/ by specifying the optional `hal-unproven` feature in the dependency declaration for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81157,"byte_end":81244,"line_start":574,"line_end":574,"column_start":1,"column_end":88}},{"value":"/ the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81245,"byte_end":81267,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81268,"byte_end":81271,"line_start":576,"line_end":576,"column_start":1,"column_end":4}},{"value":"/ [`digital::InputPin`]: ../../embedded_hal/digital/trait.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81272,"byte_end":81345,"line_start":577,"line_end":577,"column_start":1,"column_end":74}},{"value":"/ [`digital::StatefulOutputPin`]: ../../embedded_hal/digital/trait.StatefulOutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81346,"byte_end":81437,"line_start":578,"line_end":578,"column_start":1,"column_end":92}},{"value":"/ [`digital::ToggleableOutputPin`]: ../../embedded_hal/digital/trait.ToggleableOutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81438,"byte_end":81533,"line_start":579,"line_end":579,"column_start":1,"column_end":96}},{"value":"/ [`Pwm`]: ../../embedded_hal/trait.Pwm.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81534,"byte_end":81580,"line_start":580,"line_end":580,"column_start":1,"column_end":47}},{"value":"/ [`Pin`]: struct.Pin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81581,"byte_end":81609,"line_start":581,"line_end":581,"column_start":1,"column_end":29}},{"value":"/ [`Output`]: enum.Mode.html#variant.Output","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81610,"byte_end":81655,"line_start":582,"line_end":582,"column_start":1,"column_end":46}},{"value":"/ [`Pin::into_output`]: struct.Pin.html#method.into_output","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81656,"byte_end":81716,"line_start":583,"line_end":583,"column_start":1,"column_end":61}},{"value":"/ [`digital::OutputPin`]: ../../embedded_hal/digital/trait.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81717,"byte_end":81792,"line_start":584,"line_end":584,"column_start":1,"column_end":76}},{"value":"/ [`PwmPin`]: ../../embedded_hal/trait.PwmPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":81793,"byte_end":81845,"line_start":585,"line_end":585,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83025,"byte_end":83035,"line_start":631,"line_end":631,"column_start":12,"column_end":22},"name":"is_set_low","qualname":"<OutputPin>::is_set_low","value":"pub fn is_set_low(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the pin's output state is set to [`Low`].","sig":null,"attributes":[{"value":"/ Returns `true` if the pin's output state is set to [`Low`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":82883,"byte_end":82946,"line_start":627,"line_end":627,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":82951,"byte_end":82954,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ [`Low`]: enum.Level.html#variant.Low","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":82959,"byte_end":82999,"line_start":629,"line_end":629,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83004,"byte_end":83013,"line_start":630,"line_end":630,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83247,"byte_end":83258,"line_start":639,"line_end":639,"column_start":12,"column_end":23},"name":"is_set_high","qualname":"<OutputPin>::is_set_high","value":"pub fn is_set_high(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the pin's output state is set to [`High`].","sig":null,"attributes":[{"value":"/ Returns `true` if the pin's output state is set to [`High`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83102,"byte_end":83166,"line_start":635,"line_end":635,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83171,"byte_end":83174,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ [`High`]: enum.Level.html#variant.High","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83179,"byte_end":83221,"line_start":637,"line_end":637,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83226,"byte_end":83235,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2029},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":85018,"byte_end":85023,"line_start":679,"line_end":679,"column_start":12,"column_end":17},"name":"IoPin","qualname":"::gpio::pin::IoPin","value":"IoPin {  }","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035}],"decl_id":null,"docs":" GPIO pin that can be (re)configured for any mode or alternate function.","sig":null,"attributes":[{"value":"/ GPIO pin that can be (re)configured for any mode or alternate function.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83417,"byte_end":83492,"line_start":650,"line_end":650,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83493,"byte_end":83496,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/ `IoPin`s are constructed by converting a [`Pin`] using [`Pin::into_io`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83497,"byte_end":83573,"line_start":652,"line_end":652,"column_start":1,"column_end":77}},{"value":"/ The pin's mode is automatically set to the specified mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83574,"byte_end":83636,"line_start":653,"line_end":653,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83637,"byte_end":83640,"line_start":654,"line_end":654,"column_start":1,"column_end":4}},{"value":"/ An `IoPin` can be reconfigured for any available mode. Depending on the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83641,"byte_end":83716,"line_start":655,"line_end":655,"column_start":1,"column_end":76}},{"value":"/ mode, some methods may not have any effect. For instance, calling a method that","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83717,"byte_end":83800,"line_start":656,"line_end":656,"column_start":1,"column_end":84}},{"value":"/ alters the pin's output state won't cause any changes when the pin's mode is set","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83801,"byte_end":83885,"line_start":657,"line_end":657,"column_start":1,"column_end":85}},{"value":"/ to [`Input`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83886,"byte_end":83903,"line_start":658,"line_end":658,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83904,"byte_end":83907,"line_start":659,"line_end":659,"column_start":1,"column_end":4}},{"value":"/ The `embedded-hal` [`digital::OutputPin`] and [`PwmPin`] trait implementations for `IoPin`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":83908,"byte_end":84002,"line_start":660,"line_end":660,"column_start":1,"column_end":95}},{"value":"/ can be enabled by specifying the optional `hal` feature in the dependency","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84003,"byte_end":84080,"line_start":661,"line_end":661,"column_start":1,"column_end":78}},{"value":"/ declaration for the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84081,"byte_end":84119,"line_start":662,"line_end":662,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84120,"byte_end":84123,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ The `unproven` `embedded-hal` [`digital::InputPin`], [`digital::StatefulOutputPin`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84124,"byte_end":84212,"line_start":664,"line_end":664,"column_start":1,"column_end":89}},{"value":"/ [`digital::ToggleableOutputPin`] and [`Pwm`] trait implementations for `IoPin` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84213,"byte_end":84310,"line_start":665,"line_end":665,"column_start":1,"column_end":98}},{"value":"/ by specifying the optional `hal-unproven` feature in the dependency declaration for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84311,"byte_end":84398,"line_start":666,"line_end":666,"column_start":1,"column_end":88}},{"value":"/ the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84399,"byte_end":84421,"line_start":667,"line_end":667,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84422,"byte_end":84425,"line_start":668,"line_end":668,"column_start":1,"column_end":4}},{"value":"/ [`digital::InputPin`]: ../../embedded_hal/digital/trait.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84426,"byte_end":84499,"line_start":669,"line_end":669,"column_start":1,"column_end":74}},{"value":"/ [`digital::StatefulOutputPin`]: ../../embedded_hal/digital/trait.StatefulOutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84500,"byte_end":84591,"line_start":670,"line_end":670,"column_start":1,"column_end":92}},{"value":"/ [`digital::ToggleableOutputPin`]: ../../embedded_hal/digital/trait.ToggleableOutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84592,"byte_end":84687,"line_start":671,"line_end":671,"column_start":1,"column_end":96}},{"value":"/ [`Pwm`]: ../../embedded_hal/trait.Pwm.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84688,"byte_end":84734,"line_start":672,"line_end":672,"column_start":1,"column_end":47}},{"value":"/ [`Pin`]: struct.Pin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84735,"byte_end":84763,"line_start":673,"line_end":673,"column_start":1,"column_end":29}},{"value":"/ [`Input`]: enum.Mode.html#variant.Input","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84764,"byte_end":84807,"line_start":674,"line_end":674,"column_start":1,"column_end":44}},{"value":"/ [`Pin::into_io`]: struct.Pin.html#method.into_io","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84808,"byte_end":84860,"line_start":675,"line_end":675,"column_start":1,"column_end":53}},{"value":"/ [`digital::OutputPin`]: ../../embedded_hal/digital/trait.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84861,"byte_end":84936,"line_start":676,"line_end":676,"column_start":1,"column_end":76}},{"value":"/ [`PwmPin`]: ../../embedded_hal/trait.PwmPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":84937,"byte_end":84989,"line_start":677,"line_end":677,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86094,"byte_end":86098,"line_start":723,"line_end":723,"column_start":12,"column_end":16},"name":"mode","qualname":"<IoPin>::mode","value":"pub fn mode(&Self) -> Mode","parent":null,"children":[],"decl_id":null,"docs":" Returns the pin's mode.\n","sig":null,"attributes":[{"value":"/ Returns the pin's mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86041,"byte_end":86068,"line_start":721,"line_end":721,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86073,"byte_end":86082,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86201,"byte_end":86209,"line_start":729,"line_end":729,"column_start":12,"column_end":20},"name":"set_mode","qualname":"<IoPin>::set_mode","value":"pub fn set_mode(&mut Self, Mode)","parent":null,"children":[],"decl_id":null,"docs":" Sets the pin's mode.\n","sig":null,"attributes":[{"value":"/ Sets the pin's mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86151,"byte_end":86175,"line_start":727,"line_end":727,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86180,"byte_end":86189,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86726,"byte_end":86740,"line_start":743,"line_end":743,"column_start":12,"column_end":26},"name":"set_pullupdown","qualname":"<IoPin>::set_pullupdown","value":"pub fn set_pullupdown(&mut Self, PullUpDown)","parent":null,"children":[],"decl_id":null,"docs":" Configures the built-in pull-up/pull-down resistors.\n","sig":null,"attributes":[{"value":"/ Configures the built-in pull-up/pull-down resistors.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86644,"byte_end":86700,"line_start":741,"line_end":741,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":86705,"byte_end":86714,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2087},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13034,"byte_end":13046,"line_start":175,"line_end":175,"column_start":5,"column_end":17},"name":"UnknownModel","qualname":"::gpio::Error::UnknownModel","value":"Error::UnknownModel","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" Unknown model.","sig":null,"attributes":[{"value":"/ Unknown model.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12554,"byte_end":12572,"line_start":165,"line_end":165,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12577,"byte_end":12580,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi model or SoC can't be identified. Support for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12585,"byte_end":12651,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ new models is usually added shortly after they are officially","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12656,"byte_end":12721,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ announced and available to the public. Make sure you're using","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12726,"byte_end":12791,"line_start":169,"line_end":169,"column_start":5,"column_end":70}},{"value":"/ the latest release of RPPAL.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12796,"byte_end":12828,"line_start":170,"line_end":170,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12833,"byte_end":12836,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ You may also encounter this error if your Linux distribution","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12841,"byte_end":12905,"line_start":172,"line_end":172,"column_start":5,"column_end":69}},{"value":"/ doesn't provide any of the common user-accessible system files","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12910,"byte_end":12976,"line_start":173,"line_end":173,"column_start":5,"column_end":71}},{"value":"/ that are used to identify the model and SoC.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12981,"byte_end":13029,"line_start":174,"line_end":174,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2089},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13576,"byte_end":13591,"line_start":187,"line_end":187,"column_start":5,"column_end":20},"name":"PinNotAvailable","qualname":"::gpio::Error::PinNotAvailable","value":"Error::PinNotAvailable(u8)","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" Pin is not available.","sig":null,"attributes":[{"value":"/ Pin is not available.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13052,"byte_end":13077,"line_start":176,"line_end":176,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13082,"byte_end":13085,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The pin is already in use elsewhere in your application, or the GPIO peripheral","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13090,"byte_end":13173,"line_start":178,"line_end":178,"column_start":5,"column_end":88}},{"value":"/ doesn't expose a pin with the specified number. If the pin is currently in use, you","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13178,"byte_end":13265,"line_start":179,"line_end":179,"column_start":5,"column_end":92}},{"value":"/ can retrieve it again after the [`Pin`] (or a derived [`InputPin`], [`OutputPin`] or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13270,"byte_end":13358,"line_start":180,"line_end":180,"column_start":5,"column_end":93}},{"value":"/ [`IoPin`]) instance goes out of scope.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13363,"byte_end":13405,"line_start":181,"line_end":181,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13410,"byte_end":13413,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ [`Pin`]: struct.Pin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13418,"byte_end":13446,"line_start":183,"line_end":183,"column_start":5,"column_end":33}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13451,"byte_end":13489,"line_start":184,"line_end":184,"column_start":5,"column_end":43}},{"value":"/ [`OutputPin`]: struct.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13494,"byte_end":13534,"line_start":185,"line_end":185,"column_start":5,"column_end":45}},{"value":"/ [`IoPin`]: struct.IoPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13539,"byte_end":13571,"line_start":186,"line_end":186,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2092},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13859,"byte_end":13875,"line_start":194,"line_end":194,"column_start":5,"column_end":21},"name":"PermissionDenied","qualname":"::gpio::Error::PermissionDenied","value":"Error::PermissionDenied(String)","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" Permission denied when opening `/dev/gpiomem`, `/dev/mem` or `/dev/gpiochipN` for\n read/write access.","sig":null,"attributes":[{"value":"/ Permission denied when opening `/dev/gpiomem`, `/dev/mem` or `/dev/gpiochipN` for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13601,"byte_end":13686,"line_start":188,"line_end":188,"column_start":5,"column_end":90}},{"value":"/ read/write access.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13691,"byte_end":13713,"line_start":189,"line_end":189,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13718,"byte_end":13721,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ More information on possible causes for this error can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13726,"byte_end":13801,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13806,"byte_end":13809,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ [here]: index.html#permission-denied","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13814,"byte_end":13854,"line_start":193,"line_end":193,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2095},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13908,"byte_end":13910,"line_start":196,"line_end":196,"column_start":5,"column_end":7},"name":"Io","qualname":"::gpio::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" I/O error.\n","sig":null,"attributes":[{"value":"/ I/O error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13889,"byte_end":13903,"line_start":195,"line_end":195,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2098},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13952,"byte_end":13963,"line_start":198,"line_end":198,"column_start":5,"column_end":16},"name":"ThreadPanic","qualname":"::gpio::Error::ThreadPanic","value":"Error::ThreadPanic","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" Thread panicked.\n","sig":null,"attributes":[{"value":"/ Thread panicked.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13927,"byte_end":13947,"line_start":197,"line_end":197,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":2086},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12542,"byte_end":12547,"line_start":164,"line_end":164,"column_start":10,"column_end":15},"name":"Error","qualname":"::gpio::Error","value":"pub enum Error {\n    UnknownModel,\n    PinNotAvailable(u8),\n    PermissionDenied(String),\n    Io(io::Error),\n    ThreadPanic,\n}","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2089},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098}],"decl_id":null,"docs":" Errors that can occur when accessing the GPIO peripheral.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when accessing the GPIO peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":12454,"byte_end":12515,"line_start":162,"line_end":162,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":662},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14824,"byte_end":14830,"line_start":228,"line_end":228,"column_start":10,"column_end":16},"name":"Result","qualname":"::gpio::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type returned from methods that can have `rppal::gpio::Error`s.\n","sig":null,"attributes":[{"value":"/ Result type returned from methods that can have `rppal::gpio::Error`s.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14740,"byte_end":14814,"line_start":227,"line_end":227,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14955,"byte_end":14960,"line_start":234,"line_end":234,"column_start":5,"column_end":10},"name":"Input","qualname":"::gpio::Mode::Input","value":"Mode::Input","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2106},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14974,"byte_end":14980,"line_start":235,"line_end":235,"column_start":5,"column_end":11},"name":"Output","qualname":"::gpio::Mode::Output","value":"Mode::Output","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14994,"byte_end":14998,"line_start":236,"line_end":236,"column_start":5,"column_end":9},"name":"Alt0","qualname":"::gpio::Mode::Alt0","value":"Mode::Alt0","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2112},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15012,"byte_end":15016,"line_start":237,"line_end":237,"column_start":5,"column_end":9},"name":"Alt1","qualname":"::gpio::Mode::Alt1","value":"Mode::Alt1","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15030,"byte_end":15034,"line_start":238,"line_end":238,"column_start":5,"column_end":9},"name":"Alt2","qualname":"::gpio::Mode::Alt2","value":"Mode::Alt2","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2118},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15048,"byte_end":15052,"line_start":239,"line_end":239,"column_start":5,"column_end":9},"name":"Alt3","qualname":"::gpio::Mode::Alt3","value":"Mode::Alt3","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15066,"byte_end":15070,"line_start":240,"line_end":240,"column_start":5,"column_end":9},"name":"Alt4","qualname":"::gpio::Mode::Alt4","value":"Mode::Alt4","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2124},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15084,"byte_end":15088,"line_start":241,"line_end":241,"column_start":5,"column_end":9},"name":"Alt5","qualname":"::gpio::Mode::Alt5","value":"Mode::Alt5","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2102},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14944,"byte_end":14948,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"name":"Mode","qualname":"::gpio::Mode","value":"pub enum Mode {\n    Input = ,\n    Output = ,\n    Alt0 = ,\n    Alt1 = ,\n    Alt2 = ,\n    Alt3 = ,\n    Alt4 = ,\n    Alt5 = ,\n}","parent":null,"children":[{"krate":0,"index":2103},{"krate":0,"index":2106},{"krate":0,"index":2109},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2124}],"decl_id":null,"docs":" Pin modes.\n","sig":null,"attributes":[{"value":"/ Pin modes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14863,"byte_end":14877,"line_start":230,"line_end":230,"column_start":1,"column_end":15}},{"value":"repr(u8)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14923,"byte_end":14934,"line_start":232,"line_end":232,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2139},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15694,"byte_end":15697,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"Low","qualname":"::gpio::Level::Low","value":"Level::Low","parent":{"krate":0,"index":2138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2142},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15707,"byte_end":15711,"line_start":264,"line_end":264,"column_start":5,"column_end":9},"name":"High","qualname":"::gpio::Level::High","value":"Level::High","parent":{"krate":0,"index":2138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2138},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15682,"byte_end":15687,"line_start":262,"line_end":262,"column_start":10,"column_end":15},"name":"Level","qualname":"::gpio::Level","value":"pub enum Level { Low = , High = , }","parent":null,"children":[{"krate":0,"index":2139},{"krate":0,"index":2142}],"decl_id":null,"docs":" Pin logic levels.\n","sig":null,"attributes":[{"value":"/ Pin logic levels.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15594,"byte_end":15615,"line_start":259,"line_end":259,"column_start":1,"column_end":22}},{"value":"repr(u8)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15661,"byte_end":15672,"line_start":261,"line_end":261,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2157},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16256,"byte_end":16259,"line_start":290,"line_end":290,"column_start":5,"column_end":8},"name":"Off","qualname":"::gpio::PullUpDown::Off","value":"PullUpDown::Off","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16272,"byte_end":16280,"line_start":291,"line_end":291,"column_start":5,"column_end":13},"name":"PullDown","qualname":"::gpio::PullUpDown::PullDown","value":"PullUpDown::PullDown","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2163},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16293,"byte_end":16299,"line_start":292,"line_end":292,"column_start":5,"column_end":11},"name":"PullUp","qualname":"::gpio::PullUpDown::PullUp","value":"PullUpDown::PullUp","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2156},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16239,"byte_end":16249,"line_start":289,"line_end":289,"column_start":10,"column_end":20},"name":"PullUpDown","qualname":"::gpio::PullUpDown","value":"pub enum PullUpDown { Off = , PullDown = , PullUp = , }","parent":null,"children":[{"krate":0,"index":2157},{"krate":0,"index":2160},{"krate":0,"index":2163}],"decl_id":null,"docs":" Built-in pull-up/pull-down resistor states.\n","sig":null,"attributes":[{"value":"/ Built-in pull-up/pull-down resistor states.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16137,"byte_end":16184,"line_start":287,"line_end":287,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2178},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16715,"byte_end":16723,"line_start":308,"line_end":308,"column_start":5,"column_end":13},"name":"Disabled","qualname":"::gpio::Trigger::Disabled","value":"Trigger::Disabled","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2181},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16733,"byte_end":16743,"line_start":309,"line_end":309,"column_start":5,"column_end":15},"name":"RisingEdge","qualname":"::gpio::Trigger::RisingEdge","value":"Trigger::RisingEdge","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2184},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16753,"byte_end":16764,"line_start":310,"line_end":310,"column_start":5,"column_end":16},"name":"FallingEdge","qualname":"::gpio::Trigger::FallingEdge","value":"Trigger::FallingEdge","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2187},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16774,"byte_end":16778,"line_start":311,"line_end":311,"column_start":5,"column_end":9},"name":"Both","qualname":"::gpio::Trigger::Both","value":"Trigger::Both","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2177},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16701,"byte_end":16708,"line_start":307,"line_end":307,"column_start":10,"column_end":17},"name":"Trigger","qualname":"::gpio::Trigger","value":"pub enum Trigger { Disabled = , RisingEdge = , FallingEdge = , Both = , }","parent":null,"children":[{"krate":0,"index":2178},{"krate":0,"index":2181},{"krate":0,"index":2184},{"krate":0,"index":2187}],"decl_id":null,"docs":" Interrupt trigger conditions.\n","sig":null,"attributes":[{"value":"/ Interrupt trigger conditions.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16613,"byte_end":16646,"line_start":305,"line_end":305,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2212},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":18197,"byte_end":18201,"line_start":354,"line_end":354,"column_start":12,"column_end":16},"name":"Gpio","qualname":"::gpio::Gpio","value":"Gpio {  }","parent":null,"children":[{"krate":0,"index":2213}],"decl_id":null,"docs":" Provides access to the Raspberry Pi's GPIO peripheral.\n","sig":null,"attributes":[{"value":"/ Provides access to the Raspberry Pi's GPIO peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":18103,"byte_end":18161,"line_start":352,"line_end":352,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":18290,"byte_end":18293,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"new","qualname":"<Gpio>::new","value":"pub fn new() -> Result<Gpio>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Gpio`.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Gpio`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":18250,"byte_end":18278,"line_start":359,"line_end":359,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":19409,"byte_end":19415,"line_start":390,"line_end":390,"column_start":12,"column_end":18},"name":"output","qualname":"<Gpio>::output","value":"pub fn output(u8) -> Result<pin::OutputPin>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":19548,"byte_end":19553,"line_start":394,"line_end":394,"column_start":12,"column_end":17},"name":"input","qualname":"<Gpio>::input","value":"pub fn input(u8) -> Result<pin::InputPin>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":19684,"byte_end":19686,"line_start":398,"line_end":398,"column_start":12,"column_end":14},"name":"io","qualname":"<Gpio>::io","value":"pub fn io(u8, Mode) -> Result<pin::IoPin>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":19828,"byte_end":19836,"line_start":402,"line_end":402,"column_start":12,"column_end":20},"name":"pulldown","qualname":"<Gpio>::pulldown","value":"pub fn pulldown(u8) -> Result<pin::InputPin>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":19976,"byte_end":19982,"line_start":406,"line_end":406,"column_start":12,"column_end":18},"name":"pullup","qualname":"<Gpio>::pullup","value":"pub fn pullup(u8) -> Result<pin::InputPin>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20856,"byte_end":20859,"line_start":425,"line_end":425,"column_start":12,"column_end":15},"name":"get","qualname":"<Gpio>::get","value":"pub fn get(&Self, u8) -> Result<Pin>","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Pin`] for the specified BCM GPIO pin number.","sig":null,"attributes":[{"value":"/ Returns a [`Pin`] for the specified BCM GPIO pin number.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20115,"byte_end":20175,"line_start":412,"line_end":412,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20180,"byte_end":20183,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Retrieving a GPIO pin grants access to the pin through an owned [`Pin`] instance.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20188,"byte_end":20273,"line_start":414,"line_end":414,"column_start":5,"column_end":90}},{"value":"/ If the pin is already in use, or the GPIO peripheral doesn't expose a pin with the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20278,"byte_end":20364,"line_start":415,"line_end":415,"column_start":5,"column_end":91}},{"value":"/ specified number, `get` returns `Err(`[`Error::PinNotAvailable`]`)`. After a [`Pin`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20369,"byte_end":20457,"line_start":416,"line_end":416,"column_start":5,"column_end":93}},{"value":"/ (or a derived [`InputPin`], [`OutputPin`] or [`IoPin`]) goes out of scope, it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20462,"byte_end":20543,"line_start":417,"line_end":417,"column_start":5,"column_end":86}},{"value":"/ can be retrieved again through another `get` call.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20548,"byte_end":20602,"line_start":418,"line_end":418,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20607,"byte_end":20610,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ [`Pin`]: struct.Pin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20615,"byte_end":20643,"line_start":420,"line_end":420,"column_start":5,"column_end":33}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20648,"byte_end":20686,"line_start":421,"line_end":421,"column_start":5,"column_end":43}},{"value":"/ [`OutputPin`]: struct.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20691,"byte_end":20731,"line_start":422,"line_end":422,"column_start":5,"column_end":45}},{"value":"/ [`IoPin`]: struct.IoPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20736,"byte_end":20768,"line_start":423,"line_end":423,"column_start":5,"column_end":37}},{"value":"/ [`Error::PinNotAvailable`]: enum.Error.html#variant.PinNotAvailable","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":20773,"byte_end":20844,"line_start":424,"line_end":424,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":23205,"byte_end":23220,"line_start":466,"line_end":466,"column_start":12,"column_end":27},"name":"poll_interrupts","qualname":"<Gpio>::poll_interrupts","value":"pub fn poll_interrupts<'a>(&Self, &[&'a InputPin], bool, Option<Duration>)\n-> Result<Option<(&'a InputPin, Level)>>","parent":null,"children":[],"decl_id":null,"docs":" Blocks until an interrupt is triggered on any of the specified pins, or until a timeout occurs.","sig":null,"attributes":[{"value":"/ Blocks until an interrupt is triggered on any of the specified pins, or until a timeout occurs.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21383,"byte_end":21482,"line_start":440,"line_end":440,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21487,"byte_end":21490,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ Only pins that have been previously configured for synchronous interrupts using [`InputPin::set_interrupt`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21495,"byte_end":21606,"line_start":442,"line_end":442,"column_start":5,"column_end":116}},{"value":"/ can be polled. Asynchronous interrupt triggers are automatically polled on a separate thread.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21611,"byte_end":21708,"line_start":443,"line_end":443,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21713,"byte_end":21716,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ Calling `poll_interrupts` blocks any other calls to `poll_interrupts` or [`InputPin::poll_interrupt`] until","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21721,"byte_end":21832,"line_start":445,"line_end":445,"column_start":5,"column_end":116}},{"value":"/ it returns. If you need to poll multiple pins simultaneously on different threads, consider using","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21837,"byte_end":21938,"line_start":446,"line_end":446,"column_start":5,"column_end":106}},{"value":"/ asynchronous interrupts with [`InputPin::set_async_interrupt`] instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":21943,"byte_end":22018,"line_start":447,"line_end":447,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22023,"byte_end":22026,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Setting `reset` to `false` returns any cached interrupt trigger events if available. Setting `reset` to `true`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22031,"byte_end":22145,"line_start":449,"line_end":449,"column_start":5,"column_end":119}},{"value":"/ clears all cached events before polling for new events.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22150,"byte_end":22209,"line_start":450,"line_end":450,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22214,"byte_end":22217,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ The `timeout` duration indicates how long the call to `poll_interrupts` will block while waiting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22222,"byte_end":22322,"line_start":452,"line_end":452,"column_start":5,"column_end":105}},{"value":"/ for interrupt trigger events, after which an `Ok(None)` is returned.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22327,"byte_end":22399,"line_start":453,"line_end":453,"column_start":5,"column_end":77}},{"value":"/ `timeout` can be set to `None` to wait indefinitely.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22404,"byte_end":22460,"line_start":454,"line_end":454,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22465,"byte_end":22468,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ When an interrupt event is triggered, `poll_interrupts` returns","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22473,"byte_end":22540,"line_start":456,"line_end":456,"column_start":5,"column_end":72}},{"value":"/ `Ok((&`[`InputPin`]`, `[`Level`]`))` containing the corresponding pin and logic level. If multiple events trigger","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22545,"byte_end":22662,"line_start":457,"line_end":457,"column_start":5,"column_end":122}},{"value":"/ at the same time, only the first one is returned. The remaining events are cached and will be returned","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22667,"byte_end":22773,"line_start":458,"line_end":458,"column_start":5,"column_end":111}},{"value":"/ the next time [`InputPin::poll_interrupt`] or `poll_interrupts` is called.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22778,"byte_end":22856,"line_start":459,"line_end":459,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22861,"byte_end":22864,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ [`InputPin::set_interrupt`]: struct.InputPin.html#method.set_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22869,"byte_end":22943,"line_start":461,"line_end":461,"column_start":5,"column_end":79}},{"value":"/ [`InputPin::poll_interrupt`]: struct.InputPin.html#method.poll_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":22948,"byte_end":23024,"line_start":462,"line_end":462,"column_start":5,"column_end":81}},{"value":"/ [`InputPin::set_async_interrupt`]: struct.InputPin.html#method.set_async_interrupt","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":23029,"byte_end":23115,"line_start":463,"line_end":463,"column_start":5,"column_end":91}},{"value":"/ [`InputPin`]: struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":23120,"byte_end":23158,"line_start":464,"line_end":464,"column_start":5,"column_end":43}},{"value":"/ [`Level`]: enum.Level.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":23163,"byte_end":23193,"line_start":465,"line_end":465,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":693},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i2c","qualname":"::i2c","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":860},{"krate":0,"index":2314},{"krate":0,"index":2325},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":2327},{"krate":0,"index":2334},{"krate":0,"index":872},{"krate":0,"index":904}],"decl_id":null,"docs":" Interface for the I2C peripheral.","sig":null,"attributes":[{"value":"/ Interface for the I2C peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":95946,"byte_end":95983,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":95984,"byte_end":95987,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The Broadcom Serial Controller (BSC) peripheral controls a proprietary bus","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":95988,"byte_end":96066,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ compliant with the I2C bus/interface. RPPAL communicates with the BSC","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96067,"byte_end":96140,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ using the `i2cdev` device interface.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96141,"byte_end":96181,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96182,"byte_end":96185,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## I2C buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96186,"byte_end":96202,"line_start":27,"line_end":27,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96203,"byte_end":96206,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The Raspberry Pi 3 B+ and earlier models support three hardware I2C buses,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96207,"byte_end":96285,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ however only the I2C bus on physical pins 3 and 5 should be used to communicate","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96286,"byte_end":96369,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ with slave devices. The other two buses are used internally as an HDMI","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96370,"byte_end":96444,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/ interface, and for HAT identification.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96445,"byte_end":96487,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96488,"byte_end":96491,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ On the Raspberry Pi 4 B, three additional I2C buses are available, depending","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96492,"byte_end":96572,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ on your configuration, as explained below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96573,"byte_end":96619,"line_start":35,"line_end":35,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96620,"byte_end":96623,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ### I2C0 / I2C1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96624,"byte_end":96643,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96644,"byte_end":96647,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ On the Raspberry Pi B Rev 1, physical pins 3 (SDA) and 5 (SCL) are tied to I2C0.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96648,"byte_end":96732,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/ On every other Raspberry Pi model, they're connected to I2C1.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96733,"byte_end":96798,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96799,"byte_end":96802,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The I2C bus connected to these pins is disabled by","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96803,"byte_end":96857,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/ default. You can enable it through `sudo raspi-config`, or by manually","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96858,"byte_end":96932,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ adding `dtparam=i2c_arm=on` to `/boot/config.txt`. Remember to reboot","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":96933,"byte_end":97006,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ the Raspberry Pi afterwards.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97007,"byte_end":97039,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97040,"byte_end":97043,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ * SDA: BCM GPIO 2 (physical pin 3)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97044,"byte_end":97082,"line_start":47,"line_end":47,"column_start":1,"column_end":39}},{"value":"/ * SCL: BCM GPIO 3 (physical pin 5)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97083,"byte_end":97121,"line_start":48,"line_end":48,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97122,"byte_end":97125,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ### I2C3","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97126,"byte_end":97138,"line_start":50,"line_end":50,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97139,"byte_end":97142,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ I2C3 can be enabled by adding `dtoverlay=i2c3` to `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97143,"byte_end":97216,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97217,"byte_end":97220,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ * SDA: BCM GPIO 4 (physical pin 7)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97221,"byte_end":97259,"line_start":54,"line_end":54,"column_start":1,"column_end":39}},{"value":"/ * SCL: BCM GPIO 5 (physical pin 29)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97260,"byte_end":97299,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97300,"byte_end":97303,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ### I2C4","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97304,"byte_end":97316,"line_start":57,"line_end":57,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97317,"byte_end":97320,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ I2C4 can be enabled by adding `dtoverlay=i2c4` to `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97321,"byte_end":97394,"line_start":59,"line_end":59,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97395,"byte_end":97398,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ * SDA: BCM GPIO 8 (physical pin 24)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97399,"byte_end":97438,"line_start":61,"line_end":61,"column_start":1,"column_end":40}},{"value":"/ * SCL: BCM GPIO 9 (physical pin 21)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97439,"byte_end":97478,"line_start":62,"line_end":62,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97479,"byte_end":97482,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### I2C5","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97483,"byte_end":97495,"line_start":64,"line_end":64,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97496,"byte_end":97499,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ I2C5 can be enabled by adding `dtoverlay=i2c5` to `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97500,"byte_end":97573,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97574,"byte_end":97577,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * SDA: BCM GPIO 12 (physical pin 32)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97578,"byte_end":97618,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ * SCL: BCM GPIO 13 (physical pin 33)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97619,"byte_end":97659,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97660,"byte_end":97663,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ### I2C6","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97664,"byte_end":97676,"line_start":71,"line_end":71,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97677,"byte_end":97680,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ I2C6 can be enabled by adding `dtoverlay=i2c6` to `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97681,"byte_end":97754,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97755,"byte_end":97758,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ * SDA: BCM GPIO 22 (physical pin 15)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97759,"byte_end":97799,"line_start":75,"line_end":75,"column_start":1,"column_end":41}},{"value":"/ * SCL: BCM GPIO 23 (physical pin 16)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97800,"byte_end":97840,"line_start":76,"line_end":76,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97841,"byte_end":97844,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ### Alternative pins","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97845,"byte_end":97869,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97870,"byte_end":97873,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ The GPIO pin numbers mentioned above are part of the default configuration.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97874,"byte_end":97953,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ Some of their functionality can be moved to different pins. Read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":97954,"byte_end":98022,"line_start":81,"line_end":81,"column_start":1,"column_end":69}},{"value":"/ `/boot/overlays/README` for more information.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98023,"byte_end":98072,"line_start":82,"line_end":82,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98073,"byte_end":98076,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ### Software I2C","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98077,"byte_end":98097,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98098,"byte_end":98101,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ In addition to the hardware I2C buses, it's possible to configure a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98102,"byte_end":98173,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/ bit-banged software I2C bus on any available GPIO pins through the `i2c-gpio`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98174,"byte_end":98255,"line_start":87,"line_end":87,"column_start":1,"column_end":82}},{"value":"/ device tree overlay. More details on enabling and configuring `i2c-gpio`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98256,"byte_end":98332,"line_start":88,"line_end":88,"column_start":1,"column_end":77}},{"value":"/ can be found in `/boot/overlays/README`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98333,"byte_end":98377,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98378,"byte_end":98381,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ## Transmission speed","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98382,"byte_end":98407,"line_start":91,"line_end":91,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98408,"byte_end":98411,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The BSC supports I2C data transfer rates up to 400 kbit/s (Fast-mode).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98412,"byte_end":98486,"line_start":93,"line_end":93,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98487,"byte_end":98490,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ By default, the I2C bus clock speed is set to 100 kHz. Transferring","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98491,"byte_end":98562,"line_start":95,"line_end":95,"column_start":1,"column_end":72}},{"value":"/ 1 bit takes 1 clock cycle. You can change the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98563,"byte_end":98612,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/ transfer rate by adding `dtparam=i2c_arm_baudrate=X` to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98613,"byte_end":98672,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ `/boot/config.txt`, where `X` should be replaced with the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98673,"byte_end":98734,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/ clock frequency in hertz (Hz). Remember to reboot","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98735,"byte_end":98788,"line_start":99,"line_end":99,"column_start":1,"column_end":54}},{"value":"/ the Raspberry Pi afterwards.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98789,"byte_end":98821,"line_start":100,"line_end":100,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98822,"byte_end":98825,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ## Not supported","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98826,"byte_end":98846,"line_start":102,"line_end":102,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98847,"byte_end":98850,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Some I2C and SMBus features aren't fully supported by the `i2cdev` interface, the underlying driver or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98851,"byte_end":98957,"line_start":104,"line_end":104,"column_start":1,"column_end":107}},{"value":"/ the BCM283x SoC: 10-bit slave addresses, SMBus Block Read, SMBus Block Process Call, SMBus Host Notify,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":98958,"byte_end":99065,"line_start":105,"line_end":105,"column_start":1,"column_end":108}},{"value":"/ SMBus Read/Write 32/64, and the SMBus Address Resolution Protocol.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99066,"byte_end":99136,"line_start":106,"line_end":106,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99137,"byte_end":99140,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ While clock stretching is supported, a bug exists in the implementation on the BCM283x SoC that will result","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99141,"byte_end":99252,"line_start":108,"line_end":108,"column_start":1,"column_end":112}},{"value":"/ in corrupted data when a slave device uses clock stretching at arbitrary points during the transfer.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99253,"byte_end":99357,"line_start":109,"line_end":109,"column_start":1,"column_end":105}},{"value":"/ Clock stretching only works properly during read operations, directly after the ACK phase, when the additional","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99358,"byte_end":99472,"line_start":110,"line_end":110,"column_start":1,"column_end":115}},{"value":"/ delay is longer than half of a clock period. More information can be found [here](https://elinux.org/BCM2835_datasheet_errata#p35_I2C_clock_stretching).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99473,"byte_end":99629,"line_start":111,"line_end":111,"column_start":1,"column_end":157}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99630,"byte_end":99633,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ A possible workaround for slave devices that require clock stretching at other points during the transfer is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99634,"byte_end":99746,"line_start":113,"line_end":113,"column_start":1,"column_end":113}},{"value":"/ to use a bit-banged software I2C bus by configuring the `i2c-gpio` device tree overlay as described in `/boot/overlays/README`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99747,"byte_end":99878,"line_start":114,"line_end":114,"column_start":1,"column_end":132}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99879,"byte_end":99882,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ## Troubleshooting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99883,"byte_end":99905,"line_start":116,"line_end":116,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99906,"byte_end":99909,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ### Permission denied","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99910,"byte_end":99935,"line_start":118,"line_end":118,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99936,"byte_end":99939,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ If [`new`] or [`with_bus`] returns an `io::ErrorKind::PermissionDenied`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":99940,"byte_end":100015,"line_start":120,"line_end":120,"column_start":1,"column_end":76}},{"value":"/ error, make sure the file permissions for `/dev/i2c-1` or `/dev/i2c-0`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100016,"byte_end":100090,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"/ are correct, and the current user is a member of the `i2c` group.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100091,"byte_end":100160,"line_start":122,"line_end":122,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100161,"byte_end":100164,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ### Timed out","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100165,"byte_end":100182,"line_start":124,"line_end":124,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100183,"byte_end":100186,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ Transactions return an `io::ErrorKind::TimedOut` error when their duration","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100187,"byte_end":100265,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ exceeds the timeout value. You can change the timeout using [`set_timeout`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100266,"byte_end":100346,"line_start":127,"line_end":127,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100347,"byte_end":100350,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`new`]: struct.I2c.html#method.new","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100351,"byte_end":100390,"line_start":129,"line_end":129,"column_start":1,"column_end":40}},{"value":"/ [`with_bus`]: struct.I2c.html#method.with_bus","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100391,"byte_end":100440,"line_start":130,"line_end":130,"column_start":1,"column_end":50}},{"value":"/ [`set_timeout`]: struct.I2c.html#method.set_timeout","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100441,"byte_end":100496,"line_start":131,"line_end":131,"column_start":1,"column_end":56}},{"value":"allow(dead_code)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100498,"byte_end":100518,"line_start":133,"line_end":133,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2227},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":125909,"byte_end":125921,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"name":"Capabilities","qualname":"::i2c::ioctl::Capabilities","value":"Capabilities {  }","parent":null,"children":[{"krate":0,"index":2228}],"decl_id":null,"docs":" Lists the features supported by the underlying drivers.\n","sig":null,"attributes":[{"value":"/ Lists the features supported by the underlying drivers.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":125804,"byte_end":125863,"line_start":60,"line_end":60,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":126455,"byte_end":126465,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"addr_10bit","qualname":"<Capabilities>::addr_10bit","value":"pub fn addr_10bit(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether 10-bit addresses are supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether 10-bit addresses are supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":126390,"byte_end":126443,"line_start":83,"line_end":83,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":126598,"byte_end":126612,"line_start":89,"line_end":89,"column_start":12,"column_end":26},"name":"i2c_block_read","qualname":"<Capabilities>::i2c_block_read","value":"pub fn i2c_block_read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether I2C Block Read is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether I2C Block Read is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":126536,"byte_end":126586,"line_start":88,"line_end":88,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":126756,"byte_end":126771,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"i2c_block_write","qualname":"<Capabilities>::i2c_block_write","value":"pub fn i2c_block_write(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether I2C Block Write is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether I2C Block Write is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":126693,"byte_end":126744,"line_start":93,"line_end":93,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127233,"byte_end":127252,"line_start":109,"line_end":109,"column_start":12,"column_end":31},"name":"smbus_quick_command","qualname":"<Capabilities>::smbus_quick_command","value":"pub fn smbus_quick_command(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Quick Command is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Quick Command is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127166,"byte_end":127221,"line_start":108,"line_end":108,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127390,"byte_end":127408,"line_start":114,"line_end":114,"column_start":12,"column_end":30},"name":"smbus_receive_byte","qualname":"<Capabilities>::smbus_receive_byte","value":"pub fn smbus_receive_byte(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Receive Byte is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Receive Byte is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127324,"byte_end":127378,"line_start":113,"line_end":113,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127547,"byte_end":127562,"line_start":119,"line_end":119,"column_start":12,"column_end":27},"name":"smbus_send_byte","qualname":"<Capabilities>::smbus_send_byte","value":"pub fn smbus_send_byte(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Send Byte is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Send Byte is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127484,"byte_end":127535,"line_start":118,"line_end":118,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127702,"byte_end":127717,"line_start":124,"line_end":124,"column_start":12,"column_end":27},"name":"smbus_read_byte","qualname":"<Capabilities>::smbus_read_byte","value":"pub fn smbus_read_byte(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Read Byte is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Read Byte is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127639,"byte_end":127690,"line_start":123,"line_end":123,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127862,"byte_end":127878,"line_start":129,"line_end":129,"column_start":12,"column_end":28},"name":"smbus_write_byte","qualname":"<Capabilities>::smbus_write_byte","value":"pub fn smbus_write_byte(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Write Byte is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Write Byte is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127798,"byte_end":127850,"line_start":128,"line_end":128,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128023,"byte_end":128038,"line_start":134,"line_end":134,"column_start":12,"column_end":27},"name":"smbus_read_word","qualname":"<Capabilities>::smbus_read_word","value":"pub fn smbus_read_word(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Read Word is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Read Word is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":127960,"byte_end":128011,"line_start":133,"line_end":133,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128183,"byte_end":128199,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"smbus_write_word","qualname":"<Capabilities>::smbus_write_word","value":"pub fn smbus_write_word(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Write Word is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Write Word is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128119,"byte_end":128171,"line_start":138,"line_end":138,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128347,"byte_end":128365,"line_start":144,"line_end":144,"column_start":12,"column_end":30},"name":"smbus_process_call","qualname":"<Capabilities>::smbus_process_call","value":"pub fn smbus_process_call(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Process Call is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Process Call is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128281,"byte_end":128335,"line_start":143,"line_end":143,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128505,"byte_end":128521,"line_start":149,"line_end":149,"column_start":12,"column_end":28},"name":"smbus_block_read","qualname":"<Capabilities>::smbus_block_read","value":"pub fn smbus_block_read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Block Read is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Block Read is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128441,"byte_end":128493,"line_start":148,"line_end":148,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128668,"byte_end":128685,"line_start":154,"line_end":154,"column_start":12,"column_end":29},"name":"smbus_block_write","qualname":"<Capabilities>::smbus_block_write","value":"pub fn smbus_block_write(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Block Write is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Block Write is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128603,"byte_end":128656,"line_start":153,"line_end":153,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128840,"byte_end":128864,"line_start":159,"line_end":159,"column_start":12,"column_end":36},"name":"smbus_block_process_call","qualname":"<Capabilities>::smbus_block_process_call","value":"pub fn smbus_block_process_call(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Block Process Call is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Block Process Call is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128768,"byte_end":128828,"line_start":158,"line_end":158,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":129021,"byte_end":129030,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"smbus_pec","qualname":"<Capabilities>::smbus_pec","value":"pub fn smbus_pec(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Packet Error Checking is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Packet Error Checking is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":128946,"byte_end":129009,"line_start":163,"line_end":163,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":129165,"byte_end":129182,"line_start":169,"line_end":169,"column_start":12,"column_end":29},"name":"smbus_host_notify","qualname":"<Capabilities>::smbus_host_notify","value":"pub fn smbus_host_notify(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether SMBus Host Notify is supported.\n","sig":null,"attributes":[{"value":"/ Indicates whether SMBus Host Notify is supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":129100,"byte_end":129153,"line_start":168,"line_end":168,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100984,"byte_end":100986,"line_start":159,"line_end":159,"column_start":5,"column_end":7},"name":"Io","qualname":"::i2c::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" I/O error.\n","sig":null,"attributes":[{"value":"/ I/O error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100965,"byte_end":100979,"line_start":158,"line_end":158,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2318},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101157,"byte_end":101176,"line_start":164,"line_end":164,"column_start":5,"column_end":24},"name":"InvalidSlaveAddress","qualname":"::i2c::Error::InvalidSlaveAddress","value":"Error::InvalidSlaveAddress(u16)","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Invalid slave address.","sig":null,"attributes":[{"value":"/ Invalid slave address.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101003,"byte_end":101029,"line_start":160,"line_end":160,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101034,"byte_end":101037,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ I2C supports 7-bit and 10-bit addresses. Several 7-bit addresses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101042,"byte_end":101110,"line_start":162,"line_end":162,"column_start":5,"column_end":73}},{"value":"/ can't be used as slave addresses.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101115,"byte_end":101152,"line_start":163,"line_end":163,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2321},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101325,"byte_end":101344,"line_start":168,"line_end":168,"column_start":5,"column_end":24},"name":"FeatureNotSupported","qualname":"::i2c::Error::FeatureNotSupported","value":"Error::FeatureNotSupported","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" I2C/SMBus feature not supported.","sig":null,"attributes":[{"value":"/ I2C/SMBus feature not supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101187,"byte_end":101223,"line_start":165,"line_end":165,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101228,"byte_end":101231,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ The underlying drivers don't support the selected I2C feature or SMBus protocol.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101236,"byte_end":101320,"line_start":167,"line_end":167,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2323},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101830,"byte_end":101842,"line_start":179,"line_end":179,"column_start":5,"column_end":17},"name":"UnknownModel","qualname":"::i2c::Error::UnknownModel","value":"Error::UnknownModel","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Unknown model.","sig":null,"attributes":[{"value":"/ Unknown model.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101350,"byte_end":101368,"line_start":169,"line_end":169,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101373,"byte_end":101376,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi model or SoC can't be identified. Support for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101381,"byte_end":101447,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/ new models is usually added shortly after they are officially","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101452,"byte_end":101517,"line_start":172,"line_end":172,"column_start":5,"column_end":70}},{"value":"/ announced and available to the public. Make sure you're using","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101522,"byte_end":101587,"line_start":173,"line_end":173,"column_start":5,"column_end":70}},{"value":"/ the latest release of RPPAL.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101592,"byte_end":101624,"line_start":174,"line_end":174,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101629,"byte_end":101632,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ You may also encounter this error if your Linux distribution","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101637,"byte_end":101701,"line_start":176,"line_end":176,"column_start":5,"column_end":69}},{"value":"/ doesn't provide any of the common user-accessible system files","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101706,"byte_end":101772,"line_start":177,"line_end":177,"column_start":5,"column_end":71}},{"value":"/ that are used to identify the model and SoC.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101777,"byte_end":101825,"line_start":178,"line_end":178,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":2314},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100953,"byte_end":100958,"line_start":157,"line_end":157,"column_start":10,"column_end":15},"name":"Error","qualname":"::i2c::Error","value":"pub enum Error {\n    Io(io::Error),\n    InvalidSlaveAddress(u16),\n    FeatureNotSupported,\n    UnknownModel,\n}","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2318},{"krate":0,"index":2321},{"krate":0,"index":2323}],"decl_id":null,"docs":" Errors that can occur when accessing the I2C peripheral.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when accessing the I2C peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":100866,"byte_end":100926,"line_start":155,"line_end":155,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":870},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102642,"byte_end":102648,"line_start":208,"line_end":208,"column_start":10,"column_end":16},"name":"Result","qualname":"::i2c::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type returned from methods that can have `i2c::Error`s.\n","sig":null,"attributes":[{"value":"/ Result type returned from methods that can have `i2c::Error`s.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102566,"byte_end":102632,"line_start":207,"line_end":207,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2327},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103855,"byte_end":103858,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"I2c","qualname":"::i2c::I2c","value":"I2c {  }","parent":null,"children":[{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333}],"decl_id":null,"docs":" Provides access to the Raspberry Pi's I2C peripheral.","sig":null,"attributes":[{"value":"/ Provides access to the Raspberry Pi's I2C peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102681,"byte_end":102738,"line_start":210,"line_end":210,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102739,"byte_end":102742,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Before using `I2c`, make sure your Raspberry Pi has the necessary I2C buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102743,"byte_end":102822,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ enabled. More information can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102823,"byte_end":102873,"line_start":213,"line_end":213,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102874,"byte_end":102877,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Besides basic I2C communication through buffer reads and writes, `I2c` can","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102878,"byte_end":102956,"line_start":215,"line_end":215,"column_start":1,"column_end":79}},{"value":"/ also be used with devices that require SMBus (System Management Bus) support.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102957,"byte_end":103038,"line_start":216,"line_end":216,"column_start":1,"column_end":82}},{"value":"/ SMBus is based on I2C, and defines more structured message transactions","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103039,"byte_end":103114,"line_start":217,"line_end":217,"column_start":1,"column_end":76}},{"value":"/ through its various protocols. More details can be found in the latest SMBus","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103115,"byte_end":103195,"line_start":218,"line_end":218,"column_start":1,"column_end":81}},{"value":"/ [specification].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103196,"byte_end":103216,"line_start":219,"line_end":219,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103217,"byte_end":103220,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ The `embedded-hal` [`blocking::i2c::Read`], [`blocking::i2c::Write`] and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103221,"byte_end":103297,"line_start":221,"line_end":221,"column_start":1,"column_end":77}},{"value":"/ [`blocking::i2c::WriteRead`] trait implementations for `Spi` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103298,"byte_end":103377,"line_start":222,"line_end":222,"column_start":1,"column_end":80}},{"value":"/ by specifying the optional `hal`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103378,"byte_end":103414,"line_start":223,"line_end":223,"column_start":1,"column_end":37}},{"value":"/ feature in the dependency declaration for the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103415,"byte_end":103479,"line_start":224,"line_end":224,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103480,"byte_end":103483,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ [here]: index.html#i2c-buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103484,"byte_end":103516,"line_start":226,"line_end":226,"column_start":1,"column_end":33}},{"value":"/ [specification]: http://smbus.org/specs/SMBus_3_1_20180319.pdf","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103517,"byte_end":103583,"line_start":227,"line_end":227,"column_start":1,"column_end":67}},{"value":"/ [`blocking::i2c::Read`]: ../../embedded_hal/blocking/i2c/trait.Read.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103584,"byte_end":103660,"line_start":228,"line_end":228,"column_start":1,"column_end":77}},{"value":"/ [`blocking::i2c::Write`]: ../../embedded_hal/blocking/i2c/trait.Write.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103661,"byte_end":103739,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"/ [`blocking::i2c::WriteRead`]: ../../embedded_hal/blocking/i2c/trait.WriteRead.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":103740,"byte_end":103826,"line_start":230,"line_end":230,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104651,"byte_end":104654,"line_start":254,"line_end":254,"column_start":12,"column_end":15},"name":"new","qualname":"<I2c>::new","value":"pub fn new() -> Result<I2c>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `I2c`.","sig":null,"attributes":[{"value":"/ Constructs a new `I2c`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104246,"byte_end":104273,"line_start":245,"line_end":245,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104278,"byte_end":104281,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ `new` attempts to identify which I2C bus is bound to physical pins 3 (SDA)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104286,"byte_end":104364,"line_start":247,"line_end":247,"column_start":5,"column_end":83}},{"value":"/ and 5 (SCL) based on the Raspberry Pi model. For the early model B Rev 1,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104369,"byte_end":104446,"line_start":248,"line_end":248,"column_start":5,"column_end":82}},{"value":"/ bus 0 is selected. For every other model, bus 1 is used.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104451,"byte_end":104511,"line_start":249,"line_end":249,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104516,"byte_end":104519,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ More information on configuring the I2C buses can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104524,"byte_end":104594,"line_start":251,"line_end":251,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104599,"byte_end":104602,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [here]: index.html#i2c-buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104607,"byte_end":104639,"line_start":253,"line_end":253,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105380,"byte_end":105388,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"with_bus","qualname":"<I2c>::with_bus","value":"pub fn with_bus(u8) -> Result<I2c>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `I2c` using the specified bus.","sig":null,"attributes":[{"value":"/ Constructs a new `I2c` using the specified bus.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104830,"byte_end":104881,"line_start":261,"line_end":261,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104886,"byte_end":104889,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ `bus` indicates the selected I2C bus. You'll typically want to select the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104894,"byte_end":104971,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/ bus that's bound to physical pins 3 (SDA) and 5 (SCL). On the Raspberry","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104976,"byte_end":105051,"line_start":264,"line_end":264,"column_start":5,"column_end":80}},{"value":"/ Pi B Rev 1, those pins are tied to bus 0. On every other Raspberry","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105056,"byte_end":105126,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ Pi model, they're connected to bus 1. Additional I2C buses are available","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105131,"byte_end":105207,"line_start":266,"line_end":266,"column_start":5,"column_end":81}},{"value":"/ on the Raspberry Pi 4 B.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105212,"byte_end":105240,"line_start":267,"line_end":267,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105245,"byte_end":105248,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ More information on configuring the I2C buses can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105253,"byte_end":105323,"line_start":269,"line_end":269,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105328,"byte_end":105331,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ [here]: index.html#i2c-buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":105336,"byte_end":105368,"line_start":271,"line_end":271,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106509,"byte_end":106521,"line_start":308,"line_end":308,"column_start":12,"column_end":24},"name":"capabilities","qualname":"<I2c>::capabilities","value":"pub fn capabilities(&Self) -> Capabilities","parent":null,"children":[],"decl_id":null,"docs":" Returns information on the functionality supported by the underlying drivers.","sig":null,"attributes":[{"value":"/ Returns information on the functionality supported by the underlying drivers.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106250,"byte_end":106331,"line_start":302,"line_end":302,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106336,"byte_end":106339,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ The returned [`Capabilities`] instance lists the available","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106344,"byte_end":106406,"line_start":304,"line_end":304,"column_start":5,"column_end":67}},{"value":"/ I2C and SMBus features.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106411,"byte_end":106438,"line_start":305,"line_end":305,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106443,"byte_end":106446,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ [`Capabilities`]: struct.Capabilities.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106451,"byte_end":106497,"line_start":307,"line_end":307,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106616,"byte_end":106619,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"bus","qualname":"<I2c>::bus","value":"pub fn bus(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the I2C bus ID.\n","sig":null,"attributes":[{"value":"/ Returns the I2C bus ID.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106577,"byte_end":106604,"line_start":312,"line_end":312,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106721,"byte_end":106732,"line_start":318,"line_end":318,"column_start":12,"column_end":23},"name":"clock_speed","qualname":"<I2c>::clock_speed","value":"pub fn clock_speed(&Self) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the clock frequency in hertz (Hz).\n","sig":null,"attributes":[{"value":"/ Returns the clock frequency in hertz (Hz).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":106663,"byte_end":106709,"line_start":317,"line_end":317,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107746,"byte_end":107763,"line_start":345,"line_end":345,"column_start":12,"column_end":29},"name":"set_slave_address","qualname":"<I2c>::set_slave_address","value":"pub fn set_slave_address(&mut Self, u16) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a 7-bit or 10-bit slave address.","sig":null,"attributes":[{"value":"/ Sets a 7-bit or 10-bit slave address.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107131,"byte_end":107172,"line_start":333,"line_end":333,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107177,"byte_end":107180,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ `slave_address` refers to the slave device you're communicating with.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107185,"byte_end":107258,"line_start":335,"line_end":335,"column_start":5,"column_end":78}},{"value":"/ The specified address shouldn't include the R/W bit.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107263,"byte_end":107319,"line_start":336,"line_end":336,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107324,"byte_end":107327,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ By default, 10-bit addressing is disabled, which means","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107332,"byte_end":107390,"line_start":338,"line_end":338,"column_start":5,"column_end":63}},{"value":"/ `set_slave_address` only accepts 7-bit addresses. 10-bit addressing","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107395,"byte_end":107466,"line_start":339,"line_end":339,"column_start":5,"column_end":76}},{"value":"/ can be enabled with [`set_addr_10bit`]. Note that setting a 7-bit","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107471,"byte_end":107540,"line_start":340,"line_end":340,"column_start":5,"column_end":74}},{"value":"/ address when 10-bit addressing is enabled won't correctly target a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107545,"byte_end":107615,"line_start":341,"line_end":341,"column_start":5,"column_end":75}},{"value":"/ slave device that doesn't support 10-bit addresses.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107620,"byte_end":107675,"line_start":342,"line_end":342,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107680,"byte_end":107683,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ [`set_addr_10bit`]: #method.set_addr_10bit","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":107688,"byte_end":107734,"line_start":344,"line_end":344,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108504,"byte_end":108515,"line_start":366,"line_end":366,"column_start":12,"column_end":23},"name":"set_timeout","qualname":"<I2c>::set_timeout","value":"pub fn set_timeout(&Self, u32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum duration of a transaction in milliseconds (ms).","sig":null,"attributes":[{"value":"/ Sets the maximum duration of a transaction in milliseconds (ms).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108260,"byte_end":108328,"line_start":360,"line_end":360,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108333,"byte_end":108336,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Transactions that take longer than `timeout` return an","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108341,"byte_end":108399,"line_start":362,"line_end":362,"column_start":5,"column_end":63}},{"value":"/ `io::ErrorKind::TimedOut` error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108404,"byte_end":108440,"line_start":363,"line_end":363,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108445,"byte_end":108448,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ `timeout` has a resolution of 10ms.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":108453,"byte_end":108492,"line_start":365,"line_end":365,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109434,"byte_end":109448,"line_start":389,"line_end":389,"column_start":12,"column_end":26},"name":"set_addr_10bit","qualname":"<I2c>::set_addr_10bit","value":"pub fn set_addr_10bit(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables or disables 10-bit addressing.","sig":null,"attributes":[{"value":"/ Enables or disables 10-bit addressing.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109028,"byte_end":109070,"line_start":381,"line_end":381,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109075,"byte_end":109078,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ 10-bit addressing currently isn't supported on the Raspberry Pi. `set_addr_10bit` returns","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109083,"byte_end":109176,"line_start":383,"line_end":383,"column_start":5,"column_end":98}},{"value":"/ `Err(`[`Error::FeatureNotSupported`]`)` unless underlying driver support is detected.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109181,"byte_end":109270,"line_start":384,"line_end":384,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109275,"byte_end":109278,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ By default, `addr_10bit` is set to `false`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109283,"byte_end":109330,"line_start":386,"line_end":386,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109335,"byte_end":109338,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ [`Error::FeatureNotSupported`]: enum.Error.html#variant.FeatureNotSupported","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109343,"byte_end":109422,"line_start":388,"line_end":388,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110037,"byte_end":110041,"line_start":408,"line_end":408,"column_start":12,"column_end":16},"name":"read","qualname":"<I2c>::read","value":"pub fn read(&mut Self, &mut [u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives incoming data from the slave device and writes it to `buffer`.","sig":null,"attributes":[{"value":"/ Receives incoming data from the slave device and writes it to `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109750,"byte_end":109825,"line_start":401,"line_end":401,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109830,"byte_end":109833,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ `read` reads as many bytes as can fit in `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109838,"byte_end":109892,"line_start":403,"line_end":403,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109897,"byte_end":109900,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Read Bit → Incoming Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109905,"byte_end":109975,"line_start":405,"line_end":405,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109980,"byte_end":109983,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were read.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":109988,"byte_end":110025,"line_start":407,"line_end":407,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110359,"byte_end":110364,"line_start":417,"line_end":417,"column_start":12,"column_end":17},"name":"write","qualname":"<I2c>::write","value":"pub fn write(&mut Self, &[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends the outgoing data contained in `buffer` to the slave device.","sig":null,"attributes":[{"value":"/ Sends the outgoing data contained in `buffer` to the slave device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110140,"byte_end":110210,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110215,"byte_end":110218,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Outgoing Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110223,"byte_end":110294,"line_start":414,"line_end":414,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110299,"byte_end":110302,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were written.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110307,"byte_end":110347,"line_start":416,"line_end":416,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111211,"byte_end":111221,"line_start":436,"line_end":436,"column_start":12,"column_end":22},"name":"write_read","qualname":"<I2c>::write_read","value":"pub fn write_read(&Self, &[u8], &mut [u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends the outgoing data contained in `write_buffer` to the slave device, and\n then fills `read_buffer` with incoming data.","sig":null,"attributes":[{"value":"/ Sends the outgoing data contained in `write_buffer` to the slave device, and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110460,"byte_end":110540,"line_start":421,"line_end":421,"column_start":5,"column_end":85}},{"value":"/ then fills `read_buffer` with incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110545,"byte_end":110593,"line_start":422,"line_end":422,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110598,"byte_end":110601,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Compared to calling [`write`] and [`read`] separately, `write_read` doesn't","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110606,"byte_end":110685,"line_start":424,"line_end":424,"column_start":5,"column_end":84}},{"value":"/ issue a STOP condition in between the write and read operation. A repeated","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110690,"byte_end":110768,"line_start":425,"line_end":425,"column_start":5,"column_end":83}},{"value":"/ START is sent instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110773,"byte_end":110799,"line_start":426,"line_end":426,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110804,"byte_end":110807,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ `write_read` reads as many bytes as can fit in `read_buffer`. The maximum","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110812,"byte_end":110889,"line_start":428,"line_end":428,"column_start":5,"column_end":82}},{"value":"/ number of bytes in either `write_buffer` or `read_buffer` can't exceed 8192.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110894,"byte_end":110974,"line_start":429,"line_end":429,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110979,"byte_end":110982,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Outgoing Bytes → Repeated START →","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":110987,"byte_end":111072,"line_start":431,"line_end":431,"column_start":5,"column_end":82}},{"value":"/ Address + Read Bit → Incoming Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111077,"byte_end":111127,"line_start":432,"line_end":432,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111132,"byte_end":111135,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ [`write`]: #method.write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111140,"byte_end":111168,"line_start":434,"line_end":434,"column_start":5,"column_end":33}},{"value":"/ [`read`]: #method.read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111173,"byte_end":111199,"line_start":435,"line_end":435,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112188,"byte_end":112198,"line_start":462,"line_end":462,"column_start":12,"column_end":22},"name":"block_read","qualname":"<I2c>::block_read","value":"pub fn block_read(&Self, u8, &mut [u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command`, and then fills a multi-byte `buffer` with\n incoming data.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command`, and then fills a multi-byte `buffer` with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111503,"byte_end":111574,"line_start":448,"line_end":448,"column_start":5,"column_end":76}},{"value":"/ incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111579,"byte_end":111597,"line_start":449,"line_end":449,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111602,"byte_end":111605,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ `block_read` can read a maximum of 32 bytes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111610,"byte_end":111658,"line_start":451,"line_end":451,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111663,"byte_end":111666,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Although `block_read` isn't part of the SMBus protocol, it uses the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111671,"byte_end":111742,"line_start":453,"line_end":453,"column_start":5,"column_end":76}},{"value":"/ SMBus functionality to offer this commonly used I2C transaction format.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111747,"byte_end":111822,"line_start":454,"line_end":454,"column_start":5,"column_end":80}},{"value":"/ The difference between `block_read` and [`smbus_block_read`] is that the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111827,"byte_end":111903,"line_start":455,"line_end":455,"column_start":5,"column_end":81}},{"value":"/ latter also expects a byte count from the slave device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111908,"byte_end":111967,"line_start":456,"line_end":456,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111972,"byte_end":111975,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Repeated START","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":111980,"byte_end":112054,"line_start":458,"line_end":458,"column_start":5,"column_end":73}},{"value":"/ → Address + Read Bit → Incoming Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112059,"byte_end":112113,"line_start":459,"line_end":459,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112118,"byte_end":112121,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ [`smbus_block_read`]: #method.smbus_block_read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112126,"byte_end":112176,"line_start":461,"line_end":461,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112588,"byte_end":112596,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"cmd_read","qualname":"<I2c>::cmd_read","value":"pub fn cmd_read(&Self, u8, &mut [u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" sends an 8-bit command and then put values read to the buffer\n DEV NOTE: This function might be cahnged later to not have a referenced buffer,\n the problem with it is that I want to use IOctl to fix this.\n","sig":null,"attributes":[{"value":"/ sends an 8-bit command and then put values read to the buffer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112354,"byte_end":112419,"line_start":467,"line_end":467,"column_start":5,"column_end":70}},{"value":"/ DEV NOTE: This function might be cahnged later to not have a referenced buffer,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112424,"byte_end":112507,"line_start":468,"line_end":468,"column_start":5,"column_end":88}},{"value":"/ the problem with it is that I want to use IOctl to fix this.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112512,"byte_end":112576,"line_start":469,"line_end":469,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113420,"byte_end":113431,"line_start":488,"line_end":488,"column_start":12,"column_end":23},"name":"block_write","qualname":"<I2c>::block_write","value":"pub fn block_write(&Self, u8, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` followed by a multi-byte `buffer`.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` followed by a multi-byte `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112751,"byte_end":112814,"line_start":475,"line_end":475,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112819,"byte_end":112822,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ `block_write` can write a maximum of 32 bytes. Any additional data contained","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112827,"byte_end":112907,"line_start":477,"line_end":477,"column_start":5,"column_end":85}},{"value":"/ in `buffer` is ignored.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112912,"byte_end":112939,"line_start":478,"line_end":478,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112944,"byte_end":112947,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Although `block_write` isn't part of the SMBus protocol, it uses the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":112952,"byte_end":113024,"line_start":480,"line_end":480,"column_start":5,"column_end":77}},{"value":"/ SMBus functionality to offer this commonly used I2C transaction format. The","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113029,"byte_end":113108,"line_start":481,"line_end":481,"column_start":5,"column_end":84}},{"value":"/ difference between `block_write` and [`smbus_block_write`] is that the latter","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113113,"byte_end":113194,"line_start":482,"line_end":482,"column_start":5,"column_end":86}},{"value":"/ also sends a byte count to the slave device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113199,"byte_end":113247,"line_start":483,"line_end":483,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113252,"byte_end":113255,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113260,"byte_end":113343,"line_start":485,"line_end":485,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113348,"byte_end":113351,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ [`smbus_block_write`]: #method.smbus_block_write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113356,"byte_end":113408,"line_start":487,"line_end":487,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113704,"byte_end":113713,"line_start":495,"line_end":495,"column_start":12,"column_end":21},"name":"cmd_write","qualname":"<I2c>::cmd_write","value":"pub fn cmd_write(&Self, u8, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" sends a 8 bitcommand and then reads from the buffer,\n dev note might change somethings here later\n","sig":null,"attributes":[{"value":"/ sends a 8 bitcommand and then reads from the buffer,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113584,"byte_end":113640,"line_start":493,"line_end":493,"column_start":5,"column_end":61}},{"value":"/ dev note might change somethings here later","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":113645,"byte_end":113692,"line_start":494,"line_end":494,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114148,"byte_end":114167,"line_start":506,"line_end":506,"column_start":12,"column_end":31},"name":"smbus_quick_command","qualname":"<I2c>::smbus_quick_command","value":"pub fn smbus_quick_command(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends a 1-bit `command` in place of the R/W bit.","sig":null,"attributes":[{"value":"/ Sends a 1-bit `command` in place of the R/W bit.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114017,"byte_end":114069,"line_start":503,"line_end":503,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114074,"byte_end":114077,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Command Bit → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114082,"byte_end":114136,"line_start":505,"line_end":505,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114426,"byte_end":114444,"line_start":515,"line_end":515,"column_start":12,"column_end":30},"name":"smbus_receive_byte","qualname":"<I2c>::smbus_receive_byte","value":"pub fn smbus_receive_byte(&Self) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" Receives an 8-bit value.","sig":null,"attributes":[{"value":"/ Receives an 8-bit value.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114304,"byte_end":114332,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114337,"byte_end":114340,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Read Bit → Incoming Byte → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114345,"byte_end":114414,"line_start":514,"line_end":514,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114665,"byte_end":114680,"line_start":522,"line_end":522,"column_start":12,"column_end":27},"name":"smbus_send_byte","qualname":"<I2c>::smbus_send_byte","value":"pub fn smbus_send_byte(&Self, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `value`.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `value`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114543,"byte_end":114570,"line_start":519,"line_end":519,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114575,"byte_end":114578,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Outgoing Byte → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114583,"byte_end":114653,"line_start":521,"line_end":521,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115022,"byte_end":115037,"line_start":532,"line_end":532,"column_start":12,"column_end":27},"name":"smbus_read_byte","qualname":"<I2c>::smbus_read_byte","value":"pub fn smbus_read_byte(&Self, u8) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command`, and receives an 8-bit value.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command`, and receives an 8-bit value.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114807,"byte_end":114865,"line_start":528,"line_end":528,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114870,"byte_end":114873,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Repeated START","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114878,"byte_end":114952,"line_start":530,"line_end":530,"column_start":5,"column_end":73}},{"value":"/ → Address + Read Bit → Incoming Byte → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":114957,"byte_end":115010,"line_start":531,"line_end":531,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115312,"byte_end":115328,"line_start":539,"line_end":539,"column_start":12,"column_end":28},"name":"smbus_write_byte","qualname":"<I2c>::smbus_write_byte","value":"pub fn smbus_write_byte(&Self, u8, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` and an 8-bit `value`.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` and an 8-bit `value`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115155,"byte_end":115205,"line_start":536,"line_end":536,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115210,"byte_end":115213,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Byte → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115218,"byte_end":115300,"line_start":538,"line_end":538,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116123,"byte_end":116138,"line_start":556,"line_end":556,"column_start":12,"column_end":27},"name":"smbus_read_word","qualname":"<I2c>::smbus_read_word","value":"pub fn smbus_read_word(&Self, u8) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command`, and receives a 16-bit value.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command`, and receives a 16-bit value.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115478,"byte_end":115536,"line_start":545,"line_end":545,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115541,"byte_end":115544,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Based on the SMBus protocol definition, the first byte received is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115549,"byte_end":115619,"line_start":547,"line_end":547,"column_start":5,"column_end":75}},{"value":"/ stored as the low byte of the 16-bit value, and the second byte as","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115624,"byte_end":115694,"line_start":548,"line_end":548,"column_start":5,"column_end":75}},{"value":"/ the high byte. Some devices may require you to swap these bytes. In those","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115699,"byte_end":115776,"line_start":549,"line_end":549,"column_start":5,"column_end":82}},{"value":"/ cases you can use the convenience method [`smbus_read_word_swapped`] instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115781,"byte_end":115862,"line_start":550,"line_end":550,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115867,"byte_end":115870,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Repeated START","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115875,"byte_end":115949,"line_start":552,"line_end":552,"column_start":5,"column_end":73}},{"value":"/ → Address + Read Bit → Incoming Byte Low → Incoming Byte High → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":115954,"byte_end":116034,"line_start":553,"line_end":553,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116039,"byte_end":116042,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ [`smbus_read_word_swapped`]: #method.smbus_read_word_swapped","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116047,"byte_end":116111,"line_start":555,"line_end":555,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116842,"byte_end":116865,"line_start":570,"line_end":570,"column_start":12,"column_end":35},"name":"smbus_read_word_swapped","qualname":"<I2c>::smbus_read_word_swapped","value":"pub fn smbus_read_word_swapped(&Self, u8) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command`, and receives a 16-bit `value` in a non-standard swapped byte order.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command`, and receives a 16-bit `value` in a non-standard swapped byte order.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116257,"byte_end":116354,"line_start":560,"line_end":560,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116359,"byte_end":116362,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ `smbus_read_word_swapped` is a convenience method that works similarly to [`smbus_read_word`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116367,"byte_end":116465,"line_start":562,"line_end":562,"column_start":5,"column_end":103}},{"value":"/ but reverses the byte order of the incoming 16-bit value. The high byte is received first,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116470,"byte_end":116564,"line_start":563,"line_end":563,"column_start":5,"column_end":99}},{"value":"/ and the low byte second.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116569,"byte_end":116597,"line_start":564,"line_end":564,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116602,"byte_end":116605,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Repeated START","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116610,"byte_end":116684,"line_start":566,"line_end":566,"column_start":5,"column_end":73}},{"value":"/ → Address + Read Bit → Incoming Byte High → Incoming Byte Low → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116689,"byte_end":116769,"line_start":567,"line_end":567,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116774,"byte_end":116777,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ [`smbus_read_word`]: #method.smbus_read_word","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":116782,"byte_end":116830,"line_start":569,"line_end":569,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117630,"byte_end":117646,"line_start":586,"line_end":586,"column_start":12,"column_end":28},"name":"smbus_write_word","qualname":"<I2c>::smbus_write_word","value":"pub fn smbus_write_word(&Self, u8, u16) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` and a 16-bit `value`.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` and a 16-bit `value`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117054,"byte_end":117104,"line_start":576,"line_end":576,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117109,"byte_end":117112,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Based on the SMBus protocol definition, the first byte sent is the low byte","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117117,"byte_end":117196,"line_start":578,"line_end":578,"column_start":5,"column_end":84}},{"value":"/ of the 16-bit value, and the second byte is the high byte. Some devices may","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117201,"byte_end":117280,"line_start":579,"line_end":579,"column_start":5,"column_end":84}},{"value":"/ require you to swap these bytes. In those cases you can use the convenience method","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117285,"byte_end":117371,"line_start":580,"line_end":580,"column_start":5,"column_end":91}},{"value":"/ [`smbus_write_word_swapped`] instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117376,"byte_end":117417,"line_start":581,"line_end":581,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117422,"byte_end":117425,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Byte Low → Outgoing Byte High → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117430,"byte_end":117539,"line_start":583,"line_end":583,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117544,"byte_end":117547,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ [`smbus_write_word_swapped`]: #method.smbus_write_word_swapped","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117552,"byte_end":117618,"line_start":585,"line_end":585,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118314,"byte_end":118338,"line_start":600,"line_end":600,"column_start":12,"column_end":36},"name":"smbus_write_word_swapped","qualname":"<I2c>::smbus_write_word_swapped","value":"pub fn smbus_write_word_swapped(&Self, u8, u16) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` and a 16-bit `value` in a non-standard swapped byte order.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` and a 16-bit `value` in a non-standard swapped byte order.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117797,"byte_end":117884,"line_start":592,"line_end":592,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117889,"byte_end":117892,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ `smbus_write_word_swapped` is a convenience method that works similarly to [`smbus_write_word`], but reverses the byte","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":117897,"byte_end":118019,"line_start":594,"line_end":594,"column_start":5,"column_end":127}},{"value":"/ order of the outgoing 16-bit value. The high byte is sent first, and the low byte second.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118024,"byte_end":118117,"line_start":595,"line_end":595,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118122,"byte_end":118125,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Byte High → Outgoing Byte Low → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118130,"byte_end":118239,"line_start":597,"line_end":597,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118244,"byte_end":118247,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ [`smbus_write_word`]: #method.smbus_write_word","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118252,"byte_end":118302,"line_start":599,"line_end":599,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119365,"byte_end":119383,"line_start":622,"line_end":622,"column_start":12,"column_end":30},"name":"smbus_process_call","qualname":"<I2c>::smbus_process_call","value":"pub fn smbus_process_call(&Self, u8, u16) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` and a 16-bit `value`, and then receives a 16-bit value in response.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` and a 16-bit `value`, and then receives a 16-bit value in response.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118578,"byte_end":118674,"line_start":610,"line_end":610,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118679,"byte_end":118682,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ Based on the SMBus protocol definition, for both the outgoing and incoming 16-bit value,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118687,"byte_end":118779,"line_start":612,"line_end":612,"column_start":5,"column_end":97}},{"value":"/ the first byte transferred is the low byte of the 16-bit value, and the second byte is the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118784,"byte_end":118878,"line_start":613,"line_end":613,"column_start":5,"column_end":99}},{"value":"/ high byte. Some devices may require you to swap these bytes. In those cases you can use the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118883,"byte_end":118978,"line_start":614,"line_end":614,"column_start":5,"column_end":100}},{"value":"/ convenience method [`smbus_process_call_swapped`] instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":118983,"byte_end":119045,"line_start":615,"line_end":615,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119050,"byte_end":119053,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Byte Low →","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119058,"byte_end":119139,"line_start":617,"line_end":617,"column_start":5,"column_end":78}},{"value":"/ Outgoing Byte High → Repeated START → Address + Read Bit → Incoming Byte Low →","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119144,"byte_end":119234,"line_start":618,"line_end":618,"column_start":5,"column_end":87}},{"value":"/ Incoming Byte High → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119239,"byte_end":119270,"line_start":619,"line_end":619,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119275,"byte_end":119278,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ [`smbus_process_call_swapped`]: #method.smbus_process_call_swapped","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119283,"byte_end":119353,"line_start":621,"line_end":621,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120274,"byte_end":120300,"line_start":642,"line_end":642,"column_start":12,"column_end":38},"name":"smbus_process_call_swapped","qualname":"<I2c>::smbus_process_call_swapped","value":"pub fn smbus_process_call_swapped(&Self, u8, u16) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` and a 16-bit `value`, and then receives a 16-bit value in response, in\n a non-standard byte order.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` and a 16-bit `value`, and then receives a 16-bit value in response, in","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119571,"byte_end":119670,"line_start":630,"line_end":630,"column_start":5,"column_end":104}},{"value":"/ a non-standard byte order.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119675,"byte_end":119705,"line_start":631,"line_end":631,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119710,"byte_end":119713,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ `smbus_process_call_swapped` is a convenience method that works similarly to [`smbus_process_call`],","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119718,"byte_end":119822,"line_start":633,"line_end":633,"column_start":5,"column_end":109}},{"value":"/ but reverses the byte order of the outgoing and incoming 16-bit value. The high byte is transferred","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119827,"byte_end":119930,"line_start":634,"line_end":634,"column_start":5,"column_end":108}},{"value":"/ first, and the low byte second.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119935,"byte_end":119970,"line_start":635,"line_end":635,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119975,"byte_end":119978,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Byte High →","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":119983,"byte_end":120065,"line_start":637,"line_end":637,"column_start":5,"column_end":79}},{"value":"/ Outgoing Byte Low → Repeated START → Address + Read Bit → Incoming Byte High →","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120070,"byte_end":120160,"line_start":638,"line_end":638,"column_start":5,"column_end":87}},{"value":"/ Incoming Byte Low → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120165,"byte_end":120195,"line_start":639,"line_end":639,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120200,"byte_end":120203,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ [`smbus_process_call`]: #method.smbus_process_call","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120208,"byte_end":120262,"line_start":641,"line_end":641,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121710,"byte_end":121726,"line_start":673,"line_end":673,"column_start":12,"column_end":28},"name":"smbus_block_read","qualname":"<I2c>::smbus_block_read","value":"pub fn smbus_block_read(&Self, u8, &mut [u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command`, and then receives an 8-bit byte count along with a\n multi-byte `buffer`.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command`, and then receives an 8-bit byte count along with a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120609,"byte_end":120689,"line_start":652,"line_end":652,"column_start":5,"column_end":85}},{"value":"/ multi-byte `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120694,"byte_end":120718,"line_start":653,"line_end":653,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120723,"byte_end":120726,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ `smbus_block_read` currently isn't supported on the Raspberry Pi, and returns","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120731,"byte_end":120812,"line_start":655,"line_end":655,"column_start":5,"column_end":86}},{"value":"/ `Err(`[`Error::FeatureNotSupported`]`)` unless underlying driver support is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120817,"byte_end":120896,"line_start":656,"line_end":656,"column_start":5,"column_end":84}},{"value":"/ detected. You might be able to emulate the `smbus_block_read` functionality","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120901,"byte_end":120980,"line_start":657,"line_end":657,"column_start":5,"column_end":84}},{"value":"/ with [`write_read`], [`block_read`] or [`read`] provided the length of the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":120985,"byte_end":121063,"line_start":658,"line_end":658,"column_start":5,"column_end":83}},{"value":"/ expected incoming data is known beforehand, or the slave device allows the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121068,"byte_end":121146,"line_start":659,"line_end":659,"column_start":5,"column_end":83}},{"value":"/ master to read more data than it needs to send.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121151,"byte_end":121202,"line_start":660,"line_end":660,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121207,"byte_end":121210,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ `smbus_block_read` can read a maximum of 32 bytes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121215,"byte_end":121269,"line_start":662,"line_end":662,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121274,"byte_end":121277,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Repeated START →","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121282,"byte_end":121360,"line_start":664,"line_end":664,"column_start":5,"column_end":75}},{"value":"/ Address + Read Bit → Incoming Byte Count → Incoming Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121365,"byte_end":121439,"line_start":665,"line_end":665,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121444,"byte_end":121447,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were read.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121452,"byte_end":121489,"line_start":667,"line_end":667,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121494,"byte_end":121497,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ [`Error::FeatureNotSupported`]: enum.Error.html#variant.FeatureNotSupported","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121502,"byte_end":121581,"line_start":669,"line_end":669,"column_start":5,"column_end":84}},{"value":"/ [`write_read`]: #method.write_read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121586,"byte_end":121624,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/ [`block_read`]: #method.block_read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121629,"byte_end":121667,"line_start":671,"line_end":671,"column_start":5,"column_end":43}},{"value":"/ [`read`]: #method.read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":121672,"byte_end":121698,"line_start":672,"line_end":672,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122395,"byte_end":122412,"line_start":692,"line_end":692,"column_start":12,"column_end":29},"name":"smbus_block_write","qualname":"<I2c>::smbus_block_write","value":"pub fn smbus_block_write(&Self, u8, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an 8-bit `command` and an 8-bit byte count along with a multi-byte `buffer`.","sig":null,"attributes":[{"value":"/ Sends an 8-bit `command` and an 8-bit byte count along with a multi-byte `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122038,"byte_end":122124,"line_start":685,"line_end":685,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122129,"byte_end":122132,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ `smbus_block_write` can write a maximum of 32 bytes. Any additional data contained","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122137,"byte_end":122223,"line_start":687,"line_end":687,"column_start":5,"column_end":91}},{"value":"/ in `buffer` is ignored.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122228,"byte_end":122255,"line_start":688,"line_end":688,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122260,"byte_end":122263,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Sequence: START → Address + Write Bit → Command → Outgoing Byte Count","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122268,"byte_end":122347,"line_start":690,"line_end":690,"column_start":5,"column_end":78}},{"value":"/ → Outgoing Bytes → STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122352,"byte_end":122383,"line_start":691,"line_end":691,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122968,"byte_end":122981,"line_start":706,"line_end":706,"column_start":12,"column_end":25},"name":"set_smbus_pec","qualname":"<I2c>::set_smbus_pec","value":"pub fn set_smbus_pec(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables or disables SMBus Packet Error Checking.","sig":null,"attributes":[{"value":"/ Enables or disables SMBus Packet Error Checking.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122568,"byte_end":122620,"line_start":698,"line_end":698,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122625,"byte_end":122628,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ Packet Error Checking inserts a CRC-8 Packet Error Code (PEC) byte before each STOP","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122633,"byte_end":122720,"line_start":700,"line_end":700,"column_start":5,"column_end":92}},{"value":"/ condition for all SMBus protocols, except Quick Command and Host Notify.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122725,"byte_end":122801,"line_start":701,"line_end":701,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122806,"byte_end":122809,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ The PEC is calculated on all message bytes except the START, STOP, ACK and NACK bits.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122814,"byte_end":122903,"line_start":703,"line_end":703,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122908,"byte_end":122911,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ By default, `pec` is set to `false`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":122916,"byte_end":122956,"line_start":705,"line_end":705,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":905},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pwm","qualname":"::pwm","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":989},{"krate":0,"index":2336},{"krate":0,"index":2340},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":995},{"krate":0,"index":2342},{"krate":0,"index":2349},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":997},{"krate":0,"index":2360},{"krate":0,"index":2365},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":999},{"krate":0,"index":2376},{"krate":0,"index":2379},{"krate":0,"index":1001},{"krate":0,"index":1020}],"decl_id":null,"docs":" Interface for the PWM peripheral.","sig":null,"attributes":[{"value":"/ Interface for the PWM peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142245,"byte_end":142282,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142283,"byte_end":142286,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ RPPAL controls the Raspberry Pi's PWM peripheral through the `pwm` sysfs","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142287,"byte_end":142363,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ interface.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142364,"byte_end":142378,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142379,"byte_end":142382,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ## PWM channels","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142383,"byte_end":142402,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142403,"byte_end":142406,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The BCM283x SoC supports two hardware PWM channels. By default, both channels","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142407,"byte_end":142488,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ are disabled. To enable only PWM0 on its default pin (BCM GPIO 18, physical pin 12),","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142489,"byte_end":142577,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ add `dtoverlay=pwm` to `/boot/config.txt`. If you need both PWM channels, replace","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142578,"byte_end":142663,"line_start":30,"line_end":30,"column_start":1,"column_end":86}},{"value":"/ `pwm` with `pwm-2chan`, which enables PWM0 on BCM GPIO 18 (physical pin 12), and PWM1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142664,"byte_end":142753,"line_start":31,"line_end":31,"column_start":1,"column_end":90}},{"value":"/ on BCM GPIO 19 (physical pin 35). More details on enabling and configuring PWM on","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142754,"byte_end":142839,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"/ other GPIO pins than the default ones can be found in `/boot/overlays/README`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142840,"byte_end":142922,"line_start":33,"line_end":33,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142923,"byte_end":142926,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The Raspberry Pi's analog audio output uses both PWM channels. Playing audio and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":142927,"byte_end":143011,"line_start":35,"line_end":35,"column_start":1,"column_end":85}},{"value":"/ simultaneously accessing a PWM channel may cause issues.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143012,"byte_end":143072,"line_start":36,"line_end":36,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143073,"byte_end":143076,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Some of the GPIO pins capable of supporting hardware PWM can also be configured for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143077,"byte_end":143164,"line_start":38,"line_end":38,"column_start":1,"column_end":88}},{"value":"/ use with other peripherals. Be careful not to enable two peripherals on the same pin","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143165,"byte_end":143253,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"/ at the same time.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143254,"byte_end":143275,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143276,"byte_end":143279,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ## Using PWM without superuser privileges (`sudo`)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143280,"byte_end":143334,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143335,"byte_end":143338,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ As of kernel version 4.14.34, released on April 16 2018, it's possible to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143339,"byte_end":143416,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ configure your Raspberry Pi to allow non-root access to PWM. 4.14.34 includes","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143417,"byte_end":143498,"line_start":45,"line_end":45,"column_start":1,"column_end":82}},{"value":"/ a [patch] that allows `udev` to change file permissions when a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143499,"byte_end":143565,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/ PWM channel is exported. This will let any user that's a member of the `gpio`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143566,"byte_end":143647,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ group configure PWM without having to use `sudo`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143648,"byte_end":143701,"line_start":48,"line_end":48,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143702,"byte_end":143705,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The `udev` rules needed to make this work haven't been patched in yet as of","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143706,"byte_end":143785,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ June 2018, but you can easily add them yourself. Make sure you're running","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143786,"byte_end":143863,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ 4.14.34 or later, and append the following snippet to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143864,"byte_end":143921,"line_start":52,"line_end":52,"column_start":1,"column_end":58}},{"value":"/ `/etc/udev/rules.d/99-com.rules`. Reboot the Raspberry Pi afterwards.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143922,"byte_end":143995,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":143996,"byte_end":143999,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144000,"byte_end":144011,"line_start":55,"line_end":55,"column_start":1,"column_end":12}},{"value":"/ SUBSYSTEM==\"pwm*\", PROGRAM=\"/bin/sh -c '\\","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144012,"byte_end":144057,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"/     chown -R root:gpio /sys/class/pwm && chmod -R 770 /sys/class/pwm;\\","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144058,"byte_end":144132,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/     chown -R root:gpio /sys/devices/platform/soc/*.pwm/pwm/pwmchip* &&\\","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144133,"byte_end":144208,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/     chmod -R 770 /sys/devices/platform/soc/*.pwm/pwm/pwmchip*\\","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144209,"byte_end":144275,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ '\"","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144276,"byte_end":144282,"line_start":60,"line_end":60,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144283,"byte_end":144290,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144291,"byte_end":144294,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Troubleshooting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144295,"byte_end":144317,"line_start":63,"line_end":63,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144318,"byte_end":144321,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ### Permission denied","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144322,"byte_end":144347,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144348,"byte_end":144351,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If [`new`] returns an `io::ErrorKind::PermissionDenied`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144352,"byte_end":144411,"line_start":67,"line_end":67,"column_start":1,"column_end":60}},{"value":"/ error, make sure `/sys/class/pwm` and all of its subdirectories","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144412,"byte_end":144479,"line_start":68,"line_end":68,"column_start":1,"column_end":68}},{"value":"/ are owned by `root:gpio`, the current user is a member of the `gpio` group","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144480,"byte_end":144558,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ and `udev` is properly configured as mentioned above. Alternatively, you can","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144559,"byte_end":144639,"line_start":70,"line_end":70,"column_start":1,"column_end":81}},{"value":"/ launch your application using `sudo`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144640,"byte_end":144681,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144682,"byte_end":144685,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ### Not found","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144686,"byte_end":144703,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144704,"byte_end":144707,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ If [`new`] returns an `io::ErrorKind::NotFound` error, you may have","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144708,"byte_end":144779,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/ forgotten to enable the selected PWM channel. The configuration options","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144780,"byte_end":144855,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/ to enable either of the two PWM channels are listed above.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144856,"byte_end":144918,"line_start":77,"line_end":77,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144919,"byte_end":144922,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ [patch]: https://github.com/raspberrypi/linux/issues/1983","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144923,"byte_end":144984,"line_start":79,"line_end":79,"column_start":1,"column_end":62}},{"value":"/ [`new`]: struct.Pwm.html#method.new","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":144985,"byte_end":145024,"line_start":80,"line_end":80,"column_start":1,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2337},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145371,"byte_end":145373,"line_start":100,"line_end":100,"column_start":5,"column_end":7},"name":"Io","qualname":"::pwm::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":2336},"children":[],"decl_id":null,"docs":" I/O error.\n","sig":null,"attributes":[{"value":"/ I/O error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145352,"byte_end":145366,"line_start":99,"line_end":99,"column_start":5,"column_end":19}}]},{"kind":"Enum","id":{"krate":0,"index":2336},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145340,"byte_end":145345,"line_start":98,"line_end":98,"column_start":10,"column_end":15},"name":"Error","qualname":"::pwm::Error","value":"pub enum Error { Io(io::Error), }","parent":null,"children":[{"krate":0,"index":2337}],"decl_id":null,"docs":" Errors that can occur when accessing the PWM peripheral.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when accessing the PWM peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145253,"byte_end":145313,"line_start":96,"line_end":96,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":995},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145802,"byte_end":145808,"line_start":120,"line_end":120,"column_start":10,"column_end":16},"name":"Result","qualname":"::pwm::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type returned from methods that can have `pwm::Error`s.\n","sig":null,"attributes":[{"value":"/ Result type returned from methods that can have `pwm::Error`s.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145726,"byte_end":145792,"line_start":119,"line_end":119,"column_start":1,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2343},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146049,"byte_end":146053,"line_start":130,"line_end":130,"column_start":5,"column_end":9},"name":"Pwm0","qualname":"::pwm::Channel::Pwm0","value":"Channel::Pwm0","parent":{"krate":0,"index":2342},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2346},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146063,"byte_end":146067,"line_start":131,"line_end":131,"column_start":5,"column_end":9},"name":"Pwm1","qualname":"::pwm::Channel::Pwm1","value":"Channel::Pwm1","parent":{"krate":0,"index":2342},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2342},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146035,"byte_end":146042,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"name":"Channel","qualname":"::pwm::Channel","value":"pub enum Channel { Pwm0 = , Pwm1 = , }","parent":null,"children":[{"krate":0,"index":2343},{"krate":0,"index":2346}],"decl_id":null,"docs":" PWM channels.","sig":null,"attributes":[{"value":"/ PWM channels.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145841,"byte_end":145858,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145859,"byte_end":145862,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ More information on enabling and configuring the PWM channels can be","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145863,"byte_end":145935,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145936,"byte_end":145953,"line_start":125,"line_end":125,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145954,"byte_end":145957,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ [here]: index.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145958,"byte_end":145980,"line_start":127,"line_end":127,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2361},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146400,"byte_end":146406,"line_start":146,"line_end":146,"column_start":5,"column_end":11},"name":"Normal","qualname":"::pwm::Polarity::Normal","value":"Polarity::Normal","parent":{"krate":0,"index":2360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2363},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146412,"byte_end":146419,"line_start":147,"line_end":147,"column_start":5,"column_end":12},"name":"Inverse","qualname":"::pwm::Polarity::Inverse","value":"Polarity::Inverse","parent":{"krate":0,"index":2360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2360},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146385,"byte_end":146393,"line_start":145,"line_end":145,"column_start":10,"column_end":18},"name":"Polarity","qualname":"::pwm::Polarity","value":"pub enum Polarity { Normal, Inverse, }","parent":null,"children":[{"krate":0,"index":2361},{"krate":0,"index":2363}],"decl_id":null,"docs":" Output polarities.\n","sig":null,"attributes":[{"value":"/ Output polarities.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146308,"byte_end":146330,"line_start":143,"line_end":143,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2376},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147411,"byte_end":147414,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"Pwm","qualname":"::pwm::Pwm","value":"Pwm {  }","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2378}],"decl_id":null,"docs":" Provides access to the Raspberry Pi's PWM peripheral.","sig":null,"attributes":[{"value":"/ Provides access to the Raspberry Pi's PWM peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146669,"byte_end":146726,"line_start":159,"line_end":159,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146727,"byte_end":146730,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Before using `Pwm`, make sure the selected PWM channel has been configured","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146731,"byte_end":146809,"line_start":161,"line_end":161,"column_start":1,"column_end":79}},{"value":"/ and activated. More information can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146810,"byte_end":146866,"line_start":162,"line_end":162,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146867,"byte_end":146870,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ The `embedded-hal` [`PwmPin`] trait implementation for `Pwm` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146871,"byte_end":146950,"line_start":164,"line_end":164,"column_start":1,"column_end":80}},{"value":"/ by specifying the optional `hal` feature in the dependency declaration for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146951,"byte_end":147029,"line_start":165,"line_end":165,"column_start":1,"column_end":79}},{"value":"/ the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147030,"byte_end":147052,"line_start":166,"line_end":166,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147053,"byte_end":147056,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ The `unproven` `embedded-hal` [`Pwm`] trait implementation for `Pwm` can be enabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147057,"byte_end":147144,"line_start":168,"line_end":168,"column_start":1,"column_end":88}},{"value":"/ by specifying the optional `hal-unproven` feature in the dependency declaration for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147145,"byte_end":147232,"line_start":169,"line_end":169,"column_start":1,"column_end":88}},{"value":"/ the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147233,"byte_end":147255,"line_start":170,"line_end":170,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147256,"byte_end":147259,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ [here]: index.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147260,"byte_end":147282,"line_start":172,"line_end":172,"column_start":1,"column_end":23}},{"value":"/ [`PwmPin`]: ../../embedded_hal/trait.PwmPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147283,"byte_end":147335,"line_start":173,"line_end":173,"column_start":1,"column_end":53}},{"value":"/ [`Pwm`]: ../../embedded_hal/trait.Pwm.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147336,"byte_end":147382,"line_start":174,"line_end":174,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147717,"byte_end":147720,"line_start":188,"line_end":188,"column_start":12,"column_end":15},"name":"new","qualname":"<Pwm>::new","value":"pub fn new(Channel) -> Result<Pwm>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pwm`.","sig":null,"attributes":[{"value":"/ Constructs a new `Pwm`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147482,"byte_end":147509,"line_start":182,"line_end":182,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147514,"byte_end":147517,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ `new` doesn't change the channel's period, pulse width or polarity. The channel","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147522,"byte_end":147605,"line_start":184,"line_end":184,"column_start":5,"column_end":88}},{"value":"/ will remain disabled until [`enable`] is called.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147610,"byte_end":147662,"line_start":185,"line_end":185,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147667,"byte_end":147670,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ [`enable`]: #method.enable","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147675,"byte_end":147705,"line_start":187,"line_end":187,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148992,"byte_end":149003,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"with_period","qualname":"<Pwm>::with_period","value":"pub fn with_period(Channel, Duration, Duration, Polarity, bool) -> Result<Pwm>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pwm` using the specified settings.","sig":null,"attributes":[{"value":"/ Constructs a new `Pwm` using the specified settings.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148194,"byte_end":148250,"line_start":204,"line_end":204,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148255,"byte_end":148258,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ `period` indicates the time it takes for the PWM channel to complete one cycle.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148263,"byte_end":148346,"line_start":206,"line_end":206,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148351,"byte_end":148354,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ `pulse_width` indicates the amount of time the PWM channel is active during a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148359,"byte_end":148440,"line_start":208,"line_end":208,"column_start":5,"column_end":86}},{"value":"/ single period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148445,"byte_end":148463,"line_start":209,"line_end":209,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148468,"byte_end":148471,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ `polarity` configures the active logic level as either high ([`Normal`])","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148476,"byte_end":148552,"line_start":211,"line_end":211,"column_start":5,"column_end":81}},{"value":"/ or low ([`Inverse`]).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148557,"byte_end":148582,"line_start":212,"line_end":212,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148587,"byte_end":148590,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ `enabled` enables PWM on the selected channel. If `enabled` is set to `false`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148595,"byte_end":148677,"line_start":214,"line_end":214,"column_start":5,"column_end":87}},{"value":"/ the channel will remain disabled until [`enable`] is called.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148682,"byte_end":148746,"line_start":215,"line_end":215,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148751,"byte_end":148754,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This method will fail if `period` is shorter than `pulse_width`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148759,"byte_end":148827,"line_start":217,"line_end":217,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148832,"byte_end":148835,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ [`Normal`]: enum.Polarity.html#variant.Normal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148840,"byte_end":148889,"line_start":219,"line_end":219,"column_start":5,"column_end":54}},{"value":"/ [`Inverse`]: enum.Polarity.html#variant.Inverse","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148894,"byte_end":148945,"line_start":220,"line_end":220,"column_start":5,"column_end":56}},{"value":"/ [`enable`]: #method.enable","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":148950,"byte_end":148980,"line_start":221,"line_end":221,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150769,"byte_end":150783,"line_start":272,"line_end":272,"column_start":12,"column_end":26},"name":"with_frequency","qualname":"<Pwm>::with_frequency","value":"pub fn with_frequency(Channel, f64, f64, Polarity, bool) -> Result<Pwm>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pwm` using the specified settings.","sig":null,"attributes":[{"value":"/ Constructs a new `Pwm` using the specified settings.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":149936,"byte_end":149992,"line_start":254,"line_end":254,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":149997,"byte_end":150000,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ `with_frequency` is a convenience method that converts `frequency` to a period,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150005,"byte_end":150088,"line_start":256,"line_end":256,"column_start":5,"column_end":88}},{"value":"/ and calculates the duty cycle as a percentage of the frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150093,"byte_end":150160,"line_start":257,"line_end":257,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150165,"byte_end":150168,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ `frequency` is specified in hertz (Hz).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150173,"byte_end":150216,"line_start":259,"line_end":259,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150221,"byte_end":150224,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ `duty_cycle` is specified as a floating point value between `0.0` (0%) and `1.0` (100%).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150229,"byte_end":150321,"line_start":261,"line_end":261,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150326,"byte_end":150329,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ `polarity` configures the active logic level as either high ([`Normal`])","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150334,"byte_end":150410,"line_start":263,"line_end":263,"column_start":5,"column_end":81}},{"value":"/ or low ([`Inverse`]).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150415,"byte_end":150440,"line_start":264,"line_end":264,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150445,"byte_end":150448,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ `enabled` enables PWM on the selected channel. If `enabled` is set to `false`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150453,"byte_end":150535,"line_start":266,"line_end":266,"column_start":5,"column_end":87}},{"value":"/ the channel will remain disabled until [`enable`] is called.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150540,"byte_end":150604,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150609,"byte_end":150612,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ [`Normal`]: enum.Polarity.html#variant.Normal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150617,"byte_end":150666,"line_start":269,"line_end":269,"column_start":5,"column_end":54}},{"value":"/ [`Inverse`]: enum.Polarity.html#variant.Inverse","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150671,"byte_end":150722,"line_start":270,"line_end":270,"column_start":5,"column_end":56}},{"value":"/ [`enable`]: #method.enable","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":150727,"byte_end":150757,"line_start":271,"line_end":271,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152026,"byte_end":152032,"line_start":313,"line_end":313,"column_start":12,"column_end":18},"name":"period","qualname":"<Pwm>::period","value":"pub fn period(&Self) -> Result<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Returns the period.\n","sig":null,"attributes":[{"value":"/ Returns the period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":151991,"byte_end":152014,"line_start":312,"line_end":312,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152361,"byte_end":152371,"line_start":322,"line_end":322,"column_start":12,"column_end":22},"name":"set_period","qualname":"<Pwm>::set_period","value":"pub fn set_period(&Self, Duration) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the period.","sig":null,"attributes":[{"value":"/ Sets the period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152142,"byte_end":152162,"line_start":317,"line_end":317,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152167,"byte_end":152170,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ `period` indicates the time it takes for the PWM channel to complete one cycle.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152175,"byte_end":152258,"line_start":319,"line_end":319,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152263,"byte_end":152266,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ This method will fail if `period` is shorter than the current pulse width.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152271,"byte_end":152349,"line_start":321,"line_end":321,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152684,"byte_end":152695,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"pulse_width","qualname":"<Pwm>::pulse_width","value":"pub fn pulse_width(&Self) -> Result<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Returns the pulse width.\n","sig":null,"attributes":[{"value":"/ Returns the pulse width.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152644,"byte_end":152672,"line_start":332,"line_end":332,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153077,"byte_end":153092,"line_start":345,"line_end":345,"column_start":12,"column_end":27},"name":"set_pulse_width","qualname":"<Pwm>::set_pulse_width","value":"pub fn set_pulse_width(&Self, Duration) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the pulse width.","sig":null,"attributes":[{"value":"/ Sets the pulse width.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152833,"byte_end":152858,"line_start":339,"line_end":339,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152863,"byte_end":152866,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ `pulse_width` indicates the amount of time the PWM channel is active during a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152871,"byte_end":152952,"line_start":341,"line_end":341,"column_start":5,"column_end":86}},{"value":"/ single period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152957,"byte_end":152975,"line_start":342,"line_end":342,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152980,"byte_end":152983,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ This method will fail if `pulse_width` is longer than the current period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":152988,"byte_end":153065,"line_start":344,"line_end":344,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153559,"byte_end":153568,"line_start":359,"line_end":359,"column_start":12,"column_end":21},"name":"frequency","qualname":"<Pwm>::frequency","value":"pub fn frequency(&Self) -> Result<f64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the frequency.","sig":null,"attributes":[{"value":"/ Returns the frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153385,"byte_end":153411,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153416,"byte_end":153419,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ `frequency` is a convenience method that calculates the frequency in hertz (Hz)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153424,"byte_end":153507,"line_start":357,"line_end":357,"column_start":5,"column_end":88}},{"value":"/ based on the configured period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153512,"byte_end":153547,"line_start":358,"line_end":358,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154164,"byte_end":154177,"line_start":377,"line_end":377,"column_start":12,"column_end":25},"name":"set_frequency","qualname":"<Pwm>::set_frequency","value":"pub fn set_frequency(&Self, f64, f64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the frequency and duty cycle.","sig":null,"attributes":[{"value":"/ Sets the frequency and duty cycle.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153786,"byte_end":153824,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153829,"byte_end":153832,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ `set_frequency` is a convenience method that converts `frequency` to a period,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153837,"byte_end":153919,"line_start":371,"line_end":371,"column_start":5,"column_end":87}},{"value":"/ and calculates the duty cycle as a percentage of the frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153924,"byte_end":153991,"line_start":372,"line_end":372,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":153996,"byte_end":153999,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ `frequency` is specified in hertz (Hz).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154004,"byte_end":154047,"line_start":374,"line_end":374,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154052,"byte_end":154055,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ `duty_cycle` is specified as a floating point value between `0.0` (0%) and `1.0` (100%).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154060,"byte_end":154152,"line_start":376,"line_end":376,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155042,"byte_end":155052,"line_start":400,"line_end":400,"column_start":12,"column_end":22},"name":"duty_cycle","qualname":"<Pwm>::duty_cycle","value":"pub fn duty_cycle(&Self) -> Result<f64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the duty cycle.","sig":null,"attributes":[{"value":"/ Returns the duty cycle.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154793,"byte_end":154820,"line_start":395,"line_end":395,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154825,"byte_end":154828,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ `duty_cycle` is a convenience method that calculates the duty cycle as a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154833,"byte_end":154909,"line_start":397,"line_end":397,"column_start":5,"column_end":81}},{"value":"/ floating point value between `0.0` (0%) and `1.0` (100%) based on the configured","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":154914,"byte_end":154998,"line_start":398,"line_end":398,"column_start":5,"column_end":89}},{"value":"/ period and pulse width.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155003,"byte_end":155030,"line_start":399,"line_end":399,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155636,"byte_end":155650,"line_start":417,"line_end":417,"column_start":12,"column_end":26},"name":"set_duty_cycle","qualname":"<Pwm>::set_duty_cycle","value":"pub fn set_duty_cycle(&Self, f64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the duty cycle.","sig":null,"attributes":[{"value":"/ Sets the duty cycle.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155354,"byte_end":155378,"line_start":411,"line_end":411,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155383,"byte_end":155386,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ `set_duty_cycle` is a convenience method that converts `duty_cycle` to a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155391,"byte_end":155467,"line_start":413,"line_end":413,"column_start":5,"column_end":81}},{"value":"/ pulse width based on the configured period.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155472,"byte_end":155519,"line_start":414,"line_end":414,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155524,"byte_end":155527,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ `duty_cycle` is specified as a floating point value between `0.0` (0%) and `1.0` (100%).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155532,"byte_end":155624,"line_start":416,"line_end":416,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155958,"byte_end":155966,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"polarity","qualname":"<Pwm>::polarity","value":"pub fn polarity(&Self) -> Result<Polarity>","parent":null,"children":[],"decl_id":null,"docs":" Returns the polarity.\n","sig":null,"attributes":[{"value":"/ Returns the polarity.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":155921,"byte_end":155946,"line_start":426,"line_end":426,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156327,"byte_end":156339,"line_start":438,"line_end":438,"column_start":12,"column_end":24},"name":"set_polarity","qualname":"<Pwm>::set_polarity","value":"pub fn set_polarity(&Self, Polarity) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the polarity.","sig":null,"attributes":[{"value":"/ Sets the polarity.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156056,"byte_end":156078,"line_start":431,"line_end":431,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156083,"byte_end":156086,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ `polarity` configures the active logic level as either high","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156091,"byte_end":156154,"line_start":433,"line_end":433,"column_start":5,"column_end":68}},{"value":"/ ([`Normal`]) or low ([`Inverse`]).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156159,"byte_end":156197,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156202,"byte_end":156205,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ [`Normal`]: enum.Polarity.html#variant.Normal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156210,"byte_end":156259,"line_start":436,"line_end":436,"column_start":5,"column_end":54}},{"value":"/ [`Inverse`]: enum.Polarity.html#variant.Inverse","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156264,"byte_end":156315,"line_start":437,"line_end":437,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156531,"byte_end":156541,"line_start":445,"line_end":445,"column_start":12,"column_end":22},"name":"is_enabled","qualname":"<Pwm>::is_enabled","value":"pub fn is_enabled(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the PWM channel is enabled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the PWM channel is enabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156470,"byte_end":156519,"line_start":444,"line_end":444,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156666,"byte_end":156672,"line_start":450,"line_end":450,"column_start":12,"column_end":18},"name":"enable","qualname":"<Pwm>::enable","value":"pub fn enable(&Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables the PWM channel.\n","sig":null,"attributes":[{"value":"/ Enables the PWM channel.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156626,"byte_end":156654,"line_start":449,"line_end":449,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156819,"byte_end":156826,"line_start":457,"line_end":457,"column_start":12,"column_end":19},"name":"disable","qualname":"<Pwm>::disable","value":"pub fn disable(&Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Disables the PWM channel.\n","sig":null,"attributes":[{"value":"/ Disables the PWM channel.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156778,"byte_end":156807,"line_start":456,"line_end":456,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156986,"byte_end":156999,"line_start":464,"line_end":464,"column_start":12,"column_end":25},"name":"reset_on_drop","qualname":"<Pwm>::reset_on_drop","value":"pub fn reset_on_drop(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of `reset_on_drop`.\n","sig":null,"attributes":[{"value":"/ Returns the value of `reset_on_drop`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":156933,"byte_end":156974,"line_start":463,"line_end":463,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157556,"byte_end":157573,"line_start":478,"line_end":478,"column_start":12,"column_end":29},"name":"set_reset_on_drop","qualname":"<Pwm>::set_reset_on_drop","value":"pub fn set_reset_on_drop(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" When enabled, disables the PWM channel when the `Pwm` instance\n goes out of scope. By default, this is set to `true`.","sig":null,"attributes":[{"value":"/ When enabled, disables the PWM channel when the `Pwm` instance","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157055,"byte_end":157121,"line_start":468,"line_end":468,"column_start":5,"column_end":71}},{"value":"/ goes out of scope. By default, this is set to `true`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157126,"byte_end":157183,"line_start":469,"line_end":469,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157188,"byte_end":157191,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ## Note","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157196,"byte_end":157207,"line_start":471,"line_end":471,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157212,"byte_end":157215,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ Drop methods aren't called when a process is abnormally terminated, for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157220,"byte_end":157295,"line_start":473,"line_end":473,"column_start":5,"column_end":80}},{"value":"/ instance when a user presses <kbd>Ctrl</kbd> + <kbd>C</kbd>, and the `SIGINT` signal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157300,"byte_end":157388,"line_start":474,"line_end":474,"column_start":5,"column_end":93}},{"value":"/ isn't caught. You can catch those using crates such as [`simple_signal`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157393,"byte_end":157470,"line_start":475,"line_end":475,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157475,"byte_end":157478,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ [`simple_signal`]: https://crates.io/crates/simple-signal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157483,"byte_end":157544,"line_start":477,"line_end":477,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":1022},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::spi","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1139},{"krate":0,"index":1167},{"krate":0,"index":2418},{"krate":0,"index":2437},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1177},{"krate":0,"index":1179},{"krate":0,"index":2439},{"krate":0,"index":2461},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":1180},{"krate":0,"index":2472},{"krate":0,"index":2482},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2490},{"krate":0,"index":2491},{"krate":0,"index":1182},{"krate":0,"index":2493},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":1184},{"krate":0,"index":2511},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":1186},{"krate":0,"index":2535},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1209},{"krate":0,"index":1210}],"decl_id":null,"docs":" Interface for the main and auxiliary SPI peripherals.","sig":null,"attributes":[{"value":"/ Interface for the main and auxiliary SPI peripherals.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167014,"byte_end":167071,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167072,"byte_end":167075,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ RPPAL provides access to the available SPI buses by using the `spidev` device","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167076,"byte_end":167157,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/ interface through `/dev/spidevB.S`, where B refers to an SPI bus, and S to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167158,"byte_end":167236,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ a Slave Select pin. Which buses and pins are available depends on your","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167237,"byte_end":167311,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ Raspberry Pi model and configuration, as explained below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167312,"byte_end":167373,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167374,"byte_end":167377,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ## SPI buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167378,"byte_end":167394,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167395,"byte_end":167398,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The Raspberry Pi's GPIO header exposes several SPI buses. SPI0 is available","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167399,"byte_end":167478,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ on all Raspberry Pi models. SPI1 is available on models with a 40-pin","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167479,"byte_end":167552,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ header. SPI2 is only available on the Compute and Compute 3. SPI3 through SPI6","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167553,"byte_end":167635,"line_start":32,"line_end":32,"column_start":1,"column_end":83}},{"value":"/ are only available on the Raspberry Pi 4 B.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167636,"byte_end":167683,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167684,"byte_end":167687,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ### SPI0","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167688,"byte_end":167700,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167701,"byte_end":167704,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ SPI0 is disabled by default. You can enable it by running","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167705,"byte_end":167766,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/ `sudo raspi-config`, or by manually adding `dtparam=spi=on` to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167767,"byte_end":167833,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/ `/boot/config.txt`. The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167834,"byte_end":167895,"line_start":39,"line_end":39,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167896,"byte_end":167899,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 9 (physical pin 21)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167900,"byte_end":167940,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ * MOSI: BCM GPIO 10 (physical pin 19)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167941,"byte_end":167982,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/ * SCLK: BCM GPIO 11 (physical pin 23)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":167983,"byte_end":168024,"line_start":43,"line_end":43,"column_start":1,"column_end":42}},{"value":"/ * SS: [`Ss0`] BCM GPIO 8 (physical pin 24), [`Ss1`] BCM GPIO 7 (physical pin 26)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168025,"byte_end":168109,"line_start":44,"line_end":44,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168110,"byte_end":168113,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ### SPI1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168114,"byte_end":168126,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168127,"byte_end":168130,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ SPI1 is an auxiliary peripheral that's referred to as mini SPI. According","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168131,"byte_end":168208,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ to the BCM2835 documentation, using higher clock speeds on SPI1 requires","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168209,"byte_end":168285,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/ additional CPU time compared to SPI0, caused by smaller FIFOs and no DMA","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168286,"byte_end":168362,"line_start":50,"line_end":50,"column_start":1,"column_end":77}},{"value":"/ support. It doesn't support [`Mode1`] or [`Mode3`]. SPI1 can be enabled by","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168363,"byte_end":168441,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ adding `dtoverlay=spi1-1cs` to `/boot/config.txt`. Replace `1cs` with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168442,"byte_end":168515,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ either `2cs` or `3cs` if you require 2 or 3 Slave Select pins.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168516,"byte_end":168582,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168583,"byte_end":168624,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168625,"byte_end":168628,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 19 (physical pin 35)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168629,"byte_end":168670,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ * MOSI: BCM GPIO 20 (physical pin 38)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168671,"byte_end":168712,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/ * SCLK: BCM GPIO 21 (physical pin 40)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168713,"byte_end":168754,"line_start":58,"line_end":58,"column_start":1,"column_end":42}},{"value":"/ * SS: [`Ss0`] BCM GPIO 18 (physical pin 12), [`Ss1`] BCM GPIO 17 (physical pin 11), [`Ss2`] BCM GPIO 16 (physical pin 36)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168755,"byte_end":168880,"line_start":59,"line_end":59,"column_start":1,"column_end":126}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168881,"byte_end":168884,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ### SPI2","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168885,"byte_end":168897,"line_start":61,"line_end":61,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168898,"byte_end":168901,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ SPI2 shares the same characteristics and limitations as SPI1. It can be","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168902,"byte_end":168977,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ enabled by adding `dtoverlay=spi2-1cs` to `/boot/config.txt`. Replace","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":168978,"byte_end":169051,"line_start":64,"line_end":64,"column_start":1,"column_end":74}},{"value":"/ `1cs` with either `2cs` or `3cs` if you require 2 or 3 Slave Select","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169052,"byte_end":169123,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/ pins. The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169124,"byte_end":169171,"line_start":66,"line_end":66,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169172,"byte_end":169175,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 40","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169176,"byte_end":169199,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/ * MOSI: BCM GPIO 41","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169200,"byte_end":169223,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ * SCLK: BCM GPIO 42","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169224,"byte_end":169247,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/ * SS: [`Ss0`] BCM GPIO 43, [`Ss1`] BCM GPIO 44, [`Ss2`] BCM GPIO 45","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169248,"byte_end":169319,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169320,"byte_end":169323,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ### SPI3","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169324,"byte_end":169336,"line_start":73,"line_end":73,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169337,"byte_end":169340,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ SPI3 can be enabled by adding `dtoverlay=spi3-1cs` to `/boot/config.txt`. Replace","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169341,"byte_end":169426,"line_start":75,"line_end":75,"column_start":1,"column_end":86}},{"value":"/ `1cs` with `2cs` if you require 2 Slave Select pins. The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169427,"byte_end":169521,"line_start":76,"line_end":76,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169522,"byte_end":169525,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 1 (physical pin 28)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169526,"byte_end":169566,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ * MOSI: BCM GPIO 2 (physical pin 3)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169567,"byte_end":169606,"line_start":79,"line_end":79,"column_start":1,"column_end":40}},{"value":"/ * SCLK: BCM GPIO 3 (physical pin 5)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169607,"byte_end":169646,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ * SS: [`Ss0`] BCM GPIO 0 (physical pin 27), [`Ss1`] BCM GPIO 24 (physical pin 18)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169647,"byte_end":169732,"line_start":81,"line_end":81,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169733,"byte_end":169736,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ### SPI4","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169737,"byte_end":169749,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169750,"byte_end":169753,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ SPI4 can be enabled by adding `dtoverlay=spi4-1cs` to `/boot/config.txt`. Replace","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169754,"byte_end":169839,"line_start":85,"line_end":85,"column_start":1,"column_end":86}},{"value":"/ `1cs` with `2cs` if you require 2 Slave Select pins. The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169840,"byte_end":169934,"line_start":86,"line_end":86,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169935,"byte_end":169938,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 5 (physical pin 29)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169939,"byte_end":169979,"line_start":88,"line_end":88,"column_start":1,"column_end":41}},{"value":"/ * MOSI: BCM GPIO 6 (physical pin 31)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":169980,"byte_end":170020,"line_start":89,"line_end":89,"column_start":1,"column_end":41}},{"value":"/ * SCLK: BCM GPIO 7 (physical pin 26)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170021,"byte_end":170061,"line_start":90,"line_end":90,"column_start":1,"column_end":41}},{"value":"/ * SS: [`Ss0`] BCM GPIO 4 (physical pin 7), [`Ss1`] BCM GPIO 25 (physical pin 22)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170062,"byte_end":170146,"line_start":91,"line_end":91,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170147,"byte_end":170150,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ ### SPI5","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170151,"byte_end":170163,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170164,"byte_end":170167,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ SPI5 can be enabled by adding `dtoverlay=spi5-1cs` to `/boot/config.txt`. Replace","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170168,"byte_end":170253,"line_start":95,"line_end":95,"column_start":1,"column_end":86}},{"value":"/ `1cs` with `2cs` if you require 2 Slave Select pins. The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170254,"byte_end":170348,"line_start":96,"line_end":96,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170349,"byte_end":170352,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 13 (physical pin 33)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170353,"byte_end":170394,"line_start":98,"line_end":98,"column_start":1,"column_end":42}},{"value":"/ * MOSI: BCM GPIO 14 (physical pin 8)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170395,"byte_end":170435,"line_start":99,"line_end":99,"column_start":1,"column_end":41}},{"value":"/ * SCLK: BCM GPIO 15 (physical pin 10)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170436,"byte_end":170477,"line_start":100,"line_end":100,"column_start":1,"column_end":42}},{"value":"/ * SS: [`Ss0`] BCM GPIO 12 (physical pin 32), [`Ss1`] BCM GPIO 26 (physical pin 37)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170478,"byte_end":170564,"line_start":101,"line_end":101,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170565,"byte_end":170568,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### SPI6","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170569,"byte_end":170581,"line_start":103,"line_end":103,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170582,"byte_end":170585,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ SPI6 can be enabled by adding `dtoverlay=spi6-1cs` to `/boot/config.txt`. Replace","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170586,"byte_end":170671,"line_start":105,"line_end":105,"column_start":1,"column_end":86}},{"value":"/ `1cs` with `2cs` if you require 2 Slave Select pins. The associated pins are listed below.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170672,"byte_end":170766,"line_start":106,"line_end":106,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170767,"byte_end":170770,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ * MISO: BCM GPIO 19 (physical pin 35)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170771,"byte_end":170812,"line_start":108,"line_end":108,"column_start":1,"column_end":42}},{"value":"/ * MOSI: BCM GPIO 20 (physical pin 38)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170813,"byte_end":170854,"line_start":109,"line_end":109,"column_start":1,"column_end":42}},{"value":"/ * SCLK: BCM GPIO 21 (physical pin 40)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170855,"byte_end":170896,"line_start":110,"line_end":110,"column_start":1,"column_end":42}},{"value":"/ * SS: [`Ss0`] BCM GPIO 18 (physical pin 12), [`Ss1`] BCM GPIO 27 (physical pin 13)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170897,"byte_end":170983,"line_start":111,"line_end":111,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170984,"byte_end":170987,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ SPI6 is tied to the same GPIO pins as SPI1. It's not possible to enable both","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":170988,"byte_end":171068,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/ buses at the same time.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171069,"byte_end":171096,"line_start":114,"line_end":114,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171097,"byte_end":171100,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ### Alternative pins","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171101,"byte_end":171125,"line_start":116,"line_end":116,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171126,"byte_end":171129,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The GPIO pin numbers mentioned above are part of the default configuration.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171130,"byte_end":171209,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/ Some of their functionality can be moved to different pins. Read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171210,"byte_end":171278,"line_start":119,"line_end":119,"column_start":1,"column_end":69}},{"value":"/ `/boot/overlays/README` for more information.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171279,"byte_end":171328,"line_start":120,"line_end":120,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171329,"byte_end":171332,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ## Buffer size limits","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171333,"byte_end":171358,"line_start":122,"line_end":122,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171359,"byte_end":171362,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ By default, `spidev` can handle up to 4096 bytes in a single transfer. You","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171363,"byte_end":171441,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/ can increase this limit to a maximum of 65536 bytes by appending","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171442,"byte_end":171510,"line_start":125,"line_end":125,"column_start":1,"column_end":69}},{"value":"/ `spidev.bufsiz=65536` to the single line of parameters in `/boot/cmdline.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171511,"byte_end":171593,"line_start":126,"line_end":126,"column_start":1,"column_end":83}},{"value":"/ Remember to reboot the Raspberry Pi afterwards. The current value of bufsiz","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171594,"byte_end":171673,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ can be checked with `cat /sys/module/spidev/parameters/bufsiz`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171674,"byte_end":171741,"line_start":128,"line_end":128,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171742,"byte_end":171745,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ## Not supported","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171746,"byte_end":171766,"line_start":130,"line_end":130,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171767,"byte_end":171770,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Some features exposed by the generic `spidev` interface aren't fully","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171771,"byte_end":171843,"line_start":132,"line_end":132,"column_start":1,"column_end":73}},{"value":"/ supported by the underlying driver or the BCM283x SoC: `SPI_LSB_FIRST` (LSB","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171844,"byte_end":171923,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ first bit order), `SPI_3WIRE` (bidirectional mode), `SPI_LOOP` (loopback mode),","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":171924,"byte_end":172007,"line_start":134,"line_end":134,"column_start":1,"column_end":84}},{"value":"/ `SPI_NO_CS` (no Slave Select), `SPI_READY` (slave ready signal),","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172008,"byte_end":172076,"line_start":135,"line_end":135,"column_start":1,"column_end":69}},{"value":"/ `SPI_TX_DUAL`/`SPI_RX_DUAL` (dual SPI), `SPI_TX_QUAD`/`SPI_RX_QUAD` (quad SPI),","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172077,"byte_end":172160,"line_start":136,"line_end":136,"column_start":1,"column_end":84}},{"value":"/ and any number of bits per word other than 8.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172161,"byte_end":172210,"line_start":137,"line_end":137,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172211,"byte_end":172214,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ If your slave device requires `SPI_LSB_FIRST`, you can use the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172215,"byte_end":172281,"line_start":139,"line_end":139,"column_start":1,"column_end":67}},{"value":"/ [`reverse_bits`] function instead to reverse the bit order in software.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172282,"byte_end":172357,"line_start":140,"line_end":140,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172358,"byte_end":172361,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ `SPI_LOOP` mode can be achieved by connecting the MOSI and MISO pins","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172362,"byte_end":172434,"line_start":142,"line_end":142,"column_start":1,"column_end":73}},{"value":"/ together.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172435,"byte_end":172448,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172449,"byte_end":172452,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ `SPI_NO_CS` can be implemented by connecting the Slave Select pin on your","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172453,"byte_end":172530,"line_start":145,"line_end":145,"column_start":1,"column_end":78}},{"value":"/ slave device to any other available GPIO pin on the Pi, and manually","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172531,"byte_end":172603,"line_start":146,"line_end":146,"column_start":1,"column_end":73}},{"value":"/ changing it to high and low as needed.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172604,"byte_end":172646,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172647,"byte_end":172650,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ [`Ss0`]: enum.SlaveSelect.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172651,"byte_end":172685,"line_start":149,"line_end":149,"column_start":1,"column_end":35}},{"value":"/ [`Ss1`]: enum.SlaveSelect.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172686,"byte_end":172720,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/ [`Ss2`]: enum.SlaveSelect.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172721,"byte_end":172755,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/ [`Mode1`]: enum.Mode.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172756,"byte_end":172785,"line_start":152,"line_end":152,"column_start":1,"column_end":30}},{"value":"/ [`Mode3`]: enum.Mode.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172786,"byte_end":172815,"line_start":153,"line_end":153,"column_start":1,"column_end":30}},{"value":"/ [`reverse_bits`]: fn.reverse_bits.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":172816,"byte_end":172858,"line_start":154,"line_end":154,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2381},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200591,"byte_end":200598,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"Segment","qualname":"::spi::segment::Segment","value":"Segment {  }","parent":null,"children":[{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395}],"decl_id":null,"docs":" Part of a multi-segment transfer.","sig":null,"attributes":[{"value":"/ Part of a multi-segment transfer.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":199969,"byte_end":200006,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200007,"byte_end":200010,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ `Segment`s are transferred using the [`Spi::transfer_segments`] method.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200011,"byte_end":200086,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200087,"byte_end":200090,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Construct a new `Segment` for a simultaneous (full-duplex) read/write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200091,"byte_end":200164,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ transfer using [`new`]. For read operations without any outgoing data,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200165,"byte_end":200239,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ use [`with_read`]. For write operations where any incoming data","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200240,"byte_end":200307,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/ should be discarded, use [`with_write`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200308,"byte_end":200352,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200353,"byte_end":200356,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`Spi::transfer_segments`]: struct.Spi.html#method.transfer_segments","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200357,"byte_end":200429,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ [`with_read`]: #method.with_read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200430,"byte_end":200466,"line_start":34,"line_end":34,"column_start":1,"column_end":37}},{"value":"/ [`with_write`]: #method.with_write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200467,"byte_end":200505,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/ [`new`]: #method.new","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200506,"byte_end":200530,"line_start":36,"line_end":36,"column_start":1,"column_end":25}},{"value":"repr(C)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":200569,"byte_end":200579,"line_start":38,"line_end":38,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202624,"byte_end":202627,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Segment>::new","value":"pub fn new(&'a mut [u8], &'b [u8]) -> Segment","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Segment` with the default settings, and configures it\n for a simultaneous (full-duplex) read/write transfer.","sig":null,"attributes":[{"value":"/ Constructs a new `Segment` with the default settings, and configures it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":201866,"byte_end":201941,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ for a simultaneous (full-duplex) read/write transfer.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":201946,"byte_end":202003,"line_start":68,"line_end":68,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202008,"byte_end":202011,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ For `Segment`s that only require either a read or write operation, call","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202016,"byte_end":202091,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ [`with_read`] or [`with_write`] instead of `new`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202096,"byte_end":202149,"line_start":71,"line_end":71,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202154,"byte_end":202157,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ [`Spi::transfer_segments`] will only transfer as many bytes as the shortest of","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202162,"byte_end":202244,"line_start":73,"line_end":73,"column_start":5,"column_end":87}},{"value":"/ the two buffers contains.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202249,"byte_end":202278,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202283,"byte_end":202286,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ By default, all customizable settings are set to 0, which means it uses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202291,"byte_end":202366,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ the same values as set for [`Spi`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202371,"byte_end":202410,"line_start":77,"line_end":77,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202415,"byte_end":202418,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ [`Spi::transfer_segments`]: struct.Spi.html#method.transfer_segments","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202423,"byte_end":202495,"line_start":79,"line_end":79,"column_start":5,"column_end":77}},{"value":"/ [`Spi`]: struct.Spi.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202500,"byte_end":202528,"line_start":80,"line_end":80,"column_start":5,"column_end":33}},{"value":"/ [`with_read`]: #method.with_read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202533,"byte_end":202569,"line_start":81,"line_end":81,"column_start":5,"column_end":41}},{"value":"/ [`with_write`]: #method.with_write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202574,"byte_end":202612,"line_start":82,"line_end":82,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203292,"byte_end":203301,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"with_read","qualname":"<Segment>::with_read","value":"pub fn with_read(&mut [u8]) -> Segment","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Segment` with the default settings, and configures it\n for a read operation.","sig":null,"attributes":[{"value":"/ Constructs a new `Segment` with the default settings, and configures it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202797,"byte_end":202872,"line_start":87,"line_end":87,"column_start":5,"column_end":80}},{"value":"/ for a read operation.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202877,"byte_end":202902,"line_start":88,"line_end":88,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202907,"byte_end":202910,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Incoming data from the slave device is written to `buffer`. The total","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202915,"byte_end":202988,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/ number of bytes read depends on the length of `buffer`. A zero-value","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":202993,"byte_end":203065,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ byte is sent for every byte read.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203070,"byte_end":203107,"line_start":92,"line_end":92,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203112,"byte_end":203115,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ By default, all customizable settings are set to 0, which means it uses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203120,"byte_end":203195,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ the same values as set for [`Spi`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203200,"byte_end":203239,"line_start":95,"line_end":95,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203244,"byte_end":203247,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ [`Spi`]: struct.Spi.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203252,"byte_end":203280,"line_start":97,"line_end":97,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203824,"byte_end":203834,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"with_write","qualname":"<Segment>::with_write","value":"pub fn with_write(&[u8]) -> Segment","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Segment` with the default settings, and configures it\n for a write operation.","sig":null,"attributes":[{"value":"/ Constructs a new `Segment` with the default settings, and configures it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203420,"byte_end":203495,"line_start":102,"line_end":102,"column_start":5,"column_end":80}},{"value":"/ for a write operation.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203500,"byte_end":203526,"line_start":103,"line_end":103,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203531,"byte_end":203534,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Outgoing data from `buffer` is sent to the slave device. Any","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203539,"byte_end":203603,"line_start":105,"line_end":105,"column_start":5,"column_end":69}},{"value":"/ incoming data is discarded.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203608,"byte_end":203639,"line_start":106,"line_end":106,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203644,"byte_end":203647,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ By default, all customizable settings are set to 0, which means it uses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203652,"byte_end":203727,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ the same values as set for [`Spi`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203732,"byte_end":203771,"line_start":109,"line_end":109,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203776,"byte_end":203779,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ [`Spi`]: struct.Spi.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203784,"byte_end":203812,"line_start":111,"line_end":111,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":205032,"byte_end":205045,"line_start":139,"line_end":139,"column_start":12,"column_end":25},"name":"with_settings","qualname":"<Segment>::with_settings","value":"pub fn with_settings(Option<&'a mut [u8]>, Option<&'b [u8]>, u32, u16, u8,\n                     bool) -> Segment","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Segment` with the specified settings.","sig":null,"attributes":[{"value":"/ Constructs a new `Segment` with the specified settings.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":203949,"byte_end":204008,"line_start":116,"line_end":116,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204013,"byte_end":204016,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ These settings override the values set for [`Spi`], and are only used","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204021,"byte_end":204094,"line_start":118,"line_end":118,"column_start":5,"column_end":78}},{"value":"/ for this specific segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204099,"byte_end":204129,"line_start":119,"line_end":119,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204134,"byte_end":204137,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ If `read_buffer` is set to `None`, any incoming data is discarded.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204142,"byte_end":204212,"line_start":121,"line_end":121,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204217,"byte_end":204220,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If `write_buffer` is set to `None`, a zero-value byte is sent for every","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204225,"byte_end":204300,"line_start":123,"line_end":123,"column_start":5,"column_end":80}},{"value":"/ byte read.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204305,"byte_end":204319,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204324,"byte_end":204327,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ If both `read_buffer` and `write_buffer` are specified, [`Spi::transfer_segments`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204332,"byte_end":204418,"line_start":126,"line_end":126,"column_start":5,"column_end":91}},{"value":"/ will only transfer as many bytes as the shortest of the two buffers contains.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204423,"byte_end":204504,"line_start":127,"line_end":127,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204509,"byte_end":204512,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ `clock_speed` sets a custom clock speed in hertz (Hz).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204517,"byte_end":204575,"line_start":129,"line_end":129,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204580,"byte_end":204583,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ `delay` sets a delay in microseconds (µs).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204588,"byte_end":204635,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204640,"byte_end":204643,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ `bits_per_word` sets the number of bits per word. The Raspberry Pi currently only supports 8 bits per word.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204648,"byte_end":204759,"line_start":133,"line_end":133,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204764,"byte_end":204767,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ `ss_change` changes how Slave Select behaves in between two segments (toggle SS), or after the final segment (keep SS active).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204772,"byte_end":204902,"line_start":135,"line_end":135,"column_start":5,"column_end":135}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204907,"byte_end":204910,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ [`Spi::transfer_segments`]: struct.Spi.html#method.transfer_segments","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204915,"byte_end":204987,"line_start":137,"line_end":137,"column_start":5,"column_end":77}},{"value":"/ [`Spi`]: struct.Spi.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":204992,"byte_end":205020,"line_start":138,"line_end":138,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206543,"byte_end":206546,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"len","qualname":"<Segment>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that will be transferred.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that will be transferred.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206203,"byte_end":206260,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206265,"byte_end":206268,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ If both a read buffer and write buffer are supplied,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206273,"byte_end":206329,"line_start":184,"line_end":184,"column_start":5,"column_end":61}},{"value":"/ [`Spi::transfer_segments`] only transfers as many bytes as the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206334,"byte_end":206400,"line_start":185,"line_end":185,"column_start":5,"column_end":71}},{"value":"/ shortest of the two buffers contains.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206405,"byte_end":206446,"line_start":186,"line_end":186,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206451,"byte_end":206454,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ [`Spi::transfer_segments`]: struct.Spi.html#method.transfer_segments","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206459,"byte_end":206531,"line_start":188,"line_end":188,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206674,"byte_end":206682,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Segment>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this segment won't transfer any bytes.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this segment won't transfer any bytes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206602,"byte_end":206662,"line_start":193,"line_end":193,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206808,"byte_end":206819,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"clock_speed","qualname":"<Segment>::clock_speed","value":"pub fn clock_speed(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Gets the custom clock speed in hertz (Hz) for this segment.\n","sig":null,"attributes":[{"value":"/ Gets the custom clock speed in hertz (Hz) for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206733,"byte_end":206796,"line_start":198,"line_end":198,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207200,"byte_end":207215,"line_start":211,"line_end":211,"column_start":12,"column_end":27},"name":"set_clock_speed","qualname":"<Segment>::set_clock_speed","value":"pub fn set_clock_speed(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Sets a custom clock speed in hertz (Hz) for this segment.","sig":null,"attributes":[{"value":"/ Sets a custom clock speed in hertz (Hz) for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206869,"byte_end":206930,"line_start":203,"line_end":203,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206935,"byte_end":206938,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The SPI driver will automatically select the closest valid frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":206943,"byte_end":207016,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207021,"byte_end":207024,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ By default, `clock_speed` is set to `0`, which means","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207029,"byte_end":207085,"line_start":207,"line_end":207,"column_start":5,"column_end":61}},{"value":"/ it will use the same value as configured for [`Spi`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207090,"byte_end":207147,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207152,"byte_end":207155,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ [`Spi`]: struct.Spi.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207160,"byte_end":207188,"line_start":210,"line_end":210,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207365,"byte_end":207370,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"delay","qualname":"<Segment>::delay","value":"pub fn delay(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Gets the delay in microseconds (µs) for this segment.\n","sig":null,"attributes":[{"value":"/ Gets the delay in microseconds (µs) for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207295,"byte_end":207353,"line_start":215,"line_end":215,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207662,"byte_end":207671,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"set_delay","qualname":"<Segment>::set_delay","value":"pub fn set_delay(&mut Self, u16)","parent":null,"children":[],"decl_id":null,"docs":" Sets a delay in microseconds (µs) for this segment.","sig":null,"attributes":[{"value":"/ Sets a delay in microseconds (µs) for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207423,"byte_end":207479,"line_start":220,"line_end":220,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207484,"byte_end":207487,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ `set_delay` adds a delay at the end of this segment,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207492,"byte_end":207548,"line_start":222,"line_end":222,"column_start":5,"column_end":61}},{"value":"/ before the (optional) Slave Select change.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207553,"byte_end":207599,"line_start":223,"line_end":223,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207604,"byte_end":207607,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ By default, `delay` is set to `0`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207612,"byte_end":207650,"line_start":225,"line_end":225,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207808,"byte_end":207821,"line_start":231,"line_end":231,"column_start":12,"column_end":25},"name":"bits_per_word","qualname":"<Segment>::bits_per_word","value":"pub fn bits_per_word(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of bits per word for this segment.\n","sig":null,"attributes":[{"value":"/ Gets the number of bits per word for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207742,"byte_end":207796,"line_start":230,"line_end":230,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208185,"byte_end":208202,"line_start":243,"line_end":243,"column_start":12,"column_end":29},"name":"set_bits_per_word","qualname":"<Segment>::set_bits_per_word","value":"pub fn set_bits_per_word(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bits per word for this segment.","sig":null,"attributes":[{"value":"/ Sets the number of bits per word for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207875,"byte_end":207929,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207934,"byte_end":207937,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi currently only supports 8 bit words.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":207942,"byte_end":207999,"line_start":237,"line_end":237,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208004,"byte_end":208007,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ By default, `bits_per_word` is set to `0`, which means","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208012,"byte_end":208070,"line_start":239,"line_end":239,"column_start":5,"column_end":63}},{"value":"/ it will use the same value as configured for [`Spi`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208075,"byte_end":208132,"line_start":240,"line_end":240,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208137,"byte_end":208140,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ [`Spi`]: struct.Spi.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208145,"byte_end":208173,"line_start":242,"line_end":242,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208361,"byte_end":208370,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"ss_change","qualname":"<Segment>::ss_change","value":"pub fn ss_change(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets the state of Slave Select change for this segment.\n","sig":null,"attributes":[{"value":"/ Gets the state of Slave Select change for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208290,"byte_end":208349,"line_start":247,"line_end":247,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208883,"byte_end":208896,"line_start":261,"line_end":261,"column_start":12,"column_end":25},"name":"set_ss_change","qualname":"<Segment>::set_ss_change","value":"pub fn set_ss_change(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Changes Slave Select's behavior for this segment.","sig":null,"attributes":[{"value":"/ Changes Slave Select's behavior for this segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208427,"byte_end":208480,"line_start":252,"line_end":252,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208485,"byte_end":208488,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ If `ss_change` is set to `true`, and this is not the last","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208493,"byte_end":208554,"line_start":254,"line_end":254,"column_start":5,"column_end":66}},{"value":"/ segment of the transfer, the Slave Select line will briefly","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208559,"byte_end":208622,"line_start":255,"line_end":255,"column_start":5,"column_end":68}},{"value":"/ change to inactive between this segment and the next.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208627,"byte_end":208684,"line_start":256,"line_end":256,"column_start":5,"column_end":62}},{"value":"/ If this is the last segment, setting `ss_change` to true will","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208689,"byte_end":208754,"line_start":257,"line_end":257,"column_start":5,"column_end":70}},{"value":"/ keep Slave Select active after the transfer ends.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208759,"byte_end":208812,"line_start":258,"line_end":258,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208817,"byte_end":208820,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ By default, `ss_change` is set to `false`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":208825,"byte_end":208871,"line_start":260,"line_end":260,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2419},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173254,"byte_end":173256,"line_start":176,"line_end":176,"column_start":5,"column_end":7},"name":"Io","qualname":"::spi::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" I/O error.\n","sig":null,"attributes":[{"value":"/ I/O error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173235,"byte_end":173249,"line_start":175,"line_end":175,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2422},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173456,"byte_end":173479,"line_start":181,"line_end":181,"column_start":5,"column_end":28},"name":"BitsPerWordNotSupported","qualname":"::spi::Error::BitsPerWordNotSupported","value":"Error::BitsPerWordNotSupported(u8)","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" The specified number of bits per word is not supported.","sig":null,"attributes":[{"value":"/ The specified number of bits per word is not supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173273,"byte_end":173332,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173337,"byte_end":173340,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi currently only supports 8 bit words. Any other value","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173345,"byte_end":173418,"line_start":179,"line_end":179,"column_start":5,"column_end":78}},{"value":"/ will trigger this error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173423,"byte_end":173451,"line_start":180,"line_end":180,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2425},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174045,"byte_end":174065,"line_start":193,"line_end":193,"column_start":5,"column_end":25},"name":"BitOrderNotSupported","qualname":"::spi::Error::BitOrderNotSupported","value":"Error::BitOrderNotSupported(BitOrder)","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" The specified bit order is not supported.","sig":null,"attributes":[{"value":"/ The specified bit order is not supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173489,"byte_end":173534,"line_start":182,"line_end":182,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173539,"byte_end":173542,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi currently only supports the [`MsbFirst`] bit order. If you","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173547,"byte_end":173626,"line_start":184,"line_end":184,"column_start":5,"column_end":84}},{"value":"/ need the [`LsbFirst`] bit order, you can use the [`reverse_bits`] function","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173631,"byte_end":173709,"line_start":185,"line_end":185,"column_start":5,"column_end":83}},{"value":"/ instead to reverse the bit order in software by converting your write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173714,"byte_end":173787,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ buffer before sending it to the slave device, and your read buffer after","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173792,"byte_end":173868,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ reading any incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173873,"byte_end":173903,"line_start":188,"line_end":188,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173908,"byte_end":173911,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ [`MsbFirst`]: enum.BitOrder.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173916,"byte_end":173952,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/ [`LsbFirst`]: enum.BitOrder.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173957,"byte_end":173993,"line_start":191,"line_end":191,"column_start":5,"column_end":41}},{"value":"/ [`reverse_bits`]: fn.reverse_bits.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173998,"byte_end":174040,"line_start":192,"line_end":192,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2428},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174133,"byte_end":174155,"line_start":195,"line_end":195,"column_start":5,"column_end":27},"name":"ClockSpeedNotSupported","qualname":"::spi::Error::ClockSpeedNotSupported","value":"Error::ClockSpeedNotSupported(u32)","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" The specified clock speed is not supported.\n","sig":null,"attributes":[{"value":"/ The specified clock speed is not supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174081,"byte_end":174128,"line_start":194,"line_end":194,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2431},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174211,"byte_end":174227,"line_start":197,"line_end":197,"column_start":5,"column_end":21},"name":"ModeNotSupported","qualname":"::spi::Error::ModeNotSupported","value":"Error::ModeNotSupported(Mode)","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" The specified mode is not supported.\n","sig":null,"attributes":[{"value":"/ The specified mode is not supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174166,"byte_end":174206,"line_start":196,"line_end":196,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174301,"byte_end":174321,"line_start":199,"line_end":199,"column_start":5,"column_end":25},"name":"PolarityNotSupported","qualname":"::spi::Error::PolarityNotSupported","value":"Error::PolarityNotSupported(Polarity)","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" The specified Slave Select polarity is not supported.\n","sig":null,"attributes":[{"value":"/ The specified Slave Select polarity is not supported.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174239,"byte_end":174296,"line_start":198,"line_end":198,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":2418},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173223,"byte_end":173228,"line_start":174,"line_end":174,"column_start":10,"column_end":15},"name":"Error","qualname":"::spi::Error","value":"pub enum Error {\n    Io(io::Error),\n    BitsPerWordNotSupported(u8),\n    BitOrderNotSupported(BitOrder),\n    ClockSpeedNotSupported(u32),\n    ModeNotSupported(Mode),\n    PolarityNotSupported(Polarity),\n}","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2422},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2434}],"decl_id":null,"docs":" Errors that can occur when accessing the SPI peripheral.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when accessing the SPI peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":173136,"byte_end":173196,"line_start":172,"line_end":172,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":1175},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":175445,"byte_end":175451,"line_start":232,"line_end":232,"column_start":10,"column_end":16},"name":"Result","qualname":"::spi::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type returned from methods that can have `spi::Error`s.\n","sig":null,"attributes":[{"value":"/ Result type returned from methods that can have `spi::Error`s.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":175369,"byte_end":175435,"line_start":231,"line_end":231,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":1179},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177324,"byte_end":177336,"line_start":258,"line_end":258,"column_start":8,"column_end":20},"name":"reverse_bits","qualname":"::spi::reverse_bits","value":"pub fn reverse_bits(&mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Reverses the bits of each byte in `buffer`.","sig":null,"attributes":[{"value":"/ Reverses the bits of each byte in `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177129,"byte_end":177176,"line_start":253,"line_end":253,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177177,"byte_end":177180,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ Use this function to switch the bit order between most-significant bit first","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177181,"byte_end":177261,"line_start":255,"line_end":255,"column_start":1,"column_end":81}},{"value":"/ and least-significant bit first.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177262,"byte_end":177298,"line_start":256,"line_end":256,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177299,"byte_end":177316,"line_start":257,"line_end":257,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2440},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177714,"byte_end":177718,"line_start":272,"line_end":272,"column_start":5,"column_end":9},"name":"Spi0","qualname":"::spi::Bus::Spi0","value":"Bus::Spi0","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2443},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177728,"byte_end":177732,"line_start":273,"line_end":273,"column_start":5,"column_end":9},"name":"Spi1","qualname":"::spi::Bus::Spi1","value":"Bus::Spi1","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2446},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177742,"byte_end":177746,"line_start":274,"line_end":274,"column_start":5,"column_end":9},"name":"Spi2","qualname":"::spi::Bus::Spi2","value":"Bus::Spi2","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2449},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177756,"byte_end":177760,"line_start":275,"line_end":275,"column_start":5,"column_end":9},"name":"Spi3","qualname":"::spi::Bus::Spi3","value":"Bus::Spi3","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2452},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177770,"byte_end":177774,"line_start":276,"line_end":276,"column_start":5,"column_end":9},"name":"Spi4","qualname":"::spi::Bus::Spi4","value":"Bus::Spi4","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2455},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177784,"byte_end":177788,"line_start":277,"line_end":277,"column_start":5,"column_end":9},"name":"Spi5","qualname":"::spi::Bus::Spi5","value":"Bus::Spi5","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2458},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177798,"byte_end":177802,"line_start":278,"line_end":278,"column_start":5,"column_end":9},"name":"Spi6","qualname":"::spi::Bus::Spi6","value":"Bus::Spi6","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2439},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177704,"byte_end":177707,"line_start":271,"line_end":271,"column_start":10,"column_end":13},"name":"Bus","qualname":"::spi::Bus","value":"pub enum Bus {\n    Spi0 = ,\n    Spi1 = ,\n    Spi2 = ,\n    Spi3 = ,\n    Spi4 = ,\n    Spi5 = ,\n    Spi6 = ,\n}","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2458}],"decl_id":null,"docs":" SPI buses.","sig":null,"attributes":[{"value":"/ SPI buses.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177445,"byte_end":177459,"line_start":264,"line_end":264,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177460,"byte_end":177463,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ The Raspberry Pi exposes up to five SPI buses, depending on the model and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177464,"byte_end":177541,"line_start":266,"line_end":266,"column_start":1,"column_end":78}},{"value":"/ your `/boot/config.txt` configuration. More information can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177542,"byte_end":177622,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177623,"byte_end":177626,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ [here]: index.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177627,"byte_end":177649,"line_start":269,"line_end":269,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2473},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178992,"byte_end":178995,"line_start":311,"line_end":311,"column_start":5,"column_end":8},"name":"Ss0","qualname":"::spi::SlaveSelect::Ss0","value":"SlaveSelect::Ss0","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2476},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179005,"byte_end":179008,"line_start":312,"line_end":312,"column_start":5,"column_end":8},"name":"Ss1","qualname":"::spi::SlaveSelect::Ss1","value":"SlaveSelect::Ss1","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2479},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179018,"byte_end":179021,"line_start":313,"line_end":313,"column_start":5,"column_end":8},"name":"Ss2","qualname":"::spi::SlaveSelect::Ss2","value":"SlaveSelect::Ss2","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2472},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178974,"byte_end":178985,"line_start":310,"line_end":310,"column_start":10,"column_end":21},"name":"SlaveSelect","qualname":"::spi::SlaveSelect","value":"pub enum SlaveSelect { Ss0 = , Ss1 = , Ss2 = , }","parent":null,"children":[{"krate":0,"index":2473},{"krate":0,"index":2476},{"krate":0,"index":2479}],"decl_id":null,"docs":" Slave Select pins.","sig":null,"attributes":[{"value":"/ Slave Select pins.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178251,"byte_end":178273,"line_start":295,"line_end":295,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178274,"byte_end":178277,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Slave Select is used to signal which slave device should pay attention to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178278,"byte_end":178355,"line_start":297,"line_end":297,"column_start":1,"column_end":78}},{"value":"/ the SPI bus. Slave Select (SS) is the more commonly used name, but","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178356,"byte_end":178426,"line_start":298,"line_end":298,"column_start":1,"column_end":71}},{"value":"/ it's also known as Chip Select (CS) or Chip Enable (CE). Throughout the Raspberry","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178427,"byte_end":178512,"line_start":299,"line_end":299,"column_start":1,"column_end":86}},{"value":"/ Pi's documentation, config files and BCM2835 datasheet, multiple different names","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178513,"byte_end":178597,"line_start":300,"line_end":300,"column_start":1,"column_end":85}},{"value":"/ are used. Any pins referred to as CE0, CE1, and CE2 or CS0, CS1, and CS2 are equivalent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178598,"byte_end":178689,"line_start":301,"line_end":301,"column_start":1,"column_end":92}},{"value":"/ to `Ss0`, `Ss1`, and `Ss2`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178690,"byte_end":178721,"line_start":302,"line_end":302,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178722,"byte_end":178725,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ The number of available Slave Select pins for the selected SPI bus depends","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178726,"byte_end":178804,"line_start":304,"line_end":304,"column_start":1,"column_end":79}},{"value":"/ on your `/boot/config.txt` configuration. More information can be found","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178805,"byte_end":178880,"line_start":305,"line_end":305,"column_start":1,"column_end":76}},{"value":"/ [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178881,"byte_end":178892,"line_start":306,"line_end":306,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178893,"byte_end":178896,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ [here]: index.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":178897,"byte_end":178919,"line_start":308,"line_end":308,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2494},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179418,"byte_end":179427,"line_start":329,"line_end":329,"column_start":5,"column_end":14},"name":"ActiveLow","qualname":"::spi::Polarity::ActiveLow","value":"Polarity::ActiveLow","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2497},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179437,"byte_end":179447,"line_start":330,"line_end":330,"column_start":5,"column_end":15},"name":"ActiveHigh","qualname":"::spi::Polarity::ActiveHigh","value":"Polarity::ActiveHigh","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2493},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179403,"byte_end":179411,"line_start":328,"line_end":328,"column_start":10,"column_end":18},"name":"Polarity","qualname":"::spi::Polarity","value":"pub enum Polarity { ActiveLow = , ActiveHigh = , }","parent":null,"children":[{"krate":0,"index":2494},{"krate":0,"index":2497}],"decl_id":null,"docs":" Slave Select polarities.\n","sig":null,"attributes":[{"value":"/ Slave Select polarities.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179320,"byte_end":179348,"line_start":326,"line_end":326,"column_start":1,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2512},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180477,"byte_end":180482,"line_start":363,"line_end":363,"column_start":5,"column_end":10},"name":"Mode0","qualname":"::spi::Mode::Mode0","value":"Mode::Mode0","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2515},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180492,"byte_end":180497,"line_start":364,"line_end":364,"column_start":5,"column_end":10},"name":"Mode1","qualname":"::spi::Mode::Mode1","value":"Mode::Mode1","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2518},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180507,"byte_end":180512,"line_start":365,"line_end":365,"column_start":5,"column_end":10},"name":"Mode2","qualname":"::spi::Mode::Mode2","value":"Mode::Mode2","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2521},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180522,"byte_end":180527,"line_start":366,"line_end":366,"column_start":5,"column_end":10},"name":"Mode3","qualname":"::spi::Mode::Mode3","value":"Mode::Mode3","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2511},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180466,"byte_end":180470,"line_start":362,"line_end":362,"column_start":10,"column_end":14},"name":"Mode","qualname":"::spi::Mode","value":"pub enum Mode { Mode0 = , Mode1 = , Mode2 = , Mode3 = , }","parent":null,"children":[{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2518},{"krate":0,"index":2521}],"decl_id":null,"docs":" SPI modes indicating the clock polarity and phase.","sig":null,"attributes":[{"value":"/ SPI modes indicating the clock polarity and phase.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179713,"byte_end":179767,"line_start":342,"line_end":342,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179768,"byte_end":179771,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ Select the appropriate SPI mode for your device. Each mode configures the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179772,"byte_end":179849,"line_start":344,"line_end":344,"column_start":1,"column_end":78}},{"value":"/ clock polarity (CPOL) and clock phase (CPHA) as shown below:","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179850,"byte_end":179914,"line_start":345,"line_end":345,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179915,"byte_end":179918,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ * Mode0: CPOL 0, CPHA 0","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179919,"byte_end":179946,"line_start":347,"line_end":347,"column_start":1,"column_end":28}},{"value":"/ * Mode1: CPOL 0, CPHA 1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179947,"byte_end":179974,"line_start":348,"line_end":348,"column_start":1,"column_end":28}},{"value":"/ * Mode2: CPOL 1, CPHA 0","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179975,"byte_end":180002,"line_start":349,"line_end":349,"column_start":1,"column_end":28}},{"value":"/ * Mode3: CPOL 1, CPHA 1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180003,"byte_end":180030,"line_start":350,"line_end":350,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180031,"byte_end":180034,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ The [`Spi0`] bus supports all 4 modes. [`Spi1`] and [`Spi2`] only support","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180035,"byte_end":180112,"line_start":352,"line_end":352,"column_start":1,"column_end":78}},{"value":"/ `Mode0` and `Mode2`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180113,"byte_end":180137,"line_start":353,"line_end":353,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180138,"byte_end":180141,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ More information on clock polarity and phase can be found on [Wikipedia].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180142,"byte_end":180219,"line_start":355,"line_end":355,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180220,"byte_end":180223,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ [`Spi0`]: enum.Bus.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180224,"byte_end":180251,"line_start":357,"line_end":357,"column_start":1,"column_end":28}},{"value":"/ [`Spi1`]: enum.Bus.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180252,"byte_end":180279,"line_start":358,"line_end":358,"column_start":1,"column_end":28}},{"value":"/ [`Spi2`]: enum.Bus.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180280,"byte_end":180307,"line_start":359,"line_end":359,"column_start":1,"column_end":28}},{"value":"/ [Wikipedia]: https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180308,"byte_end":180411,"line_start":360,"line_end":360,"column_start":1,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2536},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181630,"byte_end":181638,"line_start":398,"line_end":398,"column_start":5,"column_end":13},"name":"MsbFirst","qualname":"::spi::BitOrder::MsbFirst","value":"BitOrder::MsbFirst","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2539},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181648,"byte_end":181656,"line_start":399,"line_end":399,"column_start":5,"column_end":13},"name":"LsbFirst","qualname":"::spi::BitOrder::LsbFirst","value":"BitOrder::LsbFirst","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2535},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181615,"byte_end":181623,"line_start":397,"line_end":397,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::spi::BitOrder","value":"pub enum BitOrder { MsbFirst = , LsbFirst = , }","parent":null,"children":[{"krate":0,"index":2536},{"krate":0,"index":2539}],"decl_id":null,"docs":" Bit orders.","sig":null,"attributes":[{"value":"/ Bit orders.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180857,"byte_end":180872,"line_start":380,"line_end":380,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180873,"byte_end":180876,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ The bit order determines in what order data is shifted out and shifted in.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180877,"byte_end":180955,"line_start":382,"line_end":382,"column_start":1,"column_end":79}},{"value":"/ Select the bit order that's appropriate for the device you're","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180956,"byte_end":181021,"line_start":383,"line_end":383,"column_start":1,"column_end":66}},{"value":"/ communicating with.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181022,"byte_end":181045,"line_start":384,"line_end":384,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181046,"byte_end":181049,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ `MsbFirst` will transfer the most-significant bit first. `LsbFirst` will","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181050,"byte_end":181126,"line_start":386,"line_end":386,"column_start":1,"column_end":77}},{"value":"/ transfer the least-significant bit first.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181127,"byte_end":181172,"line_start":387,"line_end":387,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181173,"byte_end":181176,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ The Raspberry Pi currently only supports the `MsbFirst` bit order. If you","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181177,"byte_end":181254,"line_start":389,"line_end":389,"column_start":1,"column_end":78}},{"value":"/ need the `LsbFirst` bit order, you can use the [`reverse_bits`] function","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181255,"byte_end":181331,"line_start":390,"line_end":390,"column_start":1,"column_end":77}},{"value":"/ instead to reverse the bit order in software by converting your write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181332,"byte_end":181405,"line_start":391,"line_end":391,"column_start":1,"column_end":74}},{"value":"/ buffer before sending it to the slave device, and your read buffer after","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181406,"byte_end":181482,"line_start":392,"line_end":392,"column_start":1,"column_end":77}},{"value":"/ reading any incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181483,"byte_end":181513,"line_start":393,"line_end":393,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181514,"byte_end":181517,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ [`reverse_bits`]: fn.reverse_bits.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181518,"byte_end":181560,"line_start":395,"line_end":395,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1190},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182686,"byte_end":182689,"line_start":425,"line_end":425,"column_start":12,"column_end":15},"name":"Spi","qualname":"::spi::Spi","value":"Spi {  }","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1192}],"decl_id":null,"docs":" Provides access to the Raspberry Pi's SPI peripherals.","sig":null,"attributes":[{"value":"/ Provides access to the Raspberry Pi's SPI peripherals.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181916,"byte_end":181974,"line_start":411,"line_end":411,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181975,"byte_end":181978,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ Before using `Spi`, make sure your Raspberry Pi has the necessary SPI buses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181979,"byte_end":182058,"line_start":413,"line_end":413,"column_start":1,"column_end":80}},{"value":"/ and Slave Select pins enabled. More information can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182059,"byte_end":182131,"line_start":414,"line_end":414,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182132,"byte_end":182135,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ The `embedded-hal` [`blocking::spi::Transfer<u8>`], [`blocking::spi::Write<u8>`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182136,"byte_end":182220,"line_start":416,"line_end":416,"column_start":1,"column_end":85}},{"value":"/ and [`spi::FullDuplex<u8>`] trait","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182221,"byte_end":182258,"line_start":417,"line_end":417,"column_start":1,"column_end":38}},{"value":"/ implementations for `Spi` can be enabled by specifying the optional `hal`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182259,"byte_end":182336,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"/ feature in the dependency declaration for the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182337,"byte_end":182401,"line_start":419,"line_end":419,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182402,"byte_end":182405,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ [here]: index.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182406,"byte_end":182428,"line_start":421,"line_end":421,"column_start":1,"column_end":23}},{"value":"/ [`blocking::spi::Transfer<u8>`]: ../../embedded_hal/blocking/spi/trait.Transfer.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182429,"byte_end":182517,"line_start":422,"line_end":422,"column_start":1,"column_end":89}},{"value":"/ [`blocking::spi::Write<u8>`]: ../../embedded_hal/blocking/spi/trait.Write.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182518,"byte_end":182600,"line_start":423,"line_end":423,"column_start":1,"column_end":83}},{"value":"/ [`spi::FullDuplex<u8>`]: ../../embedded_hal/spi/trait.FullDuplex.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":182601,"byte_end":182674,"line_start":424,"line_end":424,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183510,"byte_end":183513,"line_start":446,"line_end":446,"column_start":12,"column_end":15},"name":"new","qualname":"<Spi>::new","value":"pub fn new(Bus, SlaveSelect, u32, Mode) -> Result<Spi>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Spi`.","sig":null,"attributes":[{"value":"/ Constructs a new `Spi`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183121,"byte_end":183148,"line_start":437,"line_end":437,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183153,"byte_end":183156,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ `bus` and `slave_select` specify the selected SPI bus and one of its","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183161,"byte_end":183233,"line_start":439,"line_end":439,"column_start":5,"column_end":77}},{"value":"/ associated Slave Select pins.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183238,"byte_end":183271,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183276,"byte_end":183279,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ `clock_speed` defines the maximum clock frequency in hertz (Hz). The SPI driver","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183284,"byte_end":183367,"line_start":442,"line_end":442,"column_start":5,"column_end":88}},{"value":"/ will automatically round down to the closest valid frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183372,"byte_end":183437,"line_start":443,"line_end":443,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183442,"byte_end":183445,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ `mode` selects the clock polarity and phase.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183450,"byte_end":183498,"line_start":445,"line_end":445,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185012,"byte_end":185021,"line_start":486,"line_end":486,"column_start":12,"column_end":21},"name":"bit_order","qualname":"<Spi>::bit_order","value":"pub fn bit_order(&Self) -> Result<BitOrder>","parent":null,"children":[],"decl_id":null,"docs":" Gets the bit order.\n","sig":null,"attributes":[{"value":"/ Gets the bit order.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":184977,"byte_end":185000,"line_start":485,"line_end":485,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185916,"byte_end":185929,"line_start":509,"line_end":509,"column_start":12,"column_end":25},"name":"set_bit_order","qualname":"<Spi>::set_bit_order","value":"pub fn set_bit_order(&Self, BitOrder) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the order in which bits are shifted out and in.","sig":null,"attributes":[{"value":"/ Sets the order in which bits are shifted out and in.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185280,"byte_end":185336,"line_start":496,"line_end":496,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185341,"byte_end":185344,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi currently only supports the [`MsbFirst`] bit order. If you","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185349,"byte_end":185428,"line_start":498,"line_end":498,"column_start":5,"column_end":84}},{"value":"/ need the [`LsbFirst`] bit order, you can use the [`reverse_bits`] function","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185433,"byte_end":185511,"line_start":499,"line_end":499,"column_start":5,"column_end":83}},{"value":"/ instead to reverse the bit order in software by converting your write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185516,"byte_end":185589,"line_start":500,"line_end":500,"column_start":5,"column_end":78}},{"value":"/ buffer before sending it to the slave device, and your read buffer after","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185594,"byte_end":185670,"line_start":501,"line_end":501,"column_start":5,"column_end":81}},{"value":"/ reading any incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185675,"byte_end":185705,"line_start":502,"line_end":502,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185710,"byte_end":185713,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ By default, `bit_order` is set to `MsbFirst`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185718,"byte_end":185767,"line_start":504,"line_end":504,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185772,"byte_end":185775,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ [`MsbFirst`]: enum.BitOrder.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185780,"byte_end":185816,"line_start":506,"line_end":506,"column_start":5,"column_end":41}},{"value":"/ [`LsbFirst`]: enum.BitOrder.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185821,"byte_end":185857,"line_start":507,"line_end":507,"column_start":5,"column_end":41}},{"value":"/ [`reverse_bits`]: fn.reverse_bits.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":185862,"byte_end":185904,"line_start":508,"line_end":508,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186338,"byte_end":186351,"line_start":520,"line_end":520,"column_start":12,"column_end":25},"name":"bits_per_word","qualname":"<Spi>::bits_per_word","value":"pub fn bits_per_word(&Self) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of bits per word.\n","sig":null,"attributes":[{"value":"/ Gets the number of bits per word.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186289,"byte_end":186326,"line_start":519,"line_end":519,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186704,"byte_end":186721,"line_start":532,"line_end":532,"column_start":12,"column_end":29},"name":"set_bits_per_word","qualname":"<Spi>::set_bits_per_word","value":"pub fn set_bits_per_word(&Self, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bits per word.","sig":null,"attributes":[{"value":"/ Sets the number of bits per word.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186528,"byte_end":186565,"line_start":527,"line_end":527,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186570,"byte_end":186573,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ The Raspberry Pi currently only supports 8 bit words.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186578,"byte_end":186635,"line_start":529,"line_end":529,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186640,"byte_end":186643,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ By default, `bits_per_word` is set to 8.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":186648,"byte_end":186692,"line_start":531,"line_end":531,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187143,"byte_end":187154,"line_start":543,"line_end":543,"column_start":12,"column_end":23},"name":"clock_speed","qualname":"<Spi>::clock_speed","value":"pub fn clock_speed(&Self) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the clock frequency in hertz (Hz).\n","sig":null,"attributes":[{"value":"/ Gets the clock frequency in hertz (Hz).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187088,"byte_end":187131,"line_start":542,"line_end":542,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187473,"byte_end":187488,"line_start":553,"line_end":553,"column_start":12,"column_end":27},"name":"set_clock_speed","qualname":"<Spi>::set_clock_speed","value":"pub fn set_clock_speed(&Self, u32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the clock frequency in hertz (Hz).","sig":null,"attributes":[{"value":"/ Sets the clock frequency in hertz (Hz).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187325,"byte_end":187368,"line_start":550,"line_end":550,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187373,"byte_end":187376,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ The SPI driver will automatically round down to the closest valid frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187381,"byte_end":187461,"line_start":552,"line_end":552,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187881,"byte_end":187885,"line_start":564,"line_end":564,"column_start":12,"column_end":16},"name":"mode","qualname":"<Spi>::mode","value":"pub fn mode(&Self) -> Result<Mode>","parent":null,"children":[],"decl_id":null,"docs":" Gets the SPI mode.\n","sig":null,"attributes":[{"value":"/ Gets the SPI mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":187847,"byte_end":187869,"line_start":563,"line_end":563,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188370,"byte_end":188378,"line_start":580,"line_end":580,"column_start":12,"column_end":20},"name":"set_mode","qualname":"<Spi>::set_mode","value":"pub fn set_mode(&Self, Mode) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the SPI mode.","sig":null,"attributes":[{"value":"/ Sets the SPI mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188182,"byte_end":188204,"line_start":576,"line_end":576,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188209,"byte_end":188212,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ The SPI mode indicates the serial clock polarity and phase. Some modes","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188217,"byte_end":188291,"line_start":578,"line_end":578,"column_start":5,"column_end":79}},{"value":"/ may not be available depending on the SPI bus that's used.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188296,"byte_end":188358,"line_start":579,"line_end":579,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188963,"byte_end":188974,"line_start":597,"line_end":597,"column_start":12,"column_end":23},"name":"ss_polarity","qualname":"<Spi>::ss_polarity","value":"pub fn ss_polarity(&Self) -> Result<Polarity>","parent":null,"children":[],"decl_id":null,"docs":" Gets the Slave Select polarity.\n","sig":null,"attributes":[{"value":"/ Gets the Slave Select polarity.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":188916,"byte_end":188951,"line_start":596,"line_end":596,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":189371,"byte_end":189386,"line_start":611,"line_end":611,"column_start":12,"column_end":27},"name":"set_ss_polarity","qualname":"<Spi>::set_ss_polarity","value":"pub fn set_ss_polarity(&Self, Polarity) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets Slave Select polarity.","sig":null,"attributes":[{"value":"/ Sets Slave Select polarity.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":189251,"byte_end":189282,"line_start":608,"line_end":608,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":189287,"byte_end":189290,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ By default, the Slave Select polarity is set to `ActiveLow`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":189295,"byte_end":189359,"line_start":610,"line_end":610,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190588,"byte_end":190592,"line_start":643,"line_end":643,"column_start":12,"column_end":16},"name":"read","qualname":"<Spi>::read","value":"pub fn read(&mut Self, &mut [u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives incoming data from the slave device and writes it to `buffer`.","sig":null,"attributes":[{"value":"/ Receives incoming data from the slave device and writes it to `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":189994,"byte_end":190069,"line_start":630,"line_end":630,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190074,"byte_end":190077,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ The SPI protocol doesn't indicate how much incoming data is waiting,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190082,"byte_end":190154,"line_start":632,"line_end":632,"column_start":5,"column_end":77}},{"value":"/ so the total number of bytes read depends on the length of `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190159,"byte_end":190231,"line_start":633,"line_end":633,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190236,"byte_end":190239,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ During the read, the MOSI line is kept in a state that results in a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190244,"byte_end":190315,"line_start":635,"line_end":635,"column_start":5,"column_end":76}},{"value":"/ zero value byte shifted out for every byte `read` receives on the MISO","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190320,"byte_end":190394,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/ line.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190399,"byte_end":190408,"line_start":637,"line_end":637,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190413,"byte_end":190416,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ Slave Select is set to active at the start of the read, and inactive","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190421,"byte_end":190493,"line_start":639,"line_end":639,"column_start":5,"column_end":77}},{"value":"/ when the read completes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190498,"byte_end":190526,"line_start":640,"line_end":640,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190531,"byte_end":190534,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were read.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190539,"byte_end":190576,"line_start":642,"line_end":642,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191024,"byte_end":191029,"line_start":655,"line_end":655,"column_start":12,"column_end":17},"name":"write","qualname":"<Spi>::write","value":"pub fn write(&mut Self, &[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends the outgoing data contained in `buffer` to the slave device.","sig":null,"attributes":[{"value":"/ Sends the outgoing data contained in `buffer` to the slave device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190691,"byte_end":190761,"line_start":647,"line_end":647,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190766,"byte_end":190769,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ Any data received on the MISO line from the slave is ignored.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190774,"byte_end":190839,"line_start":649,"line_end":649,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190844,"byte_end":190847,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Slave Select is set to active at the start of the write, and inactive","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190852,"byte_end":190925,"line_start":651,"line_end":651,"column_start":5,"column_end":78}},{"value":"/ when the write completes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190930,"byte_end":190959,"line_start":652,"line_end":652,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190964,"byte_end":190967,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were written.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":190972,"byte_end":191012,"line_start":654,"line_end":654,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191835,"byte_end":191843,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"transfer","qualname":"<Spi>::transfer","value":"pub fn transfer(&Self, &mut [u8], &[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends and receives data at the same time.","sig":null,"attributes":[{"value":"/ Sends and receives data at the same time.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191125,"byte_end":191170,"line_start":659,"line_end":659,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191175,"byte_end":191178,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ SPI is a full-duplex protocol that shifts out bits to the slave device","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191183,"byte_end":191257,"line_start":661,"line_end":661,"column_start":5,"column_end":79}},{"value":"/ on the MOSI line while simultaneously shifting in bits it receives on","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191262,"byte_end":191335,"line_start":662,"line_end":662,"column_start":5,"column_end":78}},{"value":"/ the MISO line. `transfer` stores the incoming data in `read_buffer`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191340,"byte_end":191412,"line_start":663,"line_end":663,"column_start":5,"column_end":77}},{"value":"/ and sends the outgoing data contained in `write_buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191417,"byte_end":191477,"line_start":664,"line_end":664,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191482,"byte_end":191485,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ Because data is sent and received simultaneously, `transfer` will only","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191490,"byte_end":191564,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ transfer as many bytes as the shortest of the two buffers contains.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191569,"byte_end":191640,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191645,"byte_end":191648,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ Slave Select is set to active at the start of the transfer, and inactive","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191653,"byte_end":191729,"line_start":669,"line_end":669,"column_start":5,"column_end":81}},{"value":"/ when the transfer completes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191734,"byte_end":191766,"line_start":670,"line_end":670,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191771,"byte_end":191774,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were transferred.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":191779,"byte_end":191823,"line_start":672,"line_end":672,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192738,"byte_end":192755,"line_start":693,"line_end":693,"column_start":12,"column_end":29},"name":"transfer_segments","qualname":"<Spi>::transfer_segments","value":"pub fn transfer_segments(&Self, &[Segment]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Transfers multiple half-duplex or full-duplex segments.","sig":null,"attributes":[{"value":"/ Transfers multiple half-duplex or full-duplex segments.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192080,"byte_end":192139,"line_start":681,"line_end":681,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192144,"byte_end":192147,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ `transfer_segments` transfers multiple segments in a single call. Each","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192152,"byte_end":192226,"line_start":683,"line_end":683,"column_start":5,"column_end":79}},{"value":"/ [`Segment`] contains a reference to either a read buffer or a write buffer,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192231,"byte_end":192310,"line_start":684,"line_end":684,"column_start":5,"column_end":84}},{"value":"/ or both. Optional settings can be configured that override the SPI bus","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192315,"byte_end":192389,"line_start":685,"line_end":685,"column_start":5,"column_end":79}},{"value":"/ settings for that specific segment.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192394,"byte_end":192433,"line_start":686,"line_end":686,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192438,"byte_end":192441,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ By default, Slave Select stays active until all segments have been","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192446,"byte_end":192516,"line_start":688,"line_end":688,"column_start":5,"column_end":75}},{"value":"/ transferred. You can change this behavior using [`Segment::set_ss_change`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192521,"byte_end":192600,"line_start":689,"line_end":689,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192605,"byte_end":192608,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ [`Segment`]: struct.Segment.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192613,"byte_end":192649,"line_start":691,"line_end":691,"column_start":5,"column_end":41}},{"value":"/ [`Segment::set_ss_change`]: struct.Segment.html#method.set_ss_change","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":192654,"byte_end":192726,"line_start":692,"line_end":692,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":1212},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"system","qualname":"::system","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":2553},{"krate":0,"index":2556},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":2558},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":1243},{"krate":0,"index":2602},{"krate":0,"index":2615},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":2626},{"krate":0,"index":2631},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":1250}],"decl_id":null,"docs":" Raspberry Pi system-related tools.","sig":null,"attributes":[{"value":"/ Raspberry Pi system-related tools.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":210733,"byte_end":210771,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":210772,"byte_end":210775,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Use [`DeviceInfo`] to identify the Raspberry Pi's model and SoC.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":210776,"byte_end":210844,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":210845,"byte_end":210848,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`DeviceInfo`]: struct.DeviceInfo.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":210849,"byte_end":210891,"line_start":25,"line_end":25,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2554},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211893,"byte_end":211905,"line_start":54,"line_end":54,"column_start":5,"column_end":17},"name":"UnknownModel","qualname":"::system::Error::UnknownModel","value":"Error::UnknownModel","parent":{"krate":0,"index":2553},"children":[],"decl_id":null,"docs":" Unknown model.","sig":null,"attributes":[{"value":"/ Unknown model.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211253,"byte_end":211271,"line_start":41,"line_end":41,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211276,"byte_end":211279,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ `DeviceInfo` was unable to identify the Raspberry Pi model based on the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211284,"byte_end":211359,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ contents of `/proc/cpuinfo`, `/sys/firmware/devicetree/base/compatible`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211364,"byte_end":211439,"line_start":44,"line_end":44,"column_start":5,"column_end":80}},{"value":"/ and `/sys/firmware/devicetree/base/model`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211444,"byte_end":211490,"line_start":45,"line_end":45,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211495,"byte_end":211498,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Support for new models is usually added shortly after they are officially","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211503,"byte_end":211580,"line_start":47,"line_end":47,"column_start":5,"column_end":82}},{"value":"/ announced and available to the public. Make sure you're using the latest","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211585,"byte_end":211661,"line_start":48,"line_end":48,"column_start":5,"column_end":81}},{"value":"/ release of RPPAL.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211666,"byte_end":211687,"line_start":49,"line_end":49,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211692,"byte_end":211695,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ You may also encounter this error if your Linux distribution","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211700,"byte_end":211764,"line_start":51,"line_end":51,"column_start":5,"column_end":69}},{"value":"/ doesn't provide any of the common user-accessible system files","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211769,"byte_end":211835,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ that are used to identify the model and SoC.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211840,"byte_end":211888,"line_start":53,"line_end":53,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":2553},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211241,"byte_end":211246,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Error","qualname":"::system::Error","value":"pub enum Error { UnknownModel, }","parent":null,"children":[{"krate":0,"index":2554}],"decl_id":null,"docs":" Errors that can occur when trying to identify the Raspberry Pi hardware.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when trying to identify the Raspberry Pi hardware.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211138,"byte_end":211214,"line_start":38,"line_end":38,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":1241},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212231,"byte_end":212237,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Result","qualname":"::system::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type returned from methods that can have `system::Error`s.\n","sig":null,"attributes":[{"value":"/ Result type returned from methods that can have `system::Error`s.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212152,"byte_end":212221,"line_start":67,"line_end":67,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2559},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212576,"byte_end":212588,"line_start":77,"line_end":77,"column_start":5,"column_end":17},"name":"RaspberryPiA","qualname":"::system::Model::RaspberryPiA","value":"Model::RaspberryPiA","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2561},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212594,"byte_end":212610,"line_start":78,"line_end":78,"column_start":5,"column_end":21},"name":"RaspberryPiAPlus","qualname":"::system::Model::RaspberryPiAPlus","value":"Model::RaspberryPiAPlus","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2563},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212616,"byte_end":212632,"line_start":79,"line_end":79,"column_start":5,"column_end":21},"name":"RaspberryPiBRev1","qualname":"::system::Model::RaspberryPiBRev1","value":"Model::RaspberryPiBRev1","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2565},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212638,"byte_end":212654,"line_start":80,"line_end":80,"column_start":5,"column_end":21},"name":"RaspberryPiBRev2","qualname":"::system::Model::RaspberryPiBRev2","value":"Model::RaspberryPiBRev2","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2567},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212660,"byte_end":212676,"line_start":81,"line_end":81,"column_start":5,"column_end":21},"name":"RaspberryPiBPlus","qualname":"::system::Model::RaspberryPiBPlus","value":"Model::RaspberryPiBPlus","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2569},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212682,"byte_end":212695,"line_start":82,"line_end":82,"column_start":5,"column_end":18},"name":"RaspberryPi2B","qualname":"::system::Model::RaspberryPi2B","value":"Model::RaspberryPi2B","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2571},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212701,"byte_end":212718,"line_start":83,"line_end":83,"column_start":5,"column_end":22},"name":"RaspberryPi3APlus","qualname":"::system::Model::RaspberryPi3APlus","value":"Model::RaspberryPi3APlus","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2573},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212724,"byte_end":212737,"line_start":84,"line_end":84,"column_start":5,"column_end":18},"name":"RaspberryPi3B","qualname":"::system::Model::RaspberryPi3B","value":"Model::RaspberryPi3B","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2575},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212743,"byte_end":212760,"line_start":85,"line_end":85,"column_start":5,"column_end":22},"name":"RaspberryPi3BPlus","qualname":"::system::Model::RaspberryPi3BPlus","value":"Model::RaspberryPi3BPlus","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2577},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212766,"byte_end":212779,"line_start":86,"line_end":86,"column_start":5,"column_end":18},"name":"RaspberryPi4B","qualname":"::system::Model::RaspberryPi4B","value":"Model::RaspberryPi4B","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2579},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212785,"byte_end":212809,"line_start":87,"line_end":87,"column_start":5,"column_end":29},"name":"RaspberryPiComputeModule","qualname":"::system::Model::RaspberryPiComputeModule","value":"Model::RaspberryPiComputeModule","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2581},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212815,"byte_end":212840,"line_start":88,"line_end":88,"column_start":5,"column_end":30},"name":"RaspberryPiComputeModule3","qualname":"::system::Model::RaspberryPiComputeModule3","value":"Model::RaspberryPiComputeModule3","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2583},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212846,"byte_end":212875,"line_start":89,"line_end":89,"column_start":5,"column_end":34},"name":"RaspberryPiComputeModule3Plus","qualname":"::system::Model::RaspberryPiComputeModule3Plus","value":"Model::RaspberryPiComputeModule3Plus","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2585},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212881,"byte_end":212896,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"RaspberryPiZero","qualname":"::system::Model::RaspberryPiZero","value":"Model::RaspberryPiZero","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2587},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212902,"byte_end":212918,"line_start":91,"line_end":91,"column_start":5,"column_end":21},"name":"RaspberryPiZeroW","qualname":"::system::Model::RaspberryPiZeroW","value":"Model::RaspberryPiZeroW","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2589},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":213153,"byte_end":213168,"line_start":96,"line_end":96,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::system::Model::__Nonexhaustive","value":"Model::__Nonexhaustive","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":" `Model` might be extended with additional variants in a minor or\n patch revision, and must not be exhaustively matched against.\n Instead, add a `_` catch-all arm to match future variants.\n","sig":null,"attributes":[{"value":"/ `Model` might be extended with additional variants in a minor or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212924,"byte_end":212992,"line_start":92,"line_end":92,"column_start":5,"column_end":73}},{"value":"/ patch revision, and must not be exhaustively matched against.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212997,"byte_end":213062,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/ Instead, add a `_` catch-all arm to match future variants.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":213067,"byte_end":213129,"line_start":94,"line_end":94,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":2558},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212564,"byte_end":212569,"line_start":76,"line_end":76,"column_start":10,"column_end":15},"name":"Model","qualname":"::system::Model","value":"pub enum Model {\n    RaspberryPiA,\n    RaspberryPiAPlus,\n    RaspberryPiBRev1,\n    RaspberryPiBRev2,\n    RaspberryPiBPlus,\n    RaspberryPi2B,\n    RaspberryPi3APlus,\n    RaspberryPi3B,\n    RaspberryPi3BPlus,\n    RaspberryPi4B,\n    RaspberryPiComputeModule,\n    RaspberryPiComputeModule3,\n    RaspberryPiComputeModule3Plus,\n    RaspberryPiZero,\n    RaspberryPiZeroW,\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":2559},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2571},{"krate":0,"index":2573},{"krate":0,"index":2575},{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2589}],"decl_id":null,"docs":" Identifiable Raspberry Pi models.","sig":null,"attributes":[{"value":"/ Identifiable Raspberry Pi models.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212270,"byte_end":212307,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212308,"byte_end":212311,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ `Model` might be extended with additional variants in a minor or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212312,"byte_end":212380,"line_start":72,"line_end":72,"column_start":1,"column_end":69}},{"value":"/ patch revision, and must not be exhaustively matched against.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212381,"byte_end":212446,"line_start":73,"line_end":73,"column_start":1,"column_end":66}},{"value":"/ Instead, add a `_` catch-all arm to match future variants.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212447,"byte_end":212509,"line_start":74,"line_end":74,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2603},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214791,"byte_end":214798,"line_start":129,"line_end":129,"column_start":5,"column_end":12},"name":"Bcm2835","qualname":"::system::SoC::Bcm2835","value":"SoC::Bcm2835","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2605},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214804,"byte_end":214811,"line_start":130,"line_end":130,"column_start":5,"column_end":12},"name":"Bcm2836","qualname":"::system::SoC::Bcm2836","value":"SoC::Bcm2836","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2607},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214817,"byte_end":214826,"line_start":131,"line_end":131,"column_start":5,"column_end":14},"name":"Bcm2837A1","qualname":"::system::SoC::Bcm2837A1","value":"SoC::Bcm2837A1","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2609},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214832,"byte_end":214841,"line_start":132,"line_end":132,"column_start":5,"column_end":14},"name":"Bcm2837B0","qualname":"::system::SoC::Bcm2837B0","value":"SoC::Bcm2837B0","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2611},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214847,"byte_end":214854,"line_start":133,"line_end":133,"column_start":5,"column_end":12},"name":"Bcm2711","qualname":"::system::SoC::Bcm2711","value":"SoC::Bcm2711","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2613},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":215087,"byte_end":215102,"line_start":138,"line_end":138,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::system::SoC::__Nonexhaustive","value":"SoC::__Nonexhaustive","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":" `SoC` might be extended with additional variants in a minor or\n patch revision, and must not be exhaustively matched against.\n Instead, add a `_` catch-all arm to match future variants.\n","sig":null,"attributes":[{"value":"/ `SoC` might be extended with additional variants in a minor or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214860,"byte_end":214926,"line_start":134,"line_end":134,"column_start":5,"column_end":71}},{"value":"/ patch revision, and must not be exhaustively matched against.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214931,"byte_end":214996,"line_start":135,"line_end":135,"column_start":5,"column_end":70}},{"value":"/ Instead, add a `_` catch-all arm to match future variants.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":215001,"byte_end":215063,"line_start":136,"line_end":136,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":2602},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214781,"byte_end":214784,"line_start":128,"line_end":128,"column_start":10,"column_end":13},"name":"SoC","qualname":"::system::SoC","value":"pub enum SoC {\n    Bcm2835,\n    Bcm2836,\n    Bcm2837A1,\n    Bcm2837B0,\n    Bcm2711,\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":2603},{"krate":0,"index":2605},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2611},{"krate":0,"index":2613}],"decl_id":null,"docs":" Identifiable Raspberry Pi SoCs.","sig":null,"attributes":[{"value":"/ Identifiable Raspberry Pi SoCs.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214491,"byte_end":214526,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214527,"byte_end":214530,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ `SoC` might be extended with additional variants in a minor or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214531,"byte_end":214597,"line_start":124,"line_end":124,"column_start":1,"column_end":67}},{"value":"/ patch revision, and must not be exhaustively matched against.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214598,"byte_end":214663,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ Instead, add a `_` catch-all arm to match future variants.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":214664,"byte_end":214726,"line_start":126,"line_end":126,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2626},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222462,"byte_end":222472,"line_start":307,"line_end":307,"column_start":12,"column_end":22},"name":"DeviceInfo","qualname":"::system::DeviceInfo","value":"DeviceInfo {  }","parent":null,"children":[{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630}],"decl_id":null,"docs":" Retrieves Raspberry Pi device information.\n","sig":null,"attributes":[{"value":"/ Retrieves Raspberry Pi device information.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222359,"byte_end":222405,"line_start":305,"line_end":305,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222846,"byte_end":222849,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"new","qualname":"<DeviceInfo>::new","value":"pub fn new() -> Result<DeviceInfo>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `DeviceInfo`.","sig":null,"attributes":[{"value":"/ Constructs a new `DeviceInfo`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222580,"byte_end":222614,"line_start":315,"line_end":315,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222619,"byte_end":222622,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ `new` attempts to identify the Raspberry Pi's model and SoC based on","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222627,"byte_end":222699,"line_start":317,"line_end":317,"column_start":5,"column_end":77}},{"value":"/ the contents of `/proc/cpuinfo`, `/sys/firmware/devicetree/base/compatible`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222704,"byte_end":222783,"line_start":318,"line_end":318,"column_start":5,"column_end":84}},{"value":"/ and `/sys/firmware/devicetree/base/model`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222788,"byte_end":222834,"line_start":319,"line_end":319,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":224785,"byte_end":224790,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"model","qualname":"<DeviceInfo>::model","value":"pub fn model(&Self) -> Model","parent":null,"children":[],"decl_id":null,"docs":" Returns the Raspberry Pi's model.\n","sig":null,"attributes":[{"value":"/ Returns the Raspberry Pi's model.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":224736,"byte_end":224773,"line_start":370,"line_end":370,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":224886,"byte_end":224889,"line_start":376,"line_end":376,"column_start":12,"column_end":15},"name":"soc","qualname":"<DeviceInfo>::soc","value":"pub fn soc(&Self) -> SoC","parent":null,"children":[],"decl_id":null,"docs":" Returns the Raspberry Pi's SoC.\n","sig":null,"attributes":[{"value":"/ Returns the Raspberry Pi's SoC.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":224839,"byte_end":224874,"line_start":375,"line_end":375,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":1258},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uart","qualname":"::uart","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1304},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1314},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1346},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":2643},{"krate":0,"index":2652},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1663},{"krate":0,"index":1665},{"krate":0,"index":1667},{"krate":0,"index":2654},{"krate":0,"index":2665},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":1669},{"krate":0,"index":2676},{"krate":0,"index":2685},{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":1671},{"krate":0,"index":2696},{"krate":0,"index":2703},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1684},{"krate":0,"index":2714},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":1686},{"krate":0,"index":1722}],"decl_id":null,"docs":" Interface for the UART peripherals and any USB to serial adapters.","sig":null,"attributes":[{"value":"/ Interface for the UART peripherals and any USB to serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226364,"byte_end":226434,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226435,"byte_end":226438,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ RPPAL controls the Raspberry Pi's UART peripherals through the `ttyAMA0`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226439,"byte_end":226515,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ (PL011) and `ttyS0` (mini UART) character devices. USB to serial adapters","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226516,"byte_end":226593,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ are controlled using the `ttyUSBx` and `ttyACMx` character devices.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226594,"byte_end":226665,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226666,"byte_end":226669,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## UART peripherals","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226670,"byte_end":226693,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226694,"byte_end":226697,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The Raspberry Pi's BCM283x SoC features two UART peripherals.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226698,"byte_end":226763,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/ `/dev/ttyAMA0` represents the PL011 UART, which offers a full set of","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226764,"byte_end":226836,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ features. `/dev/ttyS0` represents an auxiliary peripheral that's referred","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226837,"byte_end":226914,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ to as mini UART, with limited capabilities. More details on the differences","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226915,"byte_end":226994,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ between the PL011 and mini UART can be found in the official Raspberry Pi","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":226995,"byte_end":227072,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ [documentation].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227073,"byte_end":227093,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227094,"byte_end":227097,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ On earlier Raspberry Pi models without Bluetooth, `/dev/ttyAMA0` is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227098,"byte_end":227169,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ configured as a Linux serial console. On more recent models with Bluetooth","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227170,"byte_end":227248,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ (3A+, 3B, 3B+, Zero W), `/dev/ttyAMA0` is connected to the Bluetooth","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227249,"byte_end":227321,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"/ module, and `/dev/ttyS0` is used as a serial console instead. Due to the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227322,"byte_end":227398,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ limitations of `/dev/ttyS0` and the requirement for a fixed core frequency,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227399,"byte_end":227478,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ in most cases you'll want to use `/dev/ttyAMA0` for serial communication.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227479,"byte_end":227556,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227557,"byte_end":227560,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ By default, TX (outgoing data) is tied to BCM GPIO 14 (physical pin 8) and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227561,"byte_end":227639,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ RX (incoming data) is tied to BCM GPIO 15 (physical pin 10). You can move","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227640,"byte_end":227717,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ these lines to different GPIO pins using the `uart0` and `uart1` overlays,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227718,"byte_end":227796,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ but the alternative pin options aren't exposed through the GPIO header on","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227797,"byte_end":227874,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ any of the current Raspberry Pi models. They are only available on the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227875,"byte_end":227949,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ Compute Module's SO-DIMM pads.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227950,"byte_end":227984,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227985,"byte_end":227988,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Configure `/dev/ttyAMA0` for serial communication (recommended)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":227989,"byte_end":228059,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228060,"byte_end":228063,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Disable the Linux serial console by either deactivating it through","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228064,"byte_end":228134,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ `sudo raspi-config`, or manually removing the parameter","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228135,"byte_end":228194,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ `console=serial0,115200` from `/boot/cmdline.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228195,"byte_end":228249,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228250,"byte_end":228253,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Remove any lines containing `enable_uart=0` or `enable_uart=1` from","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228254,"byte_end":228325,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/ `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228326,"byte_end":228349,"line_start":57,"line_end":57,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228350,"byte_end":228353,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ On Raspberry Pi models with a Bluetooth module, an extra step is required","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228354,"byte_end":228431,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"/ to either disable Bluetooth or move it to `/dev/ttyS0`, so `/dev/ttyAMA0`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228432,"byte_end":228509,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ becomes available for serial communication.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228510,"byte_end":228557,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228558,"byte_end":228561,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ To disable Bluetooth, add `dtoverlay=pi3-disable-bt` to `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228562,"byte_end":228641,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ You'll also need to disable the service that initializes Bluetooth with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228642,"byte_end":228717,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ `sudo systemctl disable hciuart`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228718,"byte_end":228755,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228756,"byte_end":228759,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ To move the Bluetooth module to `/dev/ttyS0`, instead of disabling it with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228760,"byte_end":228838,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ the above-mentioned steps, add `dtoverlay=pi3-miniuart-bt` and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228839,"byte_end":228905,"line_start":68,"line_end":68,"column_start":1,"column_end":67}},{"value":"/ `core_freq=250` to `/boot/config.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228906,"byte_end":228948,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228949,"byte_end":228952,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Remember to reboot the Raspberry Pi after making any changes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":228953,"byte_end":229018,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229019,"byte_end":229022,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ## Configure `/dev/ttyS0` for serial communication","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229023,"byte_end":229077,"line_start":73,"line_end":73,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229078,"byte_end":229081,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ If you prefer to leave the Bluetooth module connected to `/dev/ttyAMA0`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229082,"byte_end":229158,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ you can configure `/dev/ttyS0` for serial communication instead.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229159,"byte_end":229227,"line_start":76,"line_end":76,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229228,"byte_end":229231,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Disable the Linux serial console by either deactivating it through","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229232,"byte_end":229302,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/ `sudo raspi-config`, or manually removing the parameter","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229303,"byte_end":229362,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/ `console=serial0,115200` from `/boot/cmdline.txt`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229363,"byte_end":229417,"line_start":80,"line_end":80,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229418,"byte_end":229421,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Add the line `enable_uart=1` to `/boot/config.txt` to enable serial","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229422,"byte_end":229493,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/ communication on `/dev/ttyS0`, which also sets a fixed core frequency.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229494,"byte_end":229568,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229569,"byte_end":229572,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Remember to reboot the Raspberry Pi after making any changes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229573,"byte_end":229638,"line_start":85,"line_end":85,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229639,"byte_end":229642,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ## USB to serial adapters","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229643,"byte_end":229672,"line_start":87,"line_end":87,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229673,"byte_end":229676,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ In addition to controlling the hardware UART peripherals, [`Uart`] can","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229677,"byte_end":229751,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ also be used for USB to serial adapters. Depending on the type of","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229752,"byte_end":229821,"line_start":90,"line_end":90,"column_start":1,"column_end":70}},{"value":"/ device, these can be accessed either through `/dev/ttyUSBx` or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229822,"byte_end":229888,"line_start":91,"line_end":91,"column_start":1,"column_end":67}},{"value":"/ `/dev/ttyACMx`, where `x` is an index starting at `0`. The numbering is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229889,"byte_end":229964,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/ based on the order in which the devices are discovered by the kernel.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":229965,"byte_end":230038,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230039,"byte_end":230042,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ When you have multiple USB to serial adapters connected at the same time,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230043,"byte_end":230120,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/ you can uniquely identify a specific device by searching for the relevant","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230121,"byte_end":230198,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ symlink in the `/dev/serial/by-id` directory, or by adding your own","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230199,"byte_end":230270,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ `udev` rules.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230271,"byte_end":230288,"line_start":98,"line_end":98,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230289,"byte_end":230292,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Support for automatic software (XON/XOFF) and hardware (RTS/CTS) flow","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230293,"byte_end":230366,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"/ control for USB to serial adapters depends on the USB interface IC on the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230367,"byte_end":230444,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/ device, and the relevant Linux driver. Some ICs use an older,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230445,"byte_end":230510,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ incompatible RTS/CTS implementation, sometimes referred to as legacy or","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230511,"byte_end":230586,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ simplex mode, where RTS is used to indicate data is about to be","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230587,"byte_end":230654,"line_start":104,"line_end":104,"column_start":1,"column_end":68}},{"value":"/ transmitted, rather than to request the external device to resume its","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230655,"byte_end":230728,"line_start":105,"line_end":105,"column_start":1,"column_end":74}},{"value":"/ transmission.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230729,"byte_end":230746,"line_start":106,"line_end":106,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230747,"byte_end":230750,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ ## Hardware flow control","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230751,"byte_end":230779,"line_start":108,"line_end":108,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230780,"byte_end":230783,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ The RTS/CTS hardware flow control implementation supported by [`Uart`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230784,"byte_end":230858,"line_start":110,"line_end":110,"column_start":1,"column_end":75}},{"value":"/ and used by the Raspberry Pi's UART peripherals requires RTS on one","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230859,"byte_end":230930,"line_start":111,"line_end":111,"column_start":1,"column_end":72}},{"value":"/ device to be connected to CTS on the other device. The RTS signal is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":230931,"byte_end":231003,"line_start":112,"line_end":112,"column_start":1,"column_end":73}},{"value":"/ used to request the other device to pause or resume its transmission.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231004,"byte_end":231077,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231078,"byte_end":231081,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Some devices use an older, incompatible RTS/CTS implementation, sometimes","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231082,"byte_end":231159,"line_start":115,"line_end":115,"column_start":1,"column_end":78}},{"value":"/ referred to as legacy or simplex mode, where RTS is connected to RTS, and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231160,"byte_end":231237,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/ CTS to CTS. The RTS signal is used to indicate data is about to be","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231238,"byte_end":231308,"line_start":117,"line_end":117,"column_start":1,"column_end":71}},{"value":"/ transmitted. [`Uart`] is not compatible with this implementation.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231309,"byte_end":231378,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ Connecting the Raspberry Pi's RTS and CTS pins incorrectly could damage","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231379,"byte_end":231454,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/ the Pi or the external device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231455,"byte_end":231489,"line_start":120,"line_end":120,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231490,"byte_end":231493,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ When [`Uart`] is controlling a UART peripheral, enabling hardware flow","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231494,"byte_end":231568,"line_start":122,"line_end":122,"column_start":1,"column_end":75}},{"value":"/ control will also configure the RTS and CTS pins. On Raspberry Pi models","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231569,"byte_end":231645,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ with a 40-pin GPIO header, RTS is tied to BCM GPIO 17 (physical pin 11)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231646,"byte_end":231721,"line_start":124,"line_end":124,"column_start":1,"column_end":76}},{"value":"/ and CTS is tied to BCM GPIO 16 (physical pin 36). RTS and CTS aren't","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231722,"byte_end":231794,"line_start":125,"line_end":125,"column_start":1,"column_end":73}},{"value":"/ available on models with a 26-pin header, except for the Raspberry Pi B","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231795,"byte_end":231870,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/ Rev 2, which exposes RTS and CTS through its unpopulated P5 header with","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231871,"byte_end":231946,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ RTS on BCM GPIO 31 (physical pin 6) and CTS on BCM GPIO 30 (physical pin","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":231947,"byte_end":232023,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"/ 5).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232024,"byte_end":232031,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232032,"byte_end":232035,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ The RTS and CTS pins are reset to their original state when [`Uart`] goes","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232036,"byte_end":232113,"line_start":131,"line_end":131,"column_start":1,"column_end":78}},{"value":"/ out of scope. Note that `drop` methods aren't called when a process is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232114,"byte_end":232188,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ abnormally terminated, for instance when a user presses <kbd>Ctrl</kbd> +","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232189,"byte_end":232266,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/ <kbd>C</kbd> and the `SIGINT` signal isn't caught, which prevents [`Uart`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232267,"byte_end":232345,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ from resetting the pins. You can catch those using crates such as","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232346,"byte_end":232415,"line_start":135,"line_end":135,"column_start":1,"column_end":70}},{"value":"/ [`simple_signal`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232416,"byte_end":232438,"line_start":136,"line_end":136,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232439,"byte_end":232442,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ## Troubleshooting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232443,"byte_end":232465,"line_start":138,"line_end":138,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232466,"byte_end":232469,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ### Permission denied","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232470,"byte_end":232495,"line_start":140,"line_end":140,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232496,"byte_end":232499,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ If [`new`] or [`with_path`] returns an `io::ErrorKind::PermissionDenied`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232500,"byte_end":232576,"line_start":142,"line_end":142,"column_start":1,"column_end":77}},{"value":"/ error, make sure the file permissions for the specified device are correct,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232577,"byte_end":232656,"line_start":143,"line_end":143,"column_start":1,"column_end":80}},{"value":"/ and the current user is a member of the group that owns the device, which is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232657,"byte_end":232737,"line_start":144,"line_end":144,"column_start":1,"column_end":81}},{"value":"/ usually either `dialout` or `tty`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232738,"byte_end":232776,"line_start":145,"line_end":145,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232777,"byte_end":232780,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ [documentation]: https://www.raspberrypi.org/documentation/configuration/uart.md","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232781,"byte_end":232865,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"/ [`simple_signal`]: https://crates.io/crates/simple-signal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232866,"byte_end":232927,"line_start":148,"line_end":148,"column_start":1,"column_end":62}},{"value":"/ [`Uart`]: struct.Uart.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232928,"byte_end":232958,"line_start":149,"line_end":149,"column_start":1,"column_end":31}},{"value":"/ [`new`]: struct.Uart.html#method.new","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":232959,"byte_end":232999,"line_start":150,"line_end":150,"column_start":1,"column_end":41}},{"value":"/ [`with_path`]: struct.Uart.html#method.with_path","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":233000,"byte_end":233052,"line_start":151,"line_end":151,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2644},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234000,"byte_end":234002,"line_start":191,"line_end":191,"column_start":5,"column_end":7},"name":"Io","qualname":"::uart::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":2643},"children":[],"decl_id":null,"docs":" I/O error.\n","sig":null,"attributes":[{"value":"/ I/O error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":233981,"byte_end":233995,"line_start":190,"line_end":190,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2647},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234039,"byte_end":234043,"line_start":193,"line_end":193,"column_start":5,"column_end":9},"name":"Gpio","qualname":"::uart::Error::Gpio","value":"Error::Gpio(gpio::Error)","parent":{"krate":0,"index":2643},"children":[],"decl_id":null,"docs":" GPIO error.\n","sig":null,"attributes":[{"value":"/ GPIO error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234019,"byte_end":234034,"line_start":192,"line_end":192,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2650},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234100,"byte_end":234112,"line_start":195,"line_end":195,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::uart::Error::InvalidValue","value":"Error::InvalidValue","parent":{"krate":0,"index":2643},"children":[],"decl_id":null,"docs":" Invalid or unsupported value.\n","sig":null,"attributes":[{"value":"/ Invalid or unsupported value.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234062,"byte_end":234095,"line_start":194,"line_end":194,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":2643},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":233969,"byte_end":233974,"line_start":189,"line_end":189,"column_start":10,"column_end":15},"name":"Error","qualname":"::uart::Error","value":"pub enum Error { Io(io::Error), Gpio(gpio::Error), InvalidValue, }","parent":null,"children":[{"krate":0,"index":2644},{"krate":0,"index":2647},{"krate":0,"index":2650}],"decl_id":null,"docs":" Errors that can occur when accessing the UART peripheral.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when accessing the UART peripheral.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":233881,"byte_end":233942,"line_start":187,"line_end":187,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":1667},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234926,"byte_end":234932,"line_start":229,"line_end":229,"column_start":10,"column_end":16},"name":"Result","qualname":"::uart::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type returned from methods that can have `uart::Error`s.\n","sig":null,"attributes":[{"value":"/ Result type returned from methods that can have `uart::Error`s.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234849,"byte_end":234916,"line_start":228,"line_end":228,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2655},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235336,"byte_end":235340,"line_start":241,"line_end":241,"column_start":5,"column_end":9},"name":"None","qualname":"::uart::Parity::None","value":"Parity::None","parent":{"krate":0,"index":2654},"children":[],"decl_id":null,"docs":" No parity bit.\n","sig":null,"attributes":[{"value":"/ No parity bit.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235313,"byte_end":235331,"line_start":240,"line_end":240,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2657},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235367,"byte_end":235371,"line_start":243,"line_end":243,"column_start":5,"column_end":9},"name":"Even","qualname":"::uart::Parity::Even","value":"Parity::Even","parent":{"krate":0,"index":2654},"children":[],"decl_id":null,"docs":" Even parity.\n","sig":null,"attributes":[{"value":"/ Even parity.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235346,"byte_end":235362,"line_start":242,"line_end":242,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2659},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235397,"byte_end":235400,"line_start":245,"line_end":245,"column_start":5,"column_end":8},"name":"Odd","qualname":"::uart::Parity::Odd","value":"Parity::Odd","parent":{"krate":0,"index":2654},"children":[],"decl_id":null,"docs":" Odd parity.\n","sig":null,"attributes":[{"value":"/ Odd parity.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235377,"byte_end":235392,"line_start":244,"line_end":244,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2661},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235438,"byte_end":235442,"line_start":247,"line_end":247,"column_start":5,"column_end":9},"name":"Mark","qualname":"::uart::Parity::Mark","value":"Parity::Mark","parent":{"krate":0,"index":2654},"children":[],"decl_id":null,"docs":" Sets parity bit to `1`.\n","sig":null,"attributes":[{"value":"/ Sets parity bit to `1`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235406,"byte_end":235433,"line_start":246,"line_end":246,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2663},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235480,"byte_end":235485,"line_start":249,"line_end":249,"column_start":5,"column_end":10},"name":"Space","qualname":"::uart::Parity::Space","value":"Parity::Space","parent":{"krate":0,"index":2654},"children":[],"decl_id":null,"docs":" Sets parity bit to `0`.\n","sig":null,"attributes":[{"value":"/ Sets parity bit to `0`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235448,"byte_end":235475,"line_start":248,"line_end":248,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":2654},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235300,"byte_end":235306,"line_start":239,"line_end":239,"column_start":10,"column_end":16},"name":"Parity","qualname":"::uart::Parity","value":"pub enum Parity { None, Even, Odd, Mark, Space, }","parent":null,"children":[{"krate":0,"index":2655},{"krate":0,"index":2657},{"krate":0,"index":2659},{"krate":0,"index":2661},{"krate":0,"index":2663}],"decl_id":null,"docs":" Parity bit modes.","sig":null,"attributes":[{"value":"/ Parity bit modes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234965,"byte_end":234986,"line_start":231,"line_end":231,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234987,"byte_end":234990,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ The parity bit mode determines how the parity bit is calculated.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234991,"byte_end":235059,"line_start":233,"line_end":233,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235060,"byte_end":235063,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ `None` omits the parity bit. `Even` and `Odd` count the total number of","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235064,"byte_end":235139,"line_start":235,"line_end":235,"column_start":1,"column_end":76}},{"value":"/ 1-bits in the data bits. `Mark` and `Space` always set the parity","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235140,"byte_end":235209,"line_start":236,"line_end":236,"column_start":1,"column_end":70}},{"value":"/ bit to `1` or `0` respectively.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235210,"byte_end":235245,"line_start":237,"line_end":237,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2677},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236059,"byte_end":236063,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"None","qualname":"::uart::ParityCheck::None","value":"ParityCheck::None","parent":{"krate":0,"index":2676},"children":[],"decl_id":null,"docs":" Ignores parity errors.\n","sig":null,"attributes":[{"value":"/ Ignores parity errors.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236028,"byte_end":236054,"line_start":269,"line_end":269,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2679},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236132,"byte_end":236137,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Strip","qualname":"::uart::ParityCheck::Strip","value":"ParityCheck::Strip","parent":{"krate":0,"index":2676},"children":[],"decl_id":null,"docs":" Removes bytes with parity errors from the input queue.\n","sig":null,"attributes":[{"value":"/ Removes bytes with parity errors from the input queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236069,"byte_end":236127,"line_start":271,"line_end":271,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2681},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236202,"byte_end":236209,"line_start":274,"line_end":274,"column_start":5,"column_end":12},"name":"Replace","qualname":"::uart::ParityCheck::Replace","value":"ParityCheck::Replace","parent":{"krate":0,"index":2676},"children":[],"decl_id":null,"docs":" Replaces bytes with parity errors with a `0` byte.\n","sig":null,"attributes":[{"value":"/ Replaces bytes with parity errors with a `0` byte.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236143,"byte_end":236197,"line_start":273,"line_end":273,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2683},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236407,"byte_end":236411,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Mark","qualname":"::uart::ParityCheck::Mark","value":"ParityCheck::Mark","parent":{"krate":0,"index":2676},"children":[],"decl_id":null,"docs":" Marks bytes with parity errors with a preceding `255` and `0` byte.","sig":null,"attributes":[{"value":"/ Marks bytes with parity errors with a preceding `255` and `0` byte.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236215,"byte_end":236286,"line_start":275,"line_end":275,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236291,"byte_end":236294,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Actual `255` bytes are replaced with two `255` bytes to avoid confusion","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236299,"byte_end":236374,"line_start":277,"line_end":277,"column_start":5,"column_end":80}},{"value":"/ with parity errors.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236379,"byte_end":236402,"line_start":278,"line_end":278,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":2676},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236010,"byte_end":236021,"line_start":268,"line_end":268,"column_start":10,"column_end":21},"name":"ParityCheck","qualname":"::uart::ParityCheck","value":"pub enum ParityCheck { None, Strip, Replace, Mark, }","parent":null,"children":[{"krate":0,"index":2677},{"krate":0,"index":2679},{"krate":0,"index":2681},{"krate":0,"index":2683}],"decl_id":null,"docs":" Parity check modes.","sig":null,"attributes":[{"value":"/ Parity check modes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235860,"byte_end":235883,"line_start":264,"line_end":264,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235884,"byte_end":235887,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ The parity check mode determines how parity errors are handled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235888,"byte_end":235955,"line_start":266,"line_end":266,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2697},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236876,"byte_end":236881,"line_start":297,"line_end":297,"column_start":5,"column_end":10},"name":"Input","qualname":"::uart::Queue::Input","value":"Queue::Input","parent":{"krate":0,"index":2696},"children":[],"decl_id":null,"docs":" Input queue.\n","sig":null,"attributes":[{"value":"/ Input queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236855,"byte_end":236871,"line_start":296,"line_end":296,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2699},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236909,"byte_end":236915,"line_start":299,"line_end":299,"column_start":5,"column_end":11},"name":"Output","qualname":"::uart::Queue::Output","value":"Queue::Output","parent":{"krate":0,"index":2696},"children":[],"decl_id":null,"docs":" Output queue.\n","sig":null,"attributes":[{"value":"/ Output queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236887,"byte_end":236904,"line_start":298,"line_end":298,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2701},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236942,"byte_end":236946,"line_start":301,"line_end":301,"column_start":5,"column_end":9},"name":"Both","qualname":"::uart::Queue::Both","value":"Queue::Both","parent":{"krate":0,"index":2696},"children":[],"decl_id":null,"docs":" Both queues.\n","sig":null,"attributes":[{"value":"/ Both queues.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236921,"byte_end":236937,"line_start":300,"line_end":300,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":2696},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236843,"byte_end":236848,"line_start":295,"line_end":295,"column_start":10,"column_end":15},"name":"Queue","qualname":"::uart::Queue","value":"pub enum Queue { Input, Output, Both, }","parent":null,"children":[{"krate":0,"index":2697},{"krate":0,"index":2699},{"krate":0,"index":2701}],"decl_id":null,"docs":" Queue types.\n","sig":null,"attributes":[{"value":"/ Queue types.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236772,"byte_end":236788,"line_start":293,"line_end":293,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1675},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237267,"byte_end":237273,"line_start":315,"line_end":315,"column_start":12,"column_end":18},"name":"Status","qualname":"::uart::Status","value":"Status {  }","parent":null,"children":[{"krate":0,"index":1676}],"decl_id":null,"docs":" Control signal status.\n","sig":null,"attributes":[{"value":"/ Control signal status.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237229,"byte_end":237255,"line_start":314,"line_end":314,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237541,"byte_end":237544,"line_start":326,"line_end":326,"column_start":12,"column_end":15},"name":"rts","qualname":"<Status>::rts","value":"pub fn rts(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if RTS is active.","sig":null,"attributes":[{"value":"/ Returns `true` if RTS is active.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237315,"byte_end":237351,"line_start":320,"line_end":320,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237356,"byte_end":237359,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ RTS (active low) is controlled by [`Uart`]. An active signal indicates","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237364,"byte_end":237438,"line_start":322,"line_end":322,"column_start":5,"column_end":79}},{"value":"/ [`Uart`] is ready to receive more data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237443,"byte_end":237486,"line_start":323,"line_end":323,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237491,"byte_end":237494,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ [`Uart`]: struct.Uart.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237499,"byte_end":237529,"line_start":325,"line_end":325,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237813,"byte_end":237816,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"cts","qualname":"<Status>::cts","value":"pub fn cts(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if CTS is active.","sig":null,"attributes":[{"value":"/ Returns `true` if CTS is active.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237608,"byte_end":237644,"line_start":330,"line_end":330,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237649,"byte_end":237652,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ CTS (active low) is controlled by the external device. An active signal","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237657,"byte_end":237732,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/ indicates the external device is ready to receive more data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237737,"byte_end":237801,"line_start":333,"line_end":333,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238378,"byte_end":238381,"line_start":349,"line_end":349,"column_start":12,"column_end":15},"name":"dtr","qualname":"<Status>::dtr","value":"pub fn dtr(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if DTR is active.","sig":null,"attributes":[{"value":"/ Returns `true` if DTR is active.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237880,"byte_end":237916,"line_start":338,"line_end":338,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237921,"byte_end":237924,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ DTR (active low) is controlled by [`Uart`]. When communicating with a","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237929,"byte_end":238002,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ modem, an active signal is used to place or accept a call. An inactive","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238007,"byte_end":238081,"line_start":341,"line_end":341,"column_start":5,"column_end":79}},{"value":"/ signal causes the modem to hang up. Other devices may use DTR and DSR","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238086,"byte_end":238159,"line_start":342,"line_end":342,"column_start":5,"column_end":78}},{"value":"/ for flow control.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238164,"byte_end":238185,"line_start":343,"line_end":343,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238190,"byte_end":238193,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ DTR is not supported by the Raspberry Pi's UART peripherals,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238198,"byte_end":238262,"line_start":345,"line_end":345,"column_start":5,"column_end":69}},{"value":"/ but may be available on some USB to serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238267,"byte_end":238323,"line_start":346,"line_end":346,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238328,"byte_end":238331,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ [`Uart`]: struct.Uart.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238336,"byte_end":238366,"line_start":348,"line_end":348,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238880,"byte_end":238883,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"dsr","qualname":"<Status>::dsr","value":"pub fn dsr(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if DSR is active.","sig":null,"attributes":[{"value":"/ Returns `true` if DSR is active.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238445,"byte_end":238481,"line_start":353,"line_end":353,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238486,"byte_end":238489,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ DSR (active low) is controlled by the external device. When","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238494,"byte_end":238557,"line_start":355,"line_end":355,"column_start":5,"column_end":68}},{"value":"/ communicating with a modem, an active signal indicates the modem is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238562,"byte_end":238633,"line_start":356,"line_end":356,"column_start":5,"column_end":76}},{"value":"/ ready for data transmission. Other devices may use DTR and DSR for flow","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238638,"byte_end":238713,"line_start":357,"line_end":357,"column_start":5,"column_end":80}},{"value":"/ control.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238718,"byte_end":238730,"line_start":358,"line_end":358,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238735,"byte_end":238738,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ DSR is not supported by the Raspberry Pi's UART peripherals,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238743,"byte_end":238807,"line_start":360,"line_end":360,"column_start":5,"column_end":69}},{"value":"/ but may be available on some USB to serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238812,"byte_end":238868,"line_start":361,"line_end":361,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239309,"byte_end":239312,"line_start":374,"line_end":374,"column_start":12,"column_end":15},"name":"dcd","qualname":"<Status>::dcd","value":"pub fn dcd(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if DCD is active.","sig":null,"attributes":[{"value":"/ Returns `true` if DCD is active.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238947,"byte_end":238983,"line_start":366,"line_end":366,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238988,"byte_end":238991,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ DCD (active low) is controlled by the external device. When","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":238996,"byte_end":239059,"line_start":368,"line_end":368,"column_start":5,"column_end":68}},{"value":"/ communicating with a modem, an active signal indicates a connection is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239064,"byte_end":239138,"line_start":369,"line_end":369,"column_start":5,"column_end":79}},{"value":"/ established.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239143,"byte_end":239159,"line_start":370,"line_end":370,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239164,"byte_end":239167,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ DCD is not supported by the Raspberry Pi's UART peripherals,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239172,"byte_end":239236,"line_start":372,"line_end":372,"column_start":5,"column_end":69}},{"value":"/ but may be available on some USB to serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239241,"byte_end":239297,"line_start":373,"line_end":373,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239724,"byte_end":239726,"line_start":386,"line_end":386,"column_start":12,"column_end":14},"name":"ri","qualname":"<Status>::ri","value":"pub fn ri(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if RI is active.","sig":null,"attributes":[{"value":"/ Returns `true` if RI is active.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239376,"byte_end":239411,"line_start":378,"line_end":378,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239416,"byte_end":239419,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ RI (active low) is controlled by the external device. When","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239424,"byte_end":239486,"line_start":380,"line_end":380,"column_start":5,"column_end":67}},{"value":"/ communicating with a modem, an active signal indicates an incoming","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239491,"byte_end":239561,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/ call.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239566,"byte_end":239575,"line_start":382,"line_end":382,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239580,"byte_end":239583,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ RI is not supported by the Raspberry Pi's UART peripherals,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239588,"byte_end":239651,"line_start":384,"line_end":384,"column_start":5,"column_end":68}},{"value":"/ but may be available on some USB to serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239656,"byte_end":239712,"line_start":385,"line_end":385,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2730},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241141,"byte_end":241145,"line_start":432,"line_end":432,"column_start":12,"column_end":16},"name":"Uart","qualname":"::uart::Uart","value":"Uart {  }","parent":null,"children":[{"krate":0,"index":2731}],"decl_id":null,"docs":" Provides access to the Raspberry Pi's UART peripherals and any USB to\n serial adapters.","sig":null,"attributes":[{"value":"/ Provides access to the Raspberry Pi's UART peripherals and any USB to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240554,"byte_end":240627,"line_start":421,"line_end":421,"column_start":1,"column_end":74}},{"value":"/ serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240628,"byte_end":240648,"line_start":422,"line_end":422,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240649,"byte_end":240652,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ The `embedded-hal` [`serial::Read`], [`serial::Write`] and [`blocking::serial::Write`] trait","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240653,"byte_end":240749,"line_start":424,"line_end":424,"column_start":1,"column_end":97}},{"value":"/ implementations for `Uart` can be enabled by specifying the optional `hal` feature in the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240750,"byte_end":240843,"line_start":425,"line_end":425,"column_start":1,"column_end":94}},{"value":"/ dependency declaration for the `rppal` crate.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240844,"byte_end":240893,"line_start":426,"line_end":426,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240894,"byte_end":240897,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ [`serial::Read`]: ../../embedded_hal/serial/trait.Read.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240898,"byte_end":240961,"line_start":428,"line_end":428,"column_start":1,"column_end":64}},{"value":"/ [`serial::Write`]: ../../embedded_hal/serial/trait.Write.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":240962,"byte_end":241027,"line_start":429,"line_end":429,"column_start":1,"column_end":66}},{"value":"/ [`blocking::serial::Write`]: ../../embedded_hal/blocking/serial/trait.Write.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241028,"byte_end":241112,"line_start":430,"line_end":430,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241440,"byte_end":241443,"line_start":443,"line_end":443,"column_start":12,"column_end":15},"name":"new","qualname":"<Uart>::new","value":"pub fn new(u32, Parity, u8, u8) -> Result<Uart>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Uart`.","sig":null,"attributes":[{"value":"/ Constructs a new `Uart`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241189,"byte_end":241217,"line_start":437,"line_end":437,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241222,"byte_end":241225,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ `new` attempts to identify the UART peripheral tied to BCM GPIO 14 and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241230,"byte_end":241304,"line_start":439,"line_end":439,"column_start":5,"column_end":79}},{"value":"/ 15, and then calls [`with_path`] with the appropriate device path.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241309,"byte_end":241379,"line_start":440,"line_end":440,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241384,"byte_end":241387,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ [`with_path`]: #method.with_path","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241392,"byte_end":241428,"line_start":442,"line_end":442,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242189,"byte_end":242195,"line_start":458,"line_end":458,"column_start":12,"column_end":18},"name":"new_bt","qualname":"<Uart>::new_bt","value":"pub fn new_bt(u32, Parity, u8, u8) -> Result<Uart>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Uart` connected to the serial character device\n specified by `path`.","sig":null,"attributes":[{"value":"/ Constructs a new `Uart` connected to the serial character device","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241616,"byte_end":241684,"line_start":447,"line_end":447,"column_start":5,"column_end":73}},{"value":"/ specified by `path`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241689,"byte_end":241713,"line_start":448,"line_end":448,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241718,"byte_end":241721,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ `with_path` can be used to connect to either a UART peripheral or a USB","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241726,"byte_end":241801,"line_start":450,"line_end":450,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241806,"byte_end":241809,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ to serial adapter.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241814,"byte_end":241836,"line_start":452,"line_end":452,"column_start":5,"column_end":27}},{"value":"/ When a new `Uart` is constructed, the specified device is configured","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241841,"byte_end":241913,"line_start":453,"line_end":453,"column_start":5,"column_end":77}},{"value":"/ for non-canonical mode which processes input per character, ignores any","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241918,"byte_end":241993,"line_start":454,"line_end":454,"column_start":5,"column_end":80}},{"value":"/ special terminal input or output characters and disables local echo. DCD","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241998,"byte_end":242074,"line_start":455,"line_end":455,"column_start":5,"column_end":81}},{"value":"/ is ignored, all flow control is disabled, and the input and output queues","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242079,"byte_end":242156,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/ are flushed.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242161,"byte_end":242177,"line_start":457,"line_end":457,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242548,"byte_end":242557,"line_start":465,"line_end":465,"column_start":12,"column_end":21},"name":"with_path","qualname":"<Uart>::with_path","value":"pub fn with_path<P: AsRef<Path>>(P, u32, Parity, u8, u8) -> Result<Uart>","parent":null,"children":[],"decl_id":null,"docs":" bread and butter of setup, opens the path and makes sre it works,\n note that fir okuetooth no pins are modified\n this can be used to get custom paths.\n","sig":null,"attributes":[{"value":"/ bread and butter of setup, opens the path and makes sre it works,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242368,"byte_end":242437,"line_start":462,"line_end":462,"column_start":5,"column_end":74}},{"value":"/ note that fir okuetooth no pins are modified","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242442,"byte_end":242490,"line_start":463,"line_end":463,"column_start":5,"column_end":53}},{"value":"/ this can be used to get custom paths.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":242495,"byte_end":242536,"line_start":464,"line_end":464,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245032,"byte_end":245041,"line_start":545,"line_end":545,"column_start":12,"column_end":21},"name":"baud_rate","qualname":"<Uart>::baud_rate","value":"pub fn baud_rate(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the line speed in baud (Bd).\n","sig":null,"attributes":[{"value":"/ Returns the line speed in baud (Bd).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":244980,"byte_end":245020,"line_start":544,"line_end":544,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245698,"byte_end":245711,"line_start":562,"line_end":562,"column_start":12,"column_end":25},"name":"set_baud_rate","qualname":"<Uart>::set_baud_rate","value":"pub fn set_baud_rate(&mut Self, u32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the line speed in baud (Bd).","sig":null,"attributes":[{"value":"/ Sets the line speed in baud (Bd).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245098,"byte_end":245135,"line_start":549,"line_end":549,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245140,"byte_end":245143,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ On the Raspberry Pi, baud rate is equivalent to bit rate in bits per","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245148,"byte_end":245220,"line_start":551,"line_end":551,"column_start":5,"column_end":77}},{"value":"/ second (bit/s).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245225,"byte_end":245244,"line_start":552,"line_end":552,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245249,"byte_end":245252,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Accepted values:","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245257,"byte_end":245277,"line_start":554,"line_end":554,"column_start":5,"column_end":25}},{"value":"/ `0`, `50`, `75`, `110`, `134`, `150`, `200`, `300`, `600`, `1_200`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245282,"byte_end":245353,"line_start":555,"line_end":555,"column_start":5,"column_end":76}},{"value":"/ `1_800`, `2_400`, `4_800`, `9_600`, `19_200`, `38_400`, `57_600`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245358,"byte_end":245427,"line_start":556,"line_end":556,"column_start":5,"column_end":74}},{"value":"/ `115_200`, `230_400`, `460_800`, `500_000`, `576_000`, `921_600`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245432,"byte_end":245501,"line_start":557,"line_end":557,"column_start":5,"column_end":74}},{"value":"/ `1_000_000`, `1_152_000`, `1_500_000`, `2_000_000`, `2_500_000`,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245506,"byte_end":245574,"line_start":558,"line_end":558,"column_start":5,"column_end":73}},{"value":"/ `3_000_000`, `3_500_000`, `4_000_000`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245579,"byte_end":245621,"line_start":559,"line_end":559,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245626,"byte_end":245629,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ Support for some values may be device-dependent.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245634,"byte_end":245686,"line_start":561,"line_end":561,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245929,"byte_end":245935,"line_start":571,"line_end":571,"column_start":12,"column_end":18},"name":"parity","qualname":"<Uart>::parity","value":"pub fn parity(&Self) -> Parity","parent":null,"children":[],"decl_id":null,"docs":" Returns the parity bit mode.\n","sig":null,"attributes":[{"value":"/ Returns the parity bit mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245885,"byte_end":245917,"line_start":570,"line_end":570,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246178,"byte_end":246188,"line_start":580,"line_end":580,"column_start":12,"column_end":22},"name":"set_parity","qualname":"<Uart>::set_parity","value":"pub fn set_parity(&mut Self, Parity) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the parity bit mode.","sig":null,"attributes":[{"value":"/ Sets the parity bit mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":245992,"byte_end":246021,"line_start":575,"line_end":575,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246026,"byte_end":246029,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The parity bit mode determines how the parity bit is calculated.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246034,"byte_end":246102,"line_start":577,"line_end":577,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246107,"byte_end":246110,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ Support for some modes may be device-dependent.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246115,"byte_end":246166,"line_start":579,"line_end":579,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246413,"byte_end":246425,"line_start":589,"line_end":589,"column_start":12,"column_end":24},"name":"parity_check","qualname":"<Uart>::parity_check","value":"pub fn parity_check(&Self) -> ParityCheck","parent":null,"children":[],"decl_id":null,"docs":" Returns the parity check mode for incoming data.\n","sig":null,"attributes":[{"value":"/ Returns the parity check mode for incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246349,"byte_end":246401,"line_start":588,"line_end":588,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246822,"byte_end":246838,"line_start":602,"line_end":602,"column_start":12,"column_end":28},"name":"set_parity_check","qualname":"<Uart>::set_parity_check","value":"pub fn set_parity_check(&mut Self, ParityCheck) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Configures parity checking for incoming data.","sig":null,"attributes":[{"value":"/ Configures parity checking for incoming data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246493,"byte_end":246542,"line_start":593,"line_end":593,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246547,"byte_end":246550,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ The parity check mode determines how parity errors are handled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246555,"byte_end":246622,"line_start":595,"line_end":595,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246627,"byte_end":246630,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ By default, `parity_check` is set to [`None`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246635,"byte_end":246685,"line_start":597,"line_end":597,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246690,"byte_end":246693,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ Support for some modes may be device-dependent.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246698,"byte_end":246749,"line_start":599,"line_end":599,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246754,"byte_end":246757,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ [`None`]: enum.ParityCheck.html#variant.None","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":246762,"byte_end":246810,"line_start":601,"line_end":601,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247082,"byte_end":247091,"line_start":611,"line_end":611,"column_start":12,"column_end":21},"name":"data_bits","qualname":"<Uart>::data_bits","value":"pub fn data_bits(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of data bits.\n","sig":null,"attributes":[{"value":"/ Returns the number of data bits.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247034,"byte_end":247070,"line_start":610,"line_end":610,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247310,"byte_end":247323,"line_start":620,"line_end":620,"column_start":12,"column_end":25},"name":"set_data_bits","qualname":"<Uart>::set_data_bits","value":"pub fn set_data_bits(&mut Self, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of data bits.","sig":null,"attributes":[{"value":"/ Sets the number of data bits.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247147,"byte_end":247180,"line_start":615,"line_end":615,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247185,"byte_end":247188,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ Accepted values: `5`, `6`, `7`, `8`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247193,"byte_end":247233,"line_start":617,"line_end":617,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247238,"byte_end":247241,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ Support for some values may be device-dependent.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247246,"byte_end":247298,"line_start":619,"line_end":619,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247543,"byte_end":247552,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"stop_bits","qualname":"<Uart>::stop_bits","value":"pub fn stop_bits(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of stop bits.\n","sig":null,"attributes":[{"value":"/ Returns the number of stop bits.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247495,"byte_end":247531,"line_start":628,"line_end":628,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247761,"byte_end":247774,"line_start":638,"line_end":638,"column_start":12,"column_end":25},"name":"set_stop_bits","qualname":"<Uart>::set_stop_bits","value":"pub fn set_stop_bits(&mut Self, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of stop bits.","sig":null,"attributes":[{"value":"/ Sets the number of stop bits.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247608,"byte_end":247641,"line_start":633,"line_end":633,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247646,"byte_end":247649,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Accepted values: `1`, `2`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247654,"byte_end":247684,"line_start":635,"line_end":635,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247689,"byte_end":247692,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ Support for some values may be device-dependent.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247697,"byte_end":247749,"line_start":637,"line_end":637,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248004,"byte_end":248010,"line_start":647,"line_end":647,"column_start":12,"column_end":18},"name":"status","qualname":"<Uart>::status","value":"pub fn status(&Self) -> Result<Status>","parent":null,"children":[],"decl_id":null,"docs":" Returns the status of the control signals.\n","sig":null,"attributes":[{"value":"/ Returns the status of the control signals.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":247946,"byte_end":247992,"line_start":646,"line_end":646,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248336,"byte_end":248343,"line_start":657,"line_end":657,"column_start":12,"column_end":19},"name":"set_dtr","qualname":"<Uart>::set_dtr","value":"pub fn set_dtr(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets DTR to active (`true`) or inactive (`false`).","sig":null,"attributes":[{"value":"/ Sets DTR to active (`true`) or inactive (`false`).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248132,"byte_end":248186,"line_start":653,"line_end":653,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248191,"byte_end":248194,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ DTR is not supported by the Raspberry Pi's UART peripherals,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248199,"byte_end":248263,"line_start":655,"line_end":655,"column_start":5,"column_end":69}},{"value":"/ but may be available on some USB to serial adapters.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248268,"byte_end":248324,"line_start":656,"line_end":656,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248504,"byte_end":248511,"line_start":662,"line_end":662,"column_start":12,"column_end":19},"name":"set_rts","qualname":"<Uart>::set_rts","value":"pub fn set_rts(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets RTS to active (`true`) or inactive (`false`).\n","sig":null,"attributes":[{"value":"/ Sets RTS to active (`true`) or inactive (`false`).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248438,"byte_end":248492,"line_start":661,"line_end":661,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248682,"byte_end":248703,"line_start":667,"line_end":667,"column_start":12,"column_end":33},"name":"software_flow_control","qualname":"<Uart>::software_flow_control","value":"pub fn software_flow_control(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if XON/XOFF software flow control is enabled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if XON/XOFF software flow control is enabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248606,"byte_end":248670,"line_start":666,"line_end":666,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249939,"byte_end":249964,"line_start":694,"line_end":694,"column_start":12,"column_end":37},"name":"set_software_flow_control","qualname":"<Uart>::set_software_flow_control","value":"pub fn set_software_flow_control(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables or disables XON/XOFF software flow control.","sig":null,"attributes":[{"value":"/ Enables or disables XON/XOFF software flow control.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248773,"byte_end":248828,"line_start":671,"line_end":671,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248833,"byte_end":248836,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ When software flow control is enabled, incoming XON (decimal 17) and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248841,"byte_end":248913,"line_start":673,"line_end":673,"column_start":5,"column_end":77}},{"value":"/ XOFF (decimal 19) control characters are filtered from the input queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248918,"byte_end":248993,"line_start":674,"line_end":674,"column_start":5,"column_end":80}},{"value":"/ When XOFF is received, the transmission of data in the output queue is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":248998,"byte_end":249072,"line_start":675,"line_end":675,"column_start":5,"column_end":79}},{"value":"/ paused until the external device sends XON. XOFF is automatically sent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249077,"byte_end":249151,"line_start":676,"line_end":676,"column_start":5,"column_end":79}},{"value":"/ to the external device to prevent the input queue from overflowing.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249156,"byte_end":249227,"line_start":677,"line_end":677,"column_start":5,"column_end":76}},{"value":"/ XON is sent when the input queue is ready for more data. You can also","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249232,"byte_end":249305,"line_start":678,"line_end":678,"column_start":5,"column_end":78}},{"value":"/ manually send these control characters by calling [`send_stop`] and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249310,"byte_end":249381,"line_start":679,"line_end":679,"column_start":5,"column_end":76}},{"value":"/ [`send_start`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249386,"byte_end":249405,"line_start":680,"line_end":680,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249410,"byte_end":249413,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ By default, software flow control is disabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249418,"byte_end":249468,"line_start":682,"line_end":682,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249473,"byte_end":249476,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Support for XON/XOFF software flow control is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249481,"byte_end":249530,"line_start":684,"line_end":684,"column_start":5,"column_end":54}},{"value":"/ device-dependent. You can manually implement XON/XOFF by disabling","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249535,"byte_end":249605,"line_start":685,"line_end":685,"column_start":5,"column_end":75}},{"value":"/ software flow control, parsing incoming XON/XOFF control characters","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249610,"byte_end":249681,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/ received with [`read`], and sending XON/XOFF when needed using","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249686,"byte_end":249752,"line_start":687,"line_end":687,"column_start":5,"column_end":71}},{"value":"/ [`write`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249757,"byte_end":249771,"line_start":688,"line_end":688,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249776,"byte_end":249779,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ [`send_start`]: #method.send_start","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249784,"byte_end":249822,"line_start":690,"line_end":690,"column_start":5,"column_end":43}},{"value":"/ [`send_stop`]: #method.send_stop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249827,"byte_end":249863,"line_start":691,"line_end":691,"column_start":5,"column_end":41}},{"value":"/ [`read`]: #method.read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249868,"byte_end":249894,"line_start":692,"line_end":692,"column_start":5,"column_end":31}},{"value":"/ [`write`]: #method.write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":249899,"byte_end":249927,"line_start":693,"line_end":693,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250343,"byte_end":250364,"line_start":707,"line_end":707,"column_start":12,"column_end":33},"name":"hardware_flow_control","qualname":"<Uart>::hardware_flow_control","value":"pub fn hardware_flow_control(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if RTS/CTS hardware flow control is enabled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if RTS/CTS hardware flow control is enabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250268,"byte_end":250331,"line_start":706,"line_end":706,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251865,"byte_end":251890,"line_start":739,"line_end":739,"column_start":12,"column_end":37},"name":"set_hardware_flow_control","qualname":"<Uart>::set_hardware_flow_control","value":"pub fn set_hardware_flow_control(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables or disables RTS/CTS hardware flow control.","sig":null,"attributes":[{"value":"/ Enables or disables RTS/CTS hardware flow control.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250434,"byte_end":250488,"line_start":711,"line_end":711,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250493,"byte_end":250496,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ When hardware flow control is enabled, the RTS line (active low) is","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250501,"byte_end":250572,"line_start":713,"line_end":713,"column_start":5,"column_end":76}},{"value":"/ automatically driven high to prevent the input queue from overflowing,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250577,"byte_end":250651,"line_start":714,"line_end":714,"column_start":5,"column_end":79}},{"value":"/ and driven low when the input queue is ready for more data. When the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250656,"byte_end":250728,"line_start":715,"line_end":715,"column_start":5,"column_end":77}},{"value":"/ CTS line (active low) is driven high by the external device, all data","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250733,"byte_end":250806,"line_start":716,"line_end":716,"column_start":5,"column_end":78}},{"value":"/ in the output queue is held until CTS is driven low. You can also","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250811,"byte_end":250880,"line_start":717,"line_end":717,"column_start":5,"column_end":74}},{"value":"/ manually change the active state of RTS by calling [`send_stop`] and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250885,"byte_end":250957,"line_start":718,"line_end":718,"column_start":5,"column_end":77}},{"value":"/ [`send_start`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250962,"byte_end":250981,"line_start":719,"line_end":719,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250986,"byte_end":250989,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ When `Uart` is controlling a UART peripheral, enabling hardware flow","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":250994,"byte_end":251066,"line_start":721,"line_end":721,"column_start":5,"column_end":77}},{"value":"/ control will also configure the RTS and CTS pins.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251071,"byte_end":251124,"line_start":722,"line_end":722,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251129,"byte_end":251132,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ More information on hardware flow control can be found [here].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251137,"byte_end":251203,"line_start":724,"line_end":724,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251208,"byte_end":251211,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ By default, hardware flow control is disabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251216,"byte_end":251266,"line_start":726,"line_end":726,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251271,"byte_end":251274,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ Support for RTS/CTS hardware flow control is device-dependent. You can","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251279,"byte_end":251353,"line_start":728,"line_end":728,"column_start":5,"column_end":79}},{"value":"/ manually implement RTS/CTS using [`cts`], [`send_stop`] and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251358,"byte_end":251421,"line_start":729,"line_end":729,"column_start":5,"column_end":68}},{"value":"/ [`send_start`], or by disabling hardware flow control and configuring","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251426,"byte_end":251499,"line_start":730,"line_end":730,"column_start":5,"column_end":78}},{"value":"/ an [`OutputPin`] for RTS and an [`InputPin`] for CTS.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251504,"byte_end":251561,"line_start":731,"line_end":731,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251566,"byte_end":251569,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ [here]: index.html#hardware-flow-control","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251574,"byte_end":251618,"line_start":733,"line_end":733,"column_start":5,"column_end":49}},{"value":"/ [`cts`]: struct.Status.html#method.cts","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251623,"byte_end":251665,"line_start":734,"line_end":734,"column_start":5,"column_end":47}},{"value":"/ [`send_start`]: #method.send_start","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251670,"byte_end":251708,"line_start":735,"line_end":735,"column_start":5,"column_end":43}},{"value":"/ [`send_stop`]: #method.send_stop","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251713,"byte_end":251749,"line_start":736,"line_end":736,"column_start":5,"column_end":41}},{"value":"/ [`OutputPin`]: ../gpio/struct.OutputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251754,"byte_end":251802,"line_start":737,"line_end":737,"column_start":5,"column_end":53}},{"value":"/ [`InputPin`]: ../gpio/struct.InputPin.html","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":251807,"byte_end":251853,"line_start":738,"line_end":738,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253508,"byte_end":253517,"line_start":778,"line_end":778,"column_start":12,"column_end":21},"name":"send_stop","qualname":"<Uart>::send_stop","value":"pub fn send_stop(&Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Requests the external device to pause its transmission using flow control.","sig":null,"attributes":[{"value":"/ Requests the external device to pause its transmission using flow control.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253206,"byte_end":253284,"line_start":771,"line_end":771,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253289,"byte_end":253292,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ If software flow control is enabled, `send_stop`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253297,"byte_end":253349,"line_start":773,"line_end":773,"column_start":5,"column_end":57}},{"value":"/ sends the XOFF control character.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253354,"byte_end":253391,"line_start":774,"line_end":774,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253396,"byte_end":253399,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ If hardware flow control is enabled, `send_stop` sets RTS to its","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253404,"byte_end":253472,"line_start":776,"line_end":776,"column_start":5,"column_end":73}},{"value":"/ inactive state.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253477,"byte_end":253496,"line_start":777,"line_end":777,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254084,"byte_end":254094,"line_start":797,"line_end":797,"column_start":12,"column_end":22},"name":"send_start","qualname":"<Uart>::send_start","value":"pub fn send_start(&Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Requests the external device to resume its transmission using flow control.","sig":null,"attributes":[{"value":"/ Requests the external device to resume its transmission using flow control.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253782,"byte_end":253861,"line_start":790,"line_end":790,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253866,"byte_end":253869,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ If software flow control is enabled, `send_start`","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253874,"byte_end":253927,"line_start":792,"line_end":792,"column_start":5,"column_end":58}},{"value":"/ sends the XON control character.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253932,"byte_end":253968,"line_start":793,"line_end":793,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253973,"byte_end":253976,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ If hardware flow control is enabled, `send_start` sets RTS to its","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":253981,"byte_end":254050,"line_start":795,"line_end":795,"column_start":5,"column_end":74}},{"value":"/ active state.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254055,"byte_end":254072,"line_start":796,"line_end":796,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254477,"byte_end":254493,"line_start":812,"line_end":812,"column_start":12,"column_end":28},"name":"is_read_blocking","qualname":"<Uart>::is_read_blocking","value":"pub fn is_read_blocking(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [`read`] is configured to block when needed.","sig":null,"attributes":[{"value":"/ Returns `true` if [`read`] is configured to block when needed.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254359,"byte_end":254425,"line_start":809,"line_end":809,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254430,"byte_end":254433,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ [`read`]: #method.write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254438,"byte_end":254465,"line_start":811,"line_end":811,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254675,"byte_end":254692,"line_start":819,"line_end":819,"column_start":12,"column_end":29},"name":"is_write_blocking","qualname":"<Uart>::is_write_blocking","value":"pub fn is_write_blocking(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [`write`] is configured to block when needed.","sig":null,"attributes":[{"value":"/ Returns `true` if [`write`] is configured to block when needed.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254555,"byte_end":254622,"line_start":816,"line_end":816,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254627,"byte_end":254630,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ [`write`]: #method.write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254635,"byte_end":254663,"line_start":818,"line_end":818,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256389,"byte_end":256402,"line_start":855,"line_end":855,"column_start":12,"column_end":25},"name":"set_read_mode","qualname":"<Uart>::set_read_mode","value":"pub fn set_read_mode(&mut Self, u8, Duration) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the blocking mode for subsequent calls to [`read`].","sig":null,"attributes":[{"value":"/ Sets the blocking mode for subsequent calls to [`read`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254755,"byte_end":254815,"line_start":823,"line_end":823,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254820,"byte_end":254823,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ `min_length` indicates the minimum number of requested bytes. This","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254828,"byte_end":254898,"line_start":825,"line_end":825,"column_start":5,"column_end":75}},{"value":"/ value may differ from the actual buffer length. Maximum value: 255","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254903,"byte_end":254973,"line_start":826,"line_end":826,"column_start":5,"column_end":75}},{"value":"/ bytes.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254978,"byte_end":254988,"line_start":827,"line_end":827,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":254993,"byte_end":254996,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ `timeout` indicates how long [`read`] blocks while waiting for","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255001,"byte_end":255067,"line_start":829,"line_end":829,"column_start":5,"column_end":71}},{"value":"/ incoming data. `timeout` uses a 0.1 second resolution. Maximum","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255072,"byte_end":255138,"line_start":830,"line_end":830,"column_start":5,"column_end":71}},{"value":"/ value: 25.5 seconds.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255143,"byte_end":255167,"line_start":831,"line_end":831,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255172,"byte_end":255175,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ [`read`] operates in one of four modes, depending on the specified","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255180,"byte_end":255250,"line_start":833,"line_end":833,"column_start":5,"column_end":75}},{"value":"/ `min_length` and `timeout` values:","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255255,"byte_end":255293,"line_start":834,"line_end":834,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255298,"byte_end":255301,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ * **Non-blocking read** (`min_length` = 0, `timeout` = 0). [`read`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255306,"byte_end":255377,"line_start":836,"line_end":836,"column_start":5,"column_end":76}},{"value":"/ retrieves any available data and returns immediately.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255382,"byte_end":255439,"line_start":837,"line_end":837,"column_start":5,"column_end":62}},{"value":"/ * **Blocking read** (`min_length` > 0, `timeout` = 0). [`read`] blocks","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255444,"byte_end":255518,"line_start":838,"line_end":838,"column_start":5,"column_end":79}},{"value":"/ until at least `min_length` bytes are available, or the provided buffer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255523,"byte_end":255598,"line_start":839,"line_end":839,"column_start":5,"column_end":80}},{"value":"/ is full.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255603,"byte_end":255615,"line_start":840,"line_end":840,"column_start":5,"column_end":17}},{"value":"/ * **Read with timeout** (`min_length` = 0, `timeout` > 0). [`read`]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255620,"byte_end":255691,"line_start":841,"line_end":841,"column_start":5,"column_end":76}},{"value":"/ blocks until at least one byte is available, or the `timeout` duration","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255696,"byte_end":255770,"line_start":842,"line_end":842,"column_start":5,"column_end":79}},{"value":"/ elapses.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255775,"byte_end":255787,"line_start":843,"line_end":843,"column_start":5,"column_end":17}},{"value":"/ * **Read with inter-byte timeout** (`min_length` > 0, `timeout` > 0).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255792,"byte_end":255865,"line_start":844,"line_end":844,"column_start":5,"column_end":78}},{"value":"/ [`read`] blocks until at least `min_length` bytes are available, the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255870,"byte_end":255942,"line_start":845,"line_end":845,"column_start":5,"column_end":77}},{"value":"/ provided buffer is full, or the `timeout` duration elapses","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":255947,"byte_end":256009,"line_start":846,"line_end":846,"column_start":5,"column_end":67}},{"value":"/ after receiving one or more bytes. The timer is started after an","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256014,"byte_end":256082,"line_start":847,"line_end":847,"column_start":5,"column_end":73}},{"value":"/ initial byte becomes available, and is restarted after each additional","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256087,"byte_end":256161,"line_start":848,"line_end":848,"column_start":5,"column_end":79}},{"value":"/ byte. That means [`read`] will block indefinitely until at least one","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256166,"byte_end":256238,"line_start":849,"line_end":849,"column_start":5,"column_end":77}},{"value":"/ byte has been received.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256243,"byte_end":256270,"line_start":850,"line_end":850,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256275,"byte_end":256278,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ By default, [`read`] is configured as non-blocking.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256283,"byte_end":256338,"line_start":852,"line_end":852,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256343,"byte_end":256346,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ [`read`]: #method.read","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":256351,"byte_end":256377,"line_start":854,"line_end":854,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":258024,"byte_end":258038,"line_start":893,"line_end":893,"column_start":12,"column_end":26},"name":"set_write_mode","qualname":"<Uart>::set_write_mode","value":"pub fn set_write_mode(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the blocking mode for subsequent calls to [`write`].","sig":null,"attributes":[{"value":"/ Sets the blocking mode for subsequent calls to [`write`].","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257203,"byte_end":257264,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257269,"byte_end":257272,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ [`write`] operates in one of two modes, depending on the specified","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257277,"byte_end":257347,"line_start":879,"line_end":879,"column_start":5,"column_end":75}},{"value":"/ `blocking` value:","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257352,"byte_end":257373,"line_start":880,"line_end":880,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257378,"byte_end":257381,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ * **Non-blocking write**. [`write`] returns immediately after","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257386,"byte_end":257451,"line_start":882,"line_end":882,"column_start":5,"column_end":70}},{"value":"/ copying as much of the contents of the provided buffer to the output queue","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257456,"byte_end":257534,"line_start":883,"line_end":883,"column_start":5,"column_end":83}},{"value":"/ as it's able to fit.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257539,"byte_end":257563,"line_start":884,"line_end":884,"column_start":5,"column_end":29}},{"value":"/ * **Blocking write**. [`write`] blocks until the entire contents of the provided buffer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257568,"byte_end":257659,"line_start":885,"line_end":885,"column_start":5,"column_end":96}},{"value":"/ can be copied to the output queue. If flow control is enabled and the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257664,"byte_end":257737,"line_start":886,"line_end":886,"column_start":5,"column_end":78}},{"value":"/ external device has sent a stop request, the transmission of any waiting data","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257742,"byte_end":257823,"line_start":887,"line_end":887,"column_start":5,"column_end":86}},{"value":"/ in the output queue is paused until a start request has been received.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257828,"byte_end":257902,"line_start":888,"line_end":888,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257907,"byte_end":257910,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ By default, [`write`] is configured as non-blocking.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257915,"byte_end":257971,"line_start":890,"line_end":890,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257976,"byte_end":257979,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ [`write`]: #method.write","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":257984,"byte_end":258012,"line_start":892,"line_end":892,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":258789,"byte_end":258798,"line_start":914,"line_end":914,"column_start":12,"column_end":21},"name":"input_len","qualname":"<Uart>::input_len","value":"pub fn input_len(&Self) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes waiting in the input queue.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes waiting in the input queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":258718,"byte_end":258777,"line_start":913,"line_end":913,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":258950,"byte_end":258960,"line_start":919,"line_end":919,"column_start":12,"column_end":22},"name":"output_len","qualname":"<Uart>::output_len","value":"pub fn output_len(&Self) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes waiting in the output queue.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes waiting in the output queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":258878,"byte_end":258938,"line_start":918,"line_end":918,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259530,"byte_end":259540,"line_start":934,"line_end":934,"column_start":12,"column_end":22},"name":"read_bytes","qualname":"<Uart>::read_bytes","value":"pub fn read_bytes(&mut Self, &mut [u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives incoming data from the external device and stores it in\n `buffer`.","sig":null,"attributes":[{"value":"/ Receives incoming data from the external device and stores it in","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259041,"byte_end":259109,"line_start":923,"line_end":923,"column_start":5,"column_end":73}},{"value":"/ `buffer`.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259114,"byte_end":259127,"line_start":924,"line_end":924,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259132,"byte_end":259135,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ `read_bytes` operates in one of four (non)blocking modes, depending on the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259140,"byte_end":259218,"line_start":926,"line_end":926,"column_start":5,"column_end":83}},{"value":"/ settings configured by [`set_read_mode`]. By default, `read` is configured","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259223,"byte_end":259301,"line_start":927,"line_end":927,"column_start":5,"column_end":83}},{"value":"/ as non-blocking.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259306,"byte_end":259326,"line_start":928,"line_end":928,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259331,"byte_end":259334,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were read.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259339,"byte_end":259376,"line_start":930,"line_end":930,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259381,"byte_end":259384,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ [`set_read_mode`]: #method.set_read_mode","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259389,"byte_end":259433,"line_start":932,"line_end":932,"column_start":5,"column_end":49}},{"value":"/ note this was formaly read, i changed it so it is bytes as it only does that","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259438,"byte_end":259518,"line_start":933,"line_end":933,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260289,"byte_end":260300,"line_start":957,"line_end":957,"column_start":12,"column_end":23},"name":"write_bytes","qualname":"<Uart>::write_bytes","value":"pub fn write_bytes(&mut Self, &[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends the contents of `buffer` to the external device.","sig":null,"attributes":[{"value":"/ Sends the contents of `buffer` to the external device.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259814,"byte_end":259872,"line_start":947,"line_end":947,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259877,"byte_end":259880,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ `write_bytes` operates in either blocking or non-blocking mode, depending on the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259885,"byte_end":259969,"line_start":949,"line_end":949,"column_start":5,"column_end":89}},{"value":"/ settings configured by [`set_write_mode`]. By default, `write` is configured","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":259974,"byte_end":260054,"line_start":950,"line_end":950,"column_start":5,"column_end":85}},{"value":"/ as non-blocking.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260059,"byte_end":260079,"line_start":951,"line_end":951,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260084,"byte_end":260087,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ Returns how many bytes were written.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260092,"byte_end":260132,"line_start":953,"line_end":953,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260137,"byte_end":260140,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ [`set_write_mode`]: #method.set_write_mode","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260145,"byte_end":260191,"line_start":955,"line_end":955,"column_start":5,"column_end":51}},{"value":"/ note this was formaly write, I changed it so it is bytes as it only does that","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":260196,"byte_end":260277,"line_start":956,"line_end":956,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261254,"byte_end":261259,"line_start":986,"line_end":986,"column_start":12,"column_end":17},"name":"drain","qualname":"<Uart>::drain","value":"pub fn drain(&Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Blocks until all data in the output queue has been transmitted.\n","sig":null,"attributes":[{"value":"/ Blocks until all data in the output queue has been transmitted.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261175,"byte_end":261242,"line_start":985,"line_end":985,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261399,"byte_end":261404,"line_start":991,"line_end":991,"column_start":12,"column_end":17},"name":"flush","qualname":"<Uart>::flush","value":"pub fn flush(&Self, Queue) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Discards all data in the input and/or output queue.\n","sig":null,"attributes":[{"value":"/ Discards all data in the input and/or output queue.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261332,"byte_end":261387,"line_start":990,"line_end":990,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261529,"byte_end":261535,"line_start":997,"line_end":997,"column_start":12,"column_end":18},"name":"set_bt","qualname":"<Uart>::set_bt","value":"pub fn set_bt() -> Result<Uart>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261638,"byte_end":261641,"line_start":1000,"line_end":1000,"column_start":12,"column_end":15},"name":"set","qualname":"<Uart>::set","value":"pub fn set() -> Result<Uart>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261853,"byte_end":261858,"line_start":1005,"line_end":1005,"column_start":12,"column_end":17},"name":"write","qualname":"<Uart>::write","value":"pub fn write(&mut Self, String) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":"simply write bytes parsed as a String\n in future this should be able to take in numbers aswell\n","sig":null,"attributes":[{"value":"/simply write bytes parsed as a String","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261737,"byte_end":261777,"line_start":1003,"line_end":1003,"column_start":5,"column_end":45}},{"value":"/ in future this should be able to take in numbers aswell","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261782,"byte_end":261841,"line_start":1004,"line_end":1004,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":262018,"byte_end":262022,"line_start":1009,"line_end":1009,"column_start":12,"column_end":16},"name":"read","qualname":"<Uart>::read","value":"pub fn read(&mut Self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" usses read_bytes to read a String instead\n","sig":null,"attributes":[{"value":"/ usses read_bytes to read a String instead","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261961,"byte_end":262006,"line_start":1008,"line_end":1008,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":262378,"byte_end":262388,"line_start":1017,"line_end":1017,"column_start":12,"column_end":22},"name":"read_until","qualname":"<Uart>::read_until","value":"pub fn read_until(&mut Self, char) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" reads until a certain char appears, this is aspecialy usefull when doing CSV\n","sig":null,"attributes":[{"value":"/ reads until a certain char appears, this is aspecialy usefull when doing CSV","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":262286,"byte_end":262366,"line_start":1016,"line_end":1016,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":263252,"byte_end":263261,"line_start":1041,"line_end":1041,"column_start":12,"column_end":21},"name":"read_line","qualname":"<Uart>::read_line","value":"pub fn read_line(&mut Self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" reads a line from the UART\n","sig":null,"attributes":[{"value":"/ reads a line from the UART","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":263210,"byte_end":263240,"line_start":1040,"line_end":1040,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":263399,"byte_end":263407,"line_start":1045,"line_end":1045,"column_start":12,"column_end":20},"name":"read_csv","qualname":"<Uart>::read_csv","value":"pub fn read_csv<T: std::str::FromStr>(&mut Self, &mut [T]) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" reads values as a CSV and returns them in the buffer\n","sig":null,"attributes":[{"value":"/ reads values as a CSV and returns them in the buffer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":263331,"byte_end":263387,"line_start":1044,"line_end":1044,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":1734},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"servo","qualname":"::servo","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","parent":null,"children":[{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1755}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278494,"byte_end":278514,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1748},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278759,"byte_end":278764,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"Servo","qualname":"::servo::Servo","value":"Servo { min_us, max_us, enable, period }","parent":null,"children":[{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754}],"decl_id":null,"docs":" servos should have an internal minimum and maximum PWs check your data sheet and\n adjust accordingly\n","sig":null,"attributes":[{"value":"/ servos should have an internal minimum and maximum PWs check your data sheet and","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278640,"byte_end":278724,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/ adjust accordingly","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278725,"byte_end":278747,"line_start":7,"line_end":7,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1750},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278829,"byte_end":278835,"line_start":11,"line_end":11,"column_start":13,"column_end":19},"name":"min_us","qualname":"::servo::Servo::min_us","value":"u16","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" this would be 0-deg\n","sig":null,"attributes":[{"value":"/ this would be 0-deg","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278793,"byte_end":278816,"line_start":10,"line_end":10,"column_start":9,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1751},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278887,"byte_end":278893,"line_start":13,"line_end":13,"column_start":13,"column_end":19},"name":"max_us","qualname":"::servo::Servo::max_us","value":"u16","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":"this would be MAX deg\n","sig":null,"attributes":[{"value":"/this would be MAX deg","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278850,"byte_end":278874,"line_start":12,"line_end":12,"column_start":9,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1752},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278934,"byte_end":278940,"line_start":15,"line_end":15,"column_start":13,"column_end":19},"name":"enable","qualname":"::servo::Servo::enable","value":"bool","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":"on or off\n","sig":null,"attributes":[{"value":"/on or off","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278909,"byte_end":278921,"line_start":14,"line_end":14,"column_start":9,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":1753},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":278960,"byte_end":278966,"line_start":16,"line_end":16,"column_start":13,"column_end":19},"name":"period","qualname":"::servo::Servo::period","value":"u64","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279184,"byte_end":279187,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<Servo>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance on a PWM channal, should be either 1 or 0 passed into it\n do note that it sets the defualt values for input for min and max\n","sig":null,"attributes":[{"value":"/ Creates a new instance on a PWM channal, should be either 1 or 0 passed into it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279015,"byte_end":279098,"line_start":22,"line_end":22,"column_start":5,"column_end":88}},{"value":"/ do note that it sets the defualt values for input for min and max","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279103,"byte_end":279172,"line_start":23,"line_end":23,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1757},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279871,"byte_end":279882,"line_start":50,"line_end":50,"column_start":12,"column_end":23},"name":"set_min_max","qualname":"<Servo>::set_min_max","value":"pub fn set_min_max(&mut Self, u16, u16)","parent":null,"children":[],"decl_id":null,"docs":" allows changing the minima and maxima\n","sig":null,"attributes":[{"value":"/ allows changing the minima and maxima","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279818,"byte_end":279859,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280054,"byte_end":280064,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"set_period","qualname":"<Servo>::set_period","value":"pub fn set_period(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" allows changing the period, same as changing the period for PWM\n","sig":null,"attributes":[{"value":"/ allows changing the period, same as changing the period for PWM","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279975,"byte_end":280042,"line_start":54,"line_end":54,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280261,"byte_end":280267,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"enable","qualname":"<Servo>::enable","value":"pub fn enable(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Turns the PWM channel on\n","sig":null,"attributes":[{"value":"/ Turns the PWM channel on","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280221,"byte_end":280249,"line_start":59,"line_end":59,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280506,"byte_end":280513,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"disable","qualname":"<Servo>::disable","value":"pub fn disable(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"Turns the Pwm channel off\n","sig":null,"attributes":[{"value":"/Turns the Pwm channel off","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280466,"byte_end":280494,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280801,"byte_end":280811,"line_start":74,"line_end":74,"column_start":12,"column_end":22},"name":"motor_mode","qualname":"<Servo>::motor_mode","value":"pub fn motor_mode(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"USE WITH CAUTION some servos allow spinning if a suitable singal is sent.\n","sig":null,"attributes":[{"value":"/USE WITH CAUTION some servos allow spinning if a suitable singal is sent.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280713,"byte_end":280789,"line_start":73,"line_end":73,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":281007,"byte_end":281012,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"write","qualname":"<Servo>::write","value":"pub fn write(&mut Self, u8) -> Result<u64, u64>","parent":null,"children":[],"decl_id":null,"docs":" takes value as deg and then simply sends a singal to go there, makes sure that it worked\n","sig":null,"attributes":[{"value":"/ takes value as deg and then simply sends a singal to go there, makes sure that it worked","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":280903,"byte_end":280995,"line_start":77,"line_end":77,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":281537,"byte_end":281546,"line_start":92,"line_end":92,"column_start":12,"column_end":21},"name":"write_pwm","qualname":"<Servo>::write_pwm","value":"pub fn write_pwm(&mut Self, u64) -> Result<u64, u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":281906,"byte_end":281916,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"name":"is_enabled","qualname":"<Servo>::is_enabled","value":"pub fn is_enabled(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" boolean to see if the servo is active\n","sig":null,"attributes":[{"value":"/ boolean to see if the servo is active","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":281853,"byte_end":281894,"line_start":105,"line_end":105,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282047,"byte_end":282054,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"get_min","qualname":"<Servo>::get_min","value":"pub fn get_min(&mut Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" gets the minimum pulse width\n","sig":null,"attributes":[{"value":"/ gets the minimum pulse width","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282003,"byte_end":282035,"line_start":109,"line_end":109,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282148,"byte_end":282155,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"get_max","qualname":"<Servo>::get_max","value":"pub fn get_max(&mut Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" gets the maximum pulse width\n","sig":null,"attributes":[{"value":"/ gets the maximum pulse width","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282104,"byte_end":282136,"line_start":113,"line_end":113,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282381,"byte_end":282391,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"get_period","qualname":"<Servo>::get_period","value":"pub fn get_period(&mut Self) -> Result<u64, u64>","parent":null,"children":[],"decl_id":null,"docs":" gets the current period from the pwm and double checks if it is the one that is stored\n good to use to check if some other code is messing with the servo\n","sig":null,"attributes":[{"value":"/ gets the current period from the pwm and double checks if it is the one that is stored","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282205,"byte_end":282295,"line_start":117,"line_end":117,"column_start":5,"column_end":95}},{"value":"/ good to use to check if some other code is messing with the servo","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282300,"byte_end":282369,"line_start":118,"line_end":118,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":282606,"byte_end":282617,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"get_channel","qualname":"<Servo>::get_channel","value":"pub fn get_channel(&mut Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1769},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adxl","qualname":"::adxl","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1824},{"krate":0,"index":1849}],"decl_id":null,"docs":" Interface for the accelerometer ADXL345 using I2C","sig":null,"attributes":[{"value":"/ Interface for the accelerometer ADXL345 using I2C","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282664,"byte_end":282717,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282718,"byte_end":282721,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Refer to the I2C documentation to see how it is physicaly connected.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282722,"byte_end":282794,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ The library allows the user to wakeup the accelerometer and read from it reliably","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282795,"byte_end":282880,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ it also calulates the rotations (roll and pitch).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282881,"byte_end":282934,"line_start":5,"line_end":5,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282935,"byte_end":282938,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Interupts are currently in development and should be out soon","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":282939,"byte_end":283004,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283005,"byte_end":283008,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Basic usage","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283009,"byte_end":283027,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/ this example should show basic usage of the library","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283028,"byte_end":283083,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/ # Examples","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283084,"byte_end":283098,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/ let mut accel = Adxl::new();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283099,"byte_end":283131,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/ accel.start();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283132,"byte_end":283150,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ accel.get_offsets();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283151,"byte_end":283175,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/ accel.get_power_status();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283176,"byte_end":283205,"line_start":15,"line_end":15,"column_start":1,"column_end":30}},{"value":"/ println!(\"I2C ID: {} \\t Power Status: {} \\t XYZ Offsets ({}, {}, {})\",accel.id, accel.power_status, accel.offsets[0],accel.offsets[1],accel.offsets[2]);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283206,"byte_end":283362,"line_start":16,"line_end":16,"column_start":1,"column_end":157}},{"value":"/ accel.set_power_status(8);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283363,"byte_end":283393,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"/ accel.get_data();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283394,"byte_end":283415,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/ println!(\"GOT clean [ {:?} ]\",accel.data);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283416,"byte_end":283462,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ println!(\"Got rotations[ {} , {} ]\",accel.pitch , accel.roll);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283463,"byte_end":283529,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"allow(dead_code)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":283531,"byte_end":283551,"line_start":22,"line_end":22,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":284633,"byte_end":284637,"line_start":62,"line_end":62,"column_start":12,"column_end":16},"name":"Adxl","qualname":"::adxl::Adxl","value":"Adxl { id, power_status, offsets, raw_data, data, free_fall, tap, dtap, act, inact, data_ready, overrun, watermark, pitch, roll }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1806},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":284776,"byte_end":284778,"line_start":65,"line_end":65,"column_start":9,"column_end":11},"name":"id","qualname":"::adxl::Adxl::id","value":"u8","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1807},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":284866,"byte_end":284878,"line_start":66,"line_end":66,"column_start":9,"column_end":21},"name":"power_status","qualname":"::adxl::Adxl::power_status","value":"u8","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1808},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":284955,"byte_end":284962,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"offsets","qualname":"::adxl::Adxl::offsets","value":"[u8; 3]","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1810},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285026,"byte_end":285034,"line_start":68,"line_end":68,"column_start":9,"column_end":17},"name":"raw_data","qualname":"::adxl::Adxl::raw_data","value":"[u8; 6]","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1812},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285092,"byte_end":285096,"line_start":69,"line_end":69,"column_start":9,"column_end":13},"name":"data","qualname":"::adxl::Adxl::data","value":"[i16; 3]","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1814},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285168,"byte_end":285177,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"name":"free_fall","qualname":"::adxl::Adxl::free_fall","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1815},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285193,"byte_end":285196,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"name":"tap","qualname":"::adxl::Adxl::tap","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1816},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285212,"byte_end":285216,"line_start":74,"line_end":74,"column_start":9,"column_end":13},"name":"dtap","qualname":"::adxl::Adxl::dtap","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1817},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285232,"byte_end":285235,"line_start":75,"line_end":75,"column_start":9,"column_end":12},"name":"act","qualname":"::adxl::Adxl::act","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1818},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285251,"byte_end":285256,"line_start":76,"line_end":76,"column_start":9,"column_end":14},"name":"inact","qualname":"::adxl::Adxl::inact","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1819},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285272,"byte_end":285282,"line_start":77,"line_end":77,"column_start":9,"column_end":19},"name":"data_ready","qualname":"::adxl::Adxl::data_ready","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285298,"byte_end":285305,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"overrun","qualname":"::adxl::Adxl::overrun","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285321,"byte_end":285330,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"name":"watermark","qualname":"::adxl::Adxl::watermark","value":"bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1822},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285369,"byte_end":285374,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"name":"pitch","qualname":"::adxl::Adxl::pitch","value":"f64","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"pitch and roll\n","sig":null,"attributes":[{"value":"/pitch and roll","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285343,"byte_end":285360,"line_start":81,"line_end":81,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285389,"byte_end":285393,"line_start":83,"line_end":83,"column_start":9,"column_end":13},"name":"roll","qualname":"::adxl::Adxl::roll","value":"f64","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285665,"byte_end":285668,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Adxl>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a empty struct to allow usage and starts the i2c channel\n Sets it to the default address which is 0x53\n # Example\n let mut adxl = Adxl::new();\n","sig":null,"attributes":[{"value":"/ Creates a empty struct to allow usage and starts the i2c channel","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285478,"byte_end":285546,"line_start":90,"line_end":90,"column_start":5,"column_end":73}},{"value":"/ Sets it to the default address which is 0x53","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285551,"byte_end":285599,"line_start":91,"line_end":91,"column_start":5,"column_end":53}},{"value":"/ # Example","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285604,"byte_end":285617,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/ let mut adxl = Adxl::new();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285622,"byte_end":285653,"line_start":93,"line_end":93,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":286650,"byte_end":286664,"line_start":127,"line_end":127,"column_start":12,"column_end":26},"name":"new_alt_adress","qualname":"<Adxl>::new_alt_adress","value":"pub fn new_alt_adress(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a empty struct to allow usage and starts the i2c channel\n Sets it to a adress of your choise\n # Example\n let mut adxl = Adxl::new_alt_adress(0x21);\n","sig":null,"attributes":[{"value":"/ Creates a empty struct to allow usage and starts the i2c channel","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":286457,"byte_end":286525,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ Sets it to a adress of your choise","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":286530,"byte_end":286568,"line_start":123,"line_end":123,"column_start":5,"column_end":43}},{"value":"/ # Example","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":286573,"byte_end":286586,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/ let mut adxl = Adxl::new_alt_adress(0x21);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":286591,"byte_end":286637,"line_start":125,"line_end":125,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":287607,"byte_end":287612,"line_start":157,"line_end":157,"column_start":12,"column_end":17},"name":"start","qualname":"<Adxl>::start","value":"pub fn start(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Simply gets the defult data, so the user can begin\n Should be used in the new function but something went wrong, needs testing\n","sig":null,"attributes":[{"value":"/ Simply gets the defult data, so the user can begin","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":287458,"byte_end":287512,"line_start":155,"line_end":155,"column_start":5,"column_end":59}},{"value":"/ Should be used in the new function but something went wrong, needs testing","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":287517,"byte_end":287595,"line_start":156,"line_end":156,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288113,"byte_end":288125,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"set_sampling","qualname":"<Adxl>::set_sampling","value":"pub fn set_sampling(&Self)","parent":null,"children":[],"decl_id":null,"docs":"This function sets the sampling sampling rate, some libraries do this so I included it\n not neccecery to use\n","sig":null,"attributes":[{"value":"/This function sets the sampling sampling rate, some libraries do this so I included it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":287983,"byte_end":288072,"line_start":165,"line_end":165,"column_start":5,"column_end":94}},{"value":"/ not neccecery to use","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288077,"byte_end":288101,"line_start":166,"line_end":166,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288228,"byte_end":288238,"line_start":171,"line_end":171,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Adxl>::set_format","value":"pub fn set_format(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets the default format\n","sig":null,"attributes":[{"value":"/ Sets the default format","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288189,"byte_end":288216,"line_start":170,"line_end":170,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288396,"byte_end":288402,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"get_id","qualname":"<Adxl>::get_id","value":"pub fn get_id(&mut Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"uses the private function _read_cmd to read the current id and returns it\n","sig":null,"attributes":[{"value":"/uses the private function _read_cmd to read the current id and returns it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288308,"byte_end":288384,"line_start":174,"line_end":174,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288629,"byte_end":288645,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"get_power_status","qualname":"<Adxl>::get_power_status","value":"pub fn get_power_status(&mut Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"uses the private function _read_cmd to read the current powerstatus and returns it\n","sig":null,"attributes":[{"value":"/uses the private function _read_cmd to read the current powerstatus and returns it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288532,"byte_end":288617,"line_start":179,"line_end":179,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288845,"byte_end":288861,"line_start":185,"line_end":185,"column_start":12,"column_end":28},"name":"set_power_status","qualname":"<Adxl>::set_power_status","value":"pub fn set_power_status(&Self, u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" uses the private function _write_cmd to read the current id and returns it\n","sig":null,"attributes":[{"value":"/ uses the private function _write_cmd to read the current id and returns it","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":288755,"byte_end":288833,"line_start":184,"line_end":184,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289281,"byte_end":289293,"line_start":193,"line_end":193,"column_start":12,"column_end":24},"name":"get_data_raw","qualname":"<Adxl>::get_data_raw","value":"pub fn get_data_raw(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"uses the block read function from rpi_embedded to get 6 values of data from the accelerometer\nThe block read command reads from address DATAX0 to DATAX0 + length(self.raw_data) -1\nreturns it to the struct\n","sig":null,"attributes":[{"value":"/uses the block read function from rpi_embedded to get 6 values of data from the accelerometer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289048,"byte_end":289144,"line_start":190,"line_end":190,"column_start":5,"column_end":101}},{"value":"/The block read command reads from address DATAX0 to DATAX0 + length(self.raw_data) -1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289149,"byte_end":289237,"line_start":191,"line_end":191,"column_start":5,"column_end":93}},{"value":"/returns it to the struct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289242,"byte_end":289269,"line_start":192,"line_end":192,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289537,"byte_end":289545,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"get_data","qualname":"<Adxl>::get_data","value":"pub fn get_data(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"gets the raw data, and calulates the values\n the raw data has a low and high byte so it needs to be combined\n","sig":null,"attributes":[{"value":"/gets the raw data, and calulates the values","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289407,"byte_end":289453,"line_start":196,"line_end":196,"column_start":5,"column_end":51}},{"value":"/ the raw data has a low and high byte so it needs to be combined","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289458,"byte_end":289525,"line_start":197,"line_end":197,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289999,"byte_end":290008,"line_start":206,"line_end":206,"column_start":12,"column_end":21},"name":"rotations","qualname":"<Adxl>::rotations","value":"pub fn rotations(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"calculates rotations from worked data.\n","sig":null,"attributes":[{"value":"/calculates rotations from worked data.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":289946,"byte_end":289987,"line_start":205,"line_end":205,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290464,"byte_end":290475,"line_start":217,"line_end":217,"column_start":12,"column_end":23},"name":"get_offsets","qualname":"<Adxl>::get_offsets","value":"pub fn get_offsets(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"uses the block read function from rpi_embedded to get 3 values of data from the accelerometer\nThe block read command reads from address OFSX to OFSX + length(self.iffsets) -1\nreturns it to the struct\n","sig":null,"attributes":[{"value":"/uses the block read function from rpi_embedded to get 3 values of data from the accelerometer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290236,"byte_end":290332,"line_start":214,"line_end":214,"column_start":5,"column_end":101}},{"value":"/The block read command reads from address OFSX to OFSX + length(self.iffsets) -1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290337,"byte_end":290420,"line_start":215,"line_end":215,"column_start":5,"column_end":88}},{"value":"/returns it to the struct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290425,"byte_end":290452,"line_start":216,"line_end":216,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290913,"byte_end":290924,"line_start":224,"line_end":224,"column_start":12,"column_end":23},"name":"set_offsets","qualname":"<Adxl>::set_offsets","value":"pub fn set_offsets(&mut Self, [u8; ])","parent":null,"children":[],"decl_id":null,"docs":" uses the block write function from rpi_embedded to set 3 values on the accelerometer\n The block write command writes from address OFSX to OFSX + length(self.offsets) -1\n a check can be forced by doing get offsets and comparing, how ever this slows down\n the code so it is made up to the user\n","sig":null,"attributes":[{"value":"/ uses the block write function from rpi_embedded to set 3 values on the accelerometer","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290585,"byte_end":290673,"line_start":220,"line_end":220,"column_start":5,"column_end":93}},{"value":"/ The block write command writes from address OFSX to OFSX + length(self.offsets) -1","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290678,"byte_end":290764,"line_start":221,"line_end":221,"column_start":5,"column_end":91}},{"value":"/ a check can be forced by doing get offsets and comparing, how ever this slows down","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290769,"byte_end":290855,"line_start":222,"line_end":222,"column_start":5,"column_end":91}},{"value":"/ the code so it is made up to the user","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":290860,"byte_end":290901,"line_start":223,"line_end":223,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":291842,"byte_end":291859,"line_start":244,"line_end":244,"column_start":12,"column_end":29},"name":"set_tap_threshold","qualname":"<Adxl>::set_tap_threshold","value":"pub fn set_tap_threshold(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"UNTESTED should set the tap threshold as the datasheet specifies\n","sig":null,"attributes":[{"value":"/UNTESTED should set the tap threshold as the datasheet specifies","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":291763,"byte_end":291830,"line_start":243,"line_end":243,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292155,"byte_end":292172,"line_start":251,"line_end":251,"column_start":12,"column_end":29},"name":"get_tap_threshold","qualname":"<Adxl>::get_tap_threshold","value":"pub fn get_tap_threshold(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"UNTESTED should get the tap threshold as the datasheet specifies\n","sig":null,"attributes":[{"value":"/UNTESTED should get the tap threshold as the datasheet specifies","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292076,"byte_end":292143,"line_start":250,"line_end":250,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292324,"byte_end":292340,"line_start":257,"line_end":257,"column_start":12,"column_end":28},"name":"set_tap_duration","qualname":"<Adxl>::set_tap_duration","value":"pub fn set_tap_duration(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"UNTESTED should set the tap duration as the datasheet specifies\n","sig":null,"attributes":[{"value":"/UNTESTED should set the tap duration as the datasheet specifies","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292246,"byte_end":292312,"line_start":256,"line_end":256,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292630,"byte_end":292646,"line_start":264,"line_end":264,"column_start":12,"column_end":28},"name":"get_tap_duration","qualname":"<Adxl>::get_tap_duration","value":"pub fn get_tap_duration(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"UNTESTED should get the tap duration as the datasheet specifies\n","sig":null,"attributes":[{"value":"/UNTESTED should get the tap duration as the datasheet specifies","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292552,"byte_end":292618,"line_start":263,"line_end":263,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292725,"byte_end":292741,"line_start":268,"line_end":268,"column_start":12,"column_end":28},"name":"set_dtap_latency","qualname":"<Adxl>::set_dtap_latency","value":"pub fn set_dtap_latency(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":292962,"byte_end":292978,"line_start":274,"line_end":274,"column_start":12,"column_end":28},"name":"get_dtap_latency","qualname":"<Adxl>::get_dtap_latency","value":"pub fn get_dtap_latency(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":293059,"byte_end":293074,"line_start":278,"line_end":278,"column_start":12,"column_end":27},"name":"set_dtap_window","qualname":"<Adxl>::set_dtap_window","value":"pub fn set_dtap_window(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":293295,"byte_end":293310,"line_start":284,"line_end":284,"column_start":12,"column_end":27},"name":"get_dtap_window","qualname":"<Adxl>::get_dtap_window","value":"pub fn get_dtap_window(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":293391,"byte_end":293408,"line_start":288,"line_end":288,"column_start":12,"column_end":29},"name":"set_act_threshold","qualname":"<Adxl>::set_act_threshold","value":"pub fn set_act_threshold(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":293632,"byte_end":293649,"line_start":294,"line_end":294,"column_start":12,"column_end":29},"name":"get_act_threshold","qualname":"<Adxl>::get_act_threshold","value":"pub fn get_act_threshold(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":293732,"byte_end":293751,"line_start":297,"line_end":297,"column_start":12,"column_end":31},"name":"set_inact_threshold","qualname":"<Adxl>::set_inact_threshold","value":"pub fn set_inact_threshold(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":293977,"byte_end":293996,"line_start":303,"line_end":303,"column_start":12,"column_end":31},"name":"get_inact_threshold","qualname":"<Adxl>::get_inact_threshold","value":"pub fn get_inact_threshold(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294082,"byte_end":294096,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"set_inact_time","qualname":"<Adxl>::set_inact_time","value":"pub fn set_inact_time(&Self, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294171,"byte_end":294185,"line_start":311,"line_end":311,"column_start":12,"column_end":26},"name":"get_inact_time","qualname":"<Adxl>::get_inact_time","value":"pub fn get_inact_time(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294251,"byte_end":294267,"line_start":315,"line_end":315,"column_start":12,"column_end":28},"name":"set_ff_threshold","qualname":"<Adxl>::set_ff_threshold","value":"pub fn set_ff_threshold(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294490,"byte_end":294506,"line_start":321,"line_end":321,"column_start":12,"column_end":28},"name":"get_ff_threshold","qualname":"<Adxl>::get_ff_threshold","value":"pub fn get_ff_threshold(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294589,"byte_end":294600,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"set_ff_time","qualname":"<Adxl>::set_ff_time","value":"pub fn set_ff_time(&Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294820,"byte_end":294831,"line_start":331,"line_end":331,"column_start":12,"column_end":23},"name":"get_ff_time","qualname":"<Adxl>::get_ff_time","value":"pub fn get_ff_time(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":294912,"byte_end":294925,"line_start":336,"line_end":336,"column_start":12,"column_end":25},"name":"set_act_inact","qualname":"<Adxl>::set_act_inact","value":"pub fn set_act_inact(&Self, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295002,"byte_end":295015,"line_start":339,"line_end":339,"column_start":12,"column_end":25},"name":"get_act_inact","qualname":"<Adxl>::get_act_inact","value":"pub fn get_act_inact(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295084,"byte_end":295096,"line_start":343,"line_end":343,"column_start":12,"column_end":24},"name":"set_tap_axes","qualname":"<Adxl>::set_tap_axes","value":"pub fn set_tap_axes(&Self, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295168,"byte_end":295180,"line_start":346,"line_end":346,"column_start":12,"column_end":24},"name":"get_tap_axes","qualname":"<Adxl>::get_tap_axes","value":"pub fn get_tap_axes(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295244,"byte_end":295255,"line_start":350,"line_end":350,"column_start":12,"column_end":23},"name":"set_int_map","qualname":"<Adxl>::set_int_map","value":"pub fn set_int_map(&Self, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295326,"byte_end":295337,"line_start":353,"line_end":353,"column_start":12,"column_end":23},"name":"get_int_map","qualname":"<Adxl>::get_int_map","value":"pub fn get_int_map(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295400,"byte_end":295414,"line_start":357,"line_end":357,"column_start":12,"column_end":26},"name":"set_int_enable","qualname":"<Adxl>::set_int_enable","value":"pub fn set_int_enable(&Self, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295488,"byte_end":295502,"line_start":360,"line_end":360,"column_start":12,"column_end":26},"name":"get_int_enable","qualname":"<Adxl>::get_int_enable","value":"pub fn get_int_enable(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295568,"byte_end":295582,"line_start":364,"line_end":364,"column_start":12,"column_end":26},"name":"clear_interupt","qualname":"<Adxl>::clear_interupt","value":"pub fn clear_interupt(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":295974,"byte_end":295988,"line_start":375,"line_end":375,"column_start":12,"column_end":26},"name":"clear_settings","qualname":"<Adxl>::clear_settings","value":"pub fn clear_settings(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":25079,"byte_end":25086,"line_start":42,"line_end":42,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":25520,"byte_end":25527,"line_start":62,"line_end":62,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":25684,"byte_end":25689,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":27193,"byte_end":27198,"line_start":129,"line_end":129,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":28844,"byte_end":28853,"line_start":40,"line_end":40,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":30094,"byte_end":30103,"line_start":96,"line_end":96,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":30445,"byte_end":30454,"line_start":107,"line_end":107,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":35605,"byte_end":35619,"line_start":260,"line_end":260,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":37497,"byte_end":37511,"line_start":318,"line_end":318,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":41649,"byte_end":41657,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":42010,"byte_end":42018,"line_start":109,"line_end":109,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":42684,"byte_end":42692,"line_start":134,"line_end":134,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":42917,"byte_end":42925,"line_start":145,"line_end":145,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":43742,"byte_end":43755,"line_start":173,"line_end":173,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":45912,"byte_end":45925,"line_start":246,"line_end":246,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":46004,"byte_end":46017,"line_start":252,"line_end":252,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":46749,"byte_end":46759,"line_start":277,"line_end":277,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":46895,"byte_end":46905,"line_start":285,"line_end":285,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":47449,"byte_end":47461,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":48516,"byte_end":48528,"line_start":341,"line_end":341,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":48607,"byte_end":48619,"line_start":347,"line_end":347,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":49224,"byte_end":49233,"line_start":369,"line_end":369,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":50030,"byte_end":50035,"line_start":402,"line_end":402,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":54174,"byte_end":54181,"line_start":55,"line_end":55,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":54417,"byte_end":54424,"line_start":64,"line_end":64,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":61015,"byte_end":61022,"line_start":257,"line_end":257,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":61252,"byte_end":61259,"line_start":266,"line_end":266,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":61284,"byte_end":61291,"line_start":267,"line_end":267,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71348,"byte_end":71351,"line_start":290,"line_end":290,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":74714,"byte_end":74717,"line_start":401,"line_end":401,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76025,"byte_end":76033,"line_start":438,"line_end":438,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":1987},{"krate":0,"index":1988}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":82286,"byte_end":82295,"line_start":601,"line_end":601,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":2008},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":85442,"byte_end":85447,"line_start":694,"line_end":694,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":2038},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/soft_pwm.rs","byte_start":89018,"byte_end":89025,"line_start":58,"line_end":58,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/soft_pwm.rs","byte_start":93767,"byte_end":93774,"line_start":189,"line_end":189,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/soft_pwm.rs","byte_start":94292,"byte_end":94299,"line_start":202,"line_end":202,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13990,"byte_end":13995,"line_start":201,"line_end":201,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14508,"byte_end":14513,"line_start":213,"line_end":213,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14543,"byte_end":14548,"line_start":215,"line_end":215,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14651,"byte_end":14656,"line_start":221,"line_end":221,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15123,"byte_end":15127,"line_start":244,"line_end":244,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15742,"byte_end":15747,"line_start":267,"line_end":267,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15957,"byte_end":15962,"line_start":276,"line_end":276,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16333,"byte_end":16343,"line_start":295,"line_end":295,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16809,"byte_end":16816,"line_start":314,"line_end":314,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":17436,"byte_end":17445,"line_start":334,"line_end":334,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":18239,"byte_end":18243,"line_start":358,"line_end":358,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":125952,"byte_end":125964,"line_start":66,"line_end":66,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":129278,"byte_end":129290,"line_start":174,"line_end":174,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":132321,"byte_end":132332,"line_start":245,"line_end":245,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101869,"byte_end":101874,"line_start":182,"line_end":182,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102334,"byte_end":102339,"line_start":193,"line_end":193,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102369,"byte_end":102374,"line_start":195,"line_end":195,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102477,"byte_end":102482,"line_start":201,"line_end":201,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104236,"byte_end":104239,"line_start":244,"line_end":244,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":123238,"byte_end":123241,"line_start":715,"line_end":715,"column_start":22,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145411,"byte_end":145416,"line_start":103,"line_end":103,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145612,"byte_end":145617,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145647,"byte_end":145652,"line_start":113,"line_end":113,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146098,"byte_end":146105,"line_start":134,"line_end":134,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146446,"byte_end":146454,"line_start":150,"line_end":150,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147472,"byte_end":147475,"line_start":181,"line_end":181,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157675,"byte_end":157678,"line_start":483,"line_end":483,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":201844,"byte_end":201851,"line_start":66,"line_end":66,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":209006,"byte_end":209013,"line_start":266,"line_end":266,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174358,"byte_end":174363,"line_start":202,"line_end":202,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":175255,"byte_end":175260,"line_start":223,"line_end":223,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":175290,"byte_end":175295,"line_start":225,"line_end":225,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177833,"byte_end":177836,"line_start":281,"line_end":281,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179052,"byte_end":179063,"line_start":316,"line_end":316,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179478,"byte_end":179486,"line_start":333,"line_end":333,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180558,"byte_end":180562,"line_start":369,"line_end":369,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181687,"byte_end":181695,"line_start":402,"line_end":402,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183111,"byte_end":183114,"line_start":436,"line_end":436,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":193026,"byte_end":193029,"line_start":702,"line_end":702,"column_start":22,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":193054,"byte_end":193057,"line_start":704,"line_end":704,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211932,"byte_end":211937,"line_start":57,"line_end":57,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212142,"byte_end":212147,"line_start":65,"line_end":65,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":213195,"byte_end":213200,"line_start":99,"line_end":99,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":215129,"byte_end":215132,"line_start":141,"line_end":141,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222563,"byte_end":222573,"line_start":314,"line_end":314,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234139,"byte_end":234144,"line_start":198,"line_end":198,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234488,"byte_end":234493,"line_start":208,"line_end":208,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234523,"byte_end":234528,"line_start":210,"line_end":210,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234629,"byte_end":234634,"line_start":216,"line_end":216,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234741,"byte_end":234746,"line_start":222,"line_end":222,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235512,"byte_end":235518,"line_start":252,"line_end":252,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236438,"byte_end":236449,"line_start":282,"line_end":282,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236973,"byte_end":236978,"line_start":304,"line_end":304,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237302,"byte_end":237308,"line_start":319,"line_end":319,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239808,"byte_end":239814,"line_start":391,"line_end":391,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241178,"byte_end":241182,"line_start":436,"line_end":436,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261511,"byte_end":261515,"line_start":996,"line_end":996,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279003,"byte_end":279008,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285467,"byte_end":285471,"line_start":89,"line_end":89,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1825},{"krate":0,"index":1829},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":291753,"byte_end":291757,"line_start":242,"line_end":242,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2359,"byte_end":2363,"line_start":44,"line_end":44,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2410,"byte_end":2413,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":693}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2423,"byte_end":2426,"line_start":48,"line_end":48,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":905}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2436,"byte_end":2439,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1022}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2449,"byte_end":2455,"line_start":50,"line_end":50,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1212}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2465,"byte_end":2469,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1258}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2479,"byte_end":2484,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1734}},{"kind":"Mod","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/lib.rs","byte_start":2494,"byte_end":2498,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1769}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":25079,"byte_end":25086,"line_start":42,"line_end":42,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":25520,"byte_end":25527,"line_start":62,"line_end":62,"column_start":15,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1878},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":25684,"byte_end":25689,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/epoll.rs","byte_start":27193,"byte_end":27198,"line_start":129,"line_end":129,"column_start":15,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1882},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":28844,"byte_end":28853,"line_start":40,"line_end":40,"column_start":6,"column_end":15},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":30094,"byte_end":30103,"line_start":96,"line_end":96,"column_start":21,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":184},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":30445,"byte_end":30454,"line_start":107,"line_end":107,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":35605,"byte_end":35619,"line_start":260,"line_end":260,"column_start":6,"column_end":20},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/interrupt.rs","byte_start":37497,"byte_end":37511,"line_start":318,"line_end":318,"column_start":15,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1899},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":41649,"byte_end":41657,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":42010,"byte_end":42018,"line_start":109,"line_end":109,"column_start":21,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1904},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":42684,"byte_end":42692,"line_start":134,"line_end":134,"column_start":6,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":42917,"byte_end":42925,"line_start":145,"line_end":145,"column_start":21,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1915},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":43742,"byte_end":43755,"line_start":173,"line_end":173,"column_start":6,"column_end":19},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":45912,"byte_end":45925,"line_start":246,"line_end":246,"column_start":15,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":46004,"byte_end":46017,"line_start":252,"line_end":252,"column_start":21,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":46749,"byte_end":46759,"line_start":277,"line_end":277,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1927},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":46895,"byte_end":46905,"line_start":285,"line_end":285,"column_start":21,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1927},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":47449,"byte_end":47461,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":48516,"byte_end":48528,"line_start":341,"line_end":341,"column_start":15,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":349},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":48607,"byte_end":48619,"line_start":347,"line_end":347,"column_start":21,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":349},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":49224,"byte_end":49233,"line_start":369,"line_end":369,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/ioctl.rs","byte_start":50030,"byte_end":50035,"line_start":402,"line_end":402,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":54174,"byte_end":54181,"line_start":55,"line_end":55,"column_start":21,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":54417,"byte_end":54424,"line_start":64,"line_end":64,"column_start":6,"column_end":13},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":61015,"byte_end":61022,"line_start":257,"line_end":257,"column_start":15,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":61252,"byte_end":61259,"line_start":266,"line_end":266,"column_start":22,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/mem.rs","byte_start":61284,"byte_end":61291,"line_start":267,"line_end":267,"column_start":22,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":71348,"byte_end":71351,"line_start":290,"line_end":290,"column_start":6,"column_end":9},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":74714,"byte_end":74717,"line_start":401,"line_end":401,"column_start":15,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1961},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":76025,"byte_end":76033,"line_start":438,"line_end":438,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":82286,"byte_end":82295,"line_start":601,"line_end":601,"column_start":6,"column_end":15},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/pin.rs","byte_start":85442,"byte_end":85447,"line_start":694,"line_end":694,"column_start":6,"column_end":11},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/soft_pwm.rs","byte_start":89018,"byte_end":89025,"line_start":58,"line_end":58,"column_start":6,"column_end":13},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2081},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/soft_pwm.rs","byte_start":93767,"byte_end":93774,"line_start":189,"line_end":189,"column_start":15,"column_end":22},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2081},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio/soft_pwm.rs","byte_start":94292,"byte_end":94299,"line_start":202,"line_end":202,"column_start":22,"column_end":29},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2081},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":13990,"byte_end":13995,"line_start":201,"line_end":201,"column_start":23,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2086},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14508,"byte_end":14513,"line_start":213,"line_end":213,"column_start":23,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2086},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14543,"byte_end":14548,"line_start":215,"line_end":215,"column_start":26,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2086},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":14651,"byte_end":14656,"line_start":221,"line_end":221,"column_start":30,"column_end":35},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2086},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15123,"byte_end":15127,"line_start":244,"line_end":244,"column_start":23,"column_end":27},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15742,"byte_end":15747,"line_start":267,"line_end":267,"column_start":23,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2138},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":15957,"byte_end":15962,"line_start":276,"line_end":276,"column_start":14,"column_end":19},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2138},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16333,"byte_end":16343,"line_start":295,"line_end":295,"column_start":23,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2156},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":16809,"byte_end":16816,"line_start":314,"line_end":314,"column_start":23,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2177},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":17436,"byte_end":17445,"line_start":334,"line_end":334,"column_start":21,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/gpio.rs","byte_start":18239,"byte_end":18243,"line_start":358,"line_end":358,"column_start":6,"column_end":10},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":125952,"byte_end":125964,"line_start":66,"line_end":66,"column_start":6,"column_end":18},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":129278,"byte_end":129290,"line_start":174,"line_end":174,"column_start":21,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2227},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c/ioctl.rs","byte_start":132321,"byte_end":132332,"line_start":245,"line_end":245,"column_start":6,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":101869,"byte_end":101874,"line_start":182,"line_end":182,"column_start":23,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102334,"byte_end":102339,"line_start":193,"line_end":193,"column_start":23,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2314},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102369,"byte_end":102374,"line_start":195,"line_end":195,"column_start":26,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":102477,"byte_end":102482,"line_start":201,"line_end":201,"column_start":30,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":104236,"byte_end":104239,"line_start":244,"line_end":244,"column_start":6,"column_end":9},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/i2c.rs","byte_start":123238,"byte_end":123241,"line_start":715,"line_end":715,"column_start":22,"column_end":25},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2327},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145411,"byte_end":145416,"line_start":103,"line_end":103,"column_start":23,"column_end":28},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2336},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145612,"byte_end":145617,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2336},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":145647,"byte_end":145652,"line_start":113,"line_end":113,"column_start":26,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2336},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146098,"byte_end":146105,"line_start":134,"line_end":134,"column_start":23,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2342},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":146446,"byte_end":146454,"line_start":150,"line_end":150,"column_start":23,"column_end":31},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2360},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":147472,"byte_end":147475,"line_start":181,"line_end":181,"column_start":6,"column_end":9},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/pwm.rs","byte_start":157675,"byte_end":157678,"line_start":483,"line_end":483,"column_start":15,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":201844,"byte_end":201851,"line_start":66,"line_end":66,"column_start":14,"column_end":21},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi/segment.rs","byte_start":209006,"byte_end":209013,"line_start":266,"line_end":266,"column_start":29,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2381},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":174358,"byte_end":174363,"line_start":202,"line_end":202,"column_start":23,"column_end":28},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2418},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":175255,"byte_end":175260,"line_start":223,"line_end":223,"column_start":23,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2418},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":175290,"byte_end":175295,"line_start":225,"line_end":225,"column_start":26,"column_end":31},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2418},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":177833,"byte_end":177836,"line_start":281,"line_end":281,"column_start":23,"column_end":26},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2439},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179052,"byte_end":179063,"line_start":316,"line_end":316,"column_start":23,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2472},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":179478,"byte_end":179486,"line_start":333,"line_end":333,"column_start":23,"column_end":31},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2493},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":180558,"byte_end":180562,"line_start":369,"line_end":369,"column_start":23,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2511},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":181687,"byte_end":181695,"line_start":402,"line_end":402,"column_start":23,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2535},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":183111,"byte_end":183114,"line_start":436,"line_end":436,"column_start":6,"column_end":9},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":193026,"byte_end":193029,"line_start":702,"line_end":702,"column_start":22,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1190},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/spi.rs","byte_start":193054,"byte_end":193057,"line_start":704,"line_end":704,"column_start":21,"column_end":24},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1190},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":211932,"byte_end":211937,"line_start":57,"line_end":57,"column_start":23,"column_end":28},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2553},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":212142,"byte_end":212147,"line_start":65,"line_end":65,"column_start":23,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2553},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":213195,"byte_end":213200,"line_start":99,"line_end":99,"column_start":23,"column_end":28},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2558},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":215129,"byte_end":215132,"line_start":141,"line_end":141,"column_start":23,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2602},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/system.rs","byte_start":222563,"byte_end":222573,"line_start":314,"line_end":314,"column_start":6,"column_end":16},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234139,"byte_end":234144,"line_start":198,"line_end":198,"column_start":23,"column_end":28},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2643},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234488,"byte_end":234493,"line_start":208,"line_end":208,"column_start":23,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2643},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234523,"byte_end":234528,"line_start":210,"line_end":210,"column_start":26,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2643},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234629,"byte_end":234634,"line_start":216,"line_end":216,"column_start":28,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2643},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":234741,"byte_end":234746,"line_start":222,"line_end":222,"column_start":30,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2643},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":235512,"byte_end":235518,"line_start":252,"line_end":252,"column_start":23,"column_end":29},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2654},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236438,"byte_end":236449,"line_start":282,"line_end":282,"column_start":23,"column_end":34},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":236973,"byte_end":236978,"line_start":304,"line_end":304,"column_start":23,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2696},"to":{"krate":2,"index":9307}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":237302,"byte_end":237308,"line_start":319,"line_end":319,"column_start":6,"column_end":12},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":239808,"byte_end":239814,"line_start":391,"line_end":391,"column_start":21,"column_end":27},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1675},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":241178,"byte_end":241182,"line_start":436,"line_end":436,"column_start":6,"column_end":10},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/uart.rs","byte_start":261511,"byte_end":261515,"line_start":996,"line_end":996,"column_start":6,"column_end":10},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/servo.rs","byte_start":279003,"byte_end":279008,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":285467,"byte_end":285471,"line_start":89,"line_end":89,"column_start":6,"column_end":10},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/rpi_embedded-0.1.0/src/adxl.rs","byte_start":291753,"byte_end":291757,"line_start":242,"line_end":242,"column_start":6,"column_end":10},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}}]}